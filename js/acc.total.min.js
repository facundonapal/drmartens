function _autoload() {
    $.each(ACC, function(section, obj) {
        $.isArray(obj._autoload) && $.each(obj._autoload, function(key, value) {
            $.isArray(value) ? value[1] ? ACC[section][value[0]]() : value[2] && ACC[section][value[2]]() : ACC[section][value]()
        })
    })
}
$(function() {
    _autoload(),
    ll = new LazyLoad({
        elements_selector: ".lazy-background",
        callback_enter: function(element) {
            var imageFragment = function(srcUrl) {
                var imageFragment = document.createElement("img");
                return imageFragment.setAttribute("src", srcUrl),
                imageFragment
            }(element.getAttribute("data-src"));
            imageFragment.addEventListener("load", function callback_load(event) {
                element.classList.remove("loading"),
                imageFragment.removeEventListener("load", callback_load)
            }),
            element.classList.add("loading")
        },
        callback_set: function(element) {},
        callback_error: function(element) {
            element.src = "../images/placeholder.jpg"
        }
    })
});
var ACCORDION_CONTENT = ".js-accordion-content"
  , ACCORDION_LINK = ".js-accordion-call, .js-paymentmode-accordion-call";
function urlParam(name) {
    var results = new RegExp("(\\?|\\&)" + name + "\\=([^&]+)").exec(window.location.href);
    return null == results ? null : results[2] || 0
}
ACC.accordion = {
    _autoload: ["bind"],
    bind: function() {
        $("body").on("click", ".faq_question", function(e) {
            $(this).hasClass("_active") ? ($(".faq_question").removeClass("_active"),
            $(".faq_answer_container").removeClass("_active")) : ($(".faq_question").removeClass("_active"),
            $(".faq_answer_container").removeClass("_active"),
            $(this).addClass("_active"),
            $(this).next().addClass("_active"))
        }),
        $("body").on("click", ".js-accordion-call", function(e) {
            ACC.accordion.open(e)
        })
    },
    close: function(e) {
        setTimeout(function() {
            $(ACCORDION_LINK).removeClass("_active"),
            ACC.accordion.checkContent()
        }, 500)
    },
    open: function(e) {
        e[0] ? e.currentTarget = e[0] : e.preventDefault();
        var divId = $(e.currentTarget).attr("href");
        $(e.currentTarget).hasClass("_active") && !$(e.currentTarget).hasClass("_no-close") ? ($(e.currentTarget).removeClass("_active"),
        ACC.accordion.checkContent()) : (ACC.accordion.checkContent(),
        $(ACCORDION_LINK).removeClass("_active"),
        $(e.currentTarget).addClass("_active"),
        $(divId).addClass("_active"))
    },
    checkContent: function() {
        $(ACCORDION_CONTENT).each(function() {
            $(this).hasClass("_no-close") || $("#" + $(this)[0].id).removeClass("_active")
        })
    }
},
ACC.address = {
    _autoload: ["bindToChangeAddressButton", "bindCreateUpdateAddressForm", "bindSuggestedDeliveryAddresses", "bindCountrySpecificAddressForms", "showAddressFormButtonPanel", "bindViewAddressBook", "bindToColorboxClose", "showRemoveAddressFromBookConfirmation", "backToListAddresses", "globalAddressElements"],
    spinner: $("<img src='" + ACC.config.commonResourcePath + "/images/spinner.gif' />"),
    addressID: "",
    handleChangeAddressButtonClick: function() {
        return ACC.address.addressID = $(this).data("address") ? $(this).data("address") : "",
        $("#summaryDeliveryAddressFormContainer").show(),
        $("#summaryOverlayViewAddressBook").show(),
        $("#summaryDeliveryAddressBook").hide(),
        $.getJSON(getDeliveryAddressesUrl, ACC.address.handleAddressDataLoad),
        !1
    },
    handleAddressDataLoad: function(data) {
        ACC.address.setupDeliveryAddressPopupForm(data),
        ACC.colorbox.open("", {
            inline: !0,
            href: "#summaryDeliveryAddressOverlay",
            overlayClose: !1,
            onOpen: function() {
                ACC.address.emptyAddressForm(),
                $(document).on("change", "#saveAddress", function() {
                    var saveAddressChecked = $(this).prop("checked");
                    $("#defaultAddress").prop("disabled", !saveAddressChecked),
                    saveAddressChecked || $("#defaultAddress").prop("checked", !1)
                })
            }
        })
    },
    setupDeliveryAddressPopupForm: function(data) {
        $("#summaryDeliveryAddressBook").html($("#deliveryAddressesTemplate").tmpl({
            addresses: data
        })),
        $("#summaryDeliveryAddressBook button.use_address").click(ACC.address.handleSelectExistingAddressClick),
        $("#summaryDeliveryAddressBook button.edit").click(ACC.address.handleEditAddressClick),
        $("#summaryDeliveryAddressBook button.default").click(ACC.address.handleDefaultAddressClick)
    },
    emptyAddressForm: function() {
        var options = {
            url: getDeliveryAddressFormUrl,
            data: {
                addressId: ACC.address.addressID,
                createUpdateStatus: ""
            },
            type: "GET",
            success: function(data) {
                $("#summaryDeliveryAddressFormContainer").html(data),
                ACC.address.bindCreateUpdateAddressForm()
            }
        };
        $.ajax(options)
    },
    handleSelectExistingAddressClick: function() {
        var addressId = $(this).attr("data-address");
        return $.postJSON(setDeliveryAddressUrl, {
            addressId: addressId
        }, ACC.address.handleSelectExitingAddressSuccess),
        !1
    },
    handleEditAddressClick: function() {
        $("#summaryDeliveryAddressFormContainer").show(),
        $("#summaryOverlayViewAddressBook").show(),
        $("#summaryDeliveryAddressBook").hide();
        var addressId = $(this).attr("data-address")
          , options = {
            url: getDeliveryAddressFormUrl,
            data: {
                addressId: addressId,
                createUpdateStatus: ""
            },
            target: "#summaryDeliveryAddressFormContainer",
            type: "GET",
            success: function(data) {
                ACC.address.bindCreateUpdateAddressForm(),
                ACC.colorbox.resize()
            },
            error: function(xht, textStatus, ex) {
                alert("Failed to update cart. Error details [" + xht + ", " + textStatus + ", " + ex + "]")
            }
        };
        return $(this).ajaxSubmit(options),
        !1
    },
    handleDefaultAddressClick: function() {
        var addressId = $(this).attr("data-address")
          , options = {
            url: setDefaultAddressUrl,
            data: {
                addressId: addressId
            },
            type: "GET",
            success: function(data) {
                ACC.address.setupDeliveryAddressPopupForm(data)
            },
            error: function(xht, textStatus, ex) {
                alert("Failed to update address book. Error details [" + xht + ", " + textStatus + ", " + ex + "]")
            }
        };
        return $(this).ajaxSubmit(options),
        !1
    },
    handleSelectExitingAddressSuccess: function(data) {
        null != data ? (ACC.refresh.refreshPage(data),
        ACC.colorbox.close()) : alert("Failed to set delivery address")
    },
    bindCreateUpdateAddressForm: function() {
        $(".create_update_address_form").each(function() {
            var options = {
                type: "POST",
                beforeSubmit: function() {
                    $("#checkout_delivery_address").block({
                        message: ACC.address.spinner
                    })
                },
                success: function(data) {
                    $("#summaryDeliveryAddressFormContainer").html(data);
                    var status = $(".create_update_address_id").attr("status");
                    null != status && "success" === status.toLowerCase() ? (ACC.refresh.getCheckoutCartDataAndRefreshPage(),
                    ACC.colorbox.close()) : (ACC.address.bindCreateUpdateAddressForm(),
                    ACC.colorbox.resize())
                },
                error: function(xht, textStatus, ex) {
                    alert("Failed to update cart. Error details [" + xht + ", " + textStatus + ", " + ex + "]")
                },
                complete: function() {
                    $("#checkout_delivery_address").unblock()
                }
            };
            $(this).ajaxForm(options)
        })
    },
    refreshDeliveryAddressSection: function(data) {
        $(".summaryDeliveryAddress").replaceWith($("#deliveryAddressSummaryTemplate").tmpl(data))
    },
    bindSuggestedDeliveryAddresses: function() {
        var status = $(".add_edit_delivery_address_id").attr("status");
        null != status && "hasSuggestedAddresses" == status && ACC.address.showSuggestedAddressesPopup()
    },
    showSuggestedAddressesPopup: function() {
        $(document).ready(function() {
            ACC.colorbox.open("Suggested Addresses", {
                href: "#popup_suggested_delivery_addresses",
                inline: !0,
                width: "525px",
                onComplete: function() {
                    $(this).colorbox.resize()
                }
            })
        })
    },
    bindCountrySpecificAddressForms: function() {
        $(document).on("change", ".i18n-country select.countrySelector", function() {
            if ("" != $(this).val()) {
                var options = {
                    addressCode: $(this).closest("form").find(".add_edit_delivery_address_id").val(),
                    countryIsoCode: $(this).val()
                };
                ACC.address.displayCountrySpecificAddressForm($(this), options, ACC.address.showAddressFormButtonPanel)
            }
        })
    },
    showAddressFormButtonPanel: function() {
        "" !== $("#countrySelector :input").val() && $("#addressform_button_panel").show()
    },
    bindToColorboxClose: function() {
        $(document).on("click", ".closeColorBox", function() {
            ACC.colorbox.close()
        })
    },
    displayCountrySpecificAddressForm: function($countrySelector, options, callback) {
        var formSelector = $countrySelector.parent().data("target");
        "" == formSelector && null == formSelector && (formSelector = "#i18nAddressForm");
        var $form = $(formSelector);
        $.ajax({
            url: ACC.config.encodedContextPath + "/my-account/addressform",
            async: !0,
            data: options,
            dataType: "html",
            beforeSend: function() {
                $form.html(ACC.address.spinner)
            }
        }).done(function(data) {
            $form.html($(data).html()),
            "function" == typeof callback && callback.call(),
            ACC.address.globalAddressElements()
        })
    },
    bindToChangeAddressButton: function() {
        $(document).on("click", ".summaryDeliveryAddress .editButton", ACC.address.handleChangeAddressButtonClick)
    },
    bindViewAddressBook: function() {
        $(document).on("click", ".js-address-book", function(e) {
            e.preventDefault(),
            ACC.colorbox.open("Saved Addresses", {
                href: "#addressbook",
                inline: !0,
                width: "380px"
            })
        }),
        $(document).on("click", "#summaryOverlayViewAddressBook", function() {
            $("#summaryDeliveryAddressFormContainer").hide(),
            $("#summaryOverlayViewAddressBook").hide(),
            $("#summaryDeliveryAddressBook").show(),
            ACC.colorbox.resize()
        })
    },
    showRemoveAddressFromBookConfirmation: function() {
        $(document).on("click", ".removeAddressFromBookButton", function() {
            var addressId = $(this).data("addressId")
              , popupTitle = $(this).data("popupTitle");
            ACC.colorbox.open(popupTitle, {
                inline: !0,
                height: !1,
                href: "#popup_confirm_address_removal_" + addressId,
                onComplete: function() {
                    $(this).colorbox.resize()
                }
            })
        })
    },
    backToListAddresses: function() {
        $(".addressBackBtn").on("click", function() {
            var sUrl = $(this).data("backToAddresses");
            window.location = sUrl
        })
    },
    globalAddressElements: function() {
        $(document).ready(function() {
            $(".phone").each(function(index) {
                var $phone = $(this);
                $(this).intlTelInput({
                    nationalMode: !0,
                    autoPlaceholder: "aggressive",
                    customPlaceholder: function(selectedCountryPlaceholder, selectedCountryData) {
                        return "Phone - " + selectedCountryPlaceholder
                    },
                    utilsScript: "/_ui/responsive/common/js/utils.js",
                    initialCountry: "auto",
                    geoIpLookup: function(callback) {
                        var countryIsoCode = "US";
                        0 < $phone.closest("form").length && (countryIsoCode = $(".countrySelector:first").val()),
                        callback(countryIsoCode)
                    }
                })
            }),
            $(document).on("change", ".phone", function() {
                var $this = $(this)
                  , $formGroup = $this.closest(".form-group");
                $this.intlTelInput("getNumber");
                if (0 == $this.intlTelInput("isValidNumber")) {
                    if (0 == $(this).next(".fieldErrorMessageClassTxt").length) {
                        $formGroup.addClass("has-error");
                        var phoneError = $("#phone-error").val();
                        $this.after('<span class="fieldErrorMessageClassTxt">' + phoneError + "</span>")
                    }
                } else
                    $formGroup.removeClass("has-error"),
                    $(this).next(".fieldErrorMessageClassTxt").remove()
            }),
            $("select.input-sm").each(function(index) {
                var $this = $(this);
                "" == $this.find("option:selected").val() && $this.addClass("selectTextOpacity")
            }),
            $(document).on("change", "select.input-sm", function() {
                var $this = $(this)
                  , selectedVal = $this.val();
                $this.find("option").each(function() {
                    var $thisOption = $(this);
                    $thisOption.attr("selected") && $thisOption.removeAttr("selected"),
                    $thisOption.val() == selectedVal && $thisOption.attr("selected", "selected")
                }),
                "" != selectedVal && $this.removeClass("selectTextOpacity")
            })
        })
    }
},
ACC.autocomplete = {
    _autoload: ["bindSearchAutocomplete", "bindDisableSearch", "mobileSearchToggle"],
    bindSearchAutocomplete: function() {
        $.widget("custom.yautocomplete", $.ui.autocomplete, {
            _create: function() {
                var option = this.element.data("options");
                this._setOptions({
                    minLength: option.minCharactersBeforeRequest,
                    displayProductImages: option.displayProductImages,
                    delay: option.waitTimeBeforeRequest,
                    autocompleteUrl: option.autocompleteUrl,
                    source: this.source
                }),
                $.ui.autocomplete.prototype._create.call(this)
            },
            options: {
                cache: {},
                focus: function() {
                    return !1
                },
                select: function(event, ui) {
                    ui.item.value = ACC.sanitizer.sanitize(ui.item.value, !1),
                    window.location.href = ui.item.url
                }
            },
            _renderItem: function(ul, item) {
                if ("autoSuggestion" == item.type) {
                    0 == ul.children(".search__title--text").length && ul.append('<li class="search__title--text suggestion-title">SEARCH SUGGESTIONS</li>');
                    var renderHtml = "<a href='" + item.url + "' ><div class='name'>" + item.value + "</div></a>";
                    return $("<li>").data("item.autocomplete", item).append(renderHtml).appendTo(ul)
                }
                if ("productResult" == item.type) {
                    0 == ul.children(".search__title--prod").length && ul.append('<li class="search__title--prod suggestion-title">PRODUCT SUGGESTIONS</li>');
                    renderHtml = "<a href='" + item.url + "' >";
                    return null != item.image && (renderHtml += "<div class='thumb'><img src='" + item.image + "'  /></div>"),
                    renderHtml += "<div class='name'>" + item.value + "</div>",
                    item.wasPrice ? (renderHtml += "<div class='price'>",
                    renderHtml += "<span class='original-price'>" + item.wasPrice + "</span>",
                    renderHtml += " - ",
                    renderHtml += "<span class='special-price'>" + item.price + "</span>",
                    renderHtml += "</div>") : renderHtml += "<div class='price'>" + item.price + "</div>",
                    renderHtml += "</a>",
                    $("<li>").data("item.autocomplete", item).append(renderHtml).appendTo(ul)
                }
            },
            source: function(request, response) {
                var self = this
                  , term = request.term.toLowerCase();
                if (term in self.options.cache)
                    return response(self.options.cache[term]);
                $.getJSON(self.options.autocompleteUrl, {
                    term: request.term
                }, function(data) {
                    var autoSearchData = [];
                    return null != data.suggestions && $.each(data.suggestions, function(i, obj) {
                        autoSearchData.push({
                            value: obj.term,
                            url: ACC.config.encodedContextPath + "/search?text=" + obj.term,
                            type: "autoSuggestion"
                        })
                    }),
                    null != data.products && $.each(data.products, function(i, obj) {
                        autoSearchData.push({
                            value: ACC.sanitizer.sanitize(obj.name),
                            code: obj.code,
                            desc: ACC.sanitizer.sanitize(obj.description),
                            manufacturer: ACC.sanitizer.sanitize(obj.manufacturer),
                            url: ACC.config.encodedContextPath + obj.url + "?text=" + term,
                            price: obj.price.formattedValue,
                            wasPrice: obj.price.formattedWasPriceValue,
                            type: "productResult",
                            image: null != obj.images && self.options.displayProductImages ? obj.images[0].url : null
                        })
                    }),
                    self.options.cache[term] = autoSearchData,
                    response(autoSearchData)
                })
            }
        }),
        $search = $(".js-site-search-input"),
        0 < $search.length && $search.yautocomplete()
    },
    bindDisableSearch: function() {
        $("#js-site-search-input").keyup(function() {
            $("#js-site-search-input").val($("#js-site-search-input").val().replace(/^\s+/gm, "")),
            $(".js_search_button").prop("disabled", "" == this.value)
        }),
        $("#search_form_SearchBox").on("click", ".close-search", function() {
            $("#js-site-search-input").val("")
        })
    },
    mobileSearchToggle: function() {
        $(".dm-m-search-icon").on("click", function() {
            if ($(this).toggleClass("active"),
            $(".site-search").slideToggle(),
            $("body").hasClass("fixed")) {
                var $dmNavHam = $(".dm-navigation-ham");
                $("body").removeClass("fixed"),
                $(".js-mainHeader").removeClass("active"),
                $dmNavHam.find(".fa-bars").removeClass("hide"),
                $dmNavHam.find(".fa-close").addClass("hide");
                var $dmNav = $("#dm-primary-nav");
                $dmNavHam.find(".fa").removeClass("top-menu-link"),
                $dmNav.removeClass("second-level"),
                $dmNav.find(".js-enquire-has-sub, .sub-navigation-section, .sub-navigation-list").removeClass("active")
            }
        })
    }
},
ACC.carousel = {
    _autoload: ["initCarousel"],
    breakpoint: {
        med: 769,
        small: 480
    },
    initCarousel: function() {
        ACC.carousel.runInitCarousel()
    },
    runInitCarousel: function() {
        var homeHeroSpeed = $(".js-slick-homeHero").data("speed")
          , homeHeroDelay = $(".js-slick-homeHero").data("delay");
        homeHeroSpeed = homeHeroSpeed || 300,
        homeHeroDelay = homeHeroDelay || 3e3,
        $(".js-slick-homeHero").on("afterChange", function(event, slick, currentSlide) {
            ACC.carousel.carouselLazyload(".js-slick-homeHero .lazy-background.slick-active")
        }).slick({
            speed: homeHeroSpeed,
            infinite: !0,
            dots: !0,
            autoplay: !0,
            autoplaySpeed: homeHeroDelay,
            useTransform: !1,
            init: ACC.carousel.carouselButtonSize(),
            prevArrow: '<button type="button" class="slick-prev"><span class="fa fa-chevron-left"></span></button>',
            nextArrow: '<button type="button" class="slick-next"><span class="fa fa-chevron-right"></span></button>',
            responsive: [{
                breakpoint: ACC.carousel.breakpoint.small,
                settings: {
                    arrows: !1,
                    swipe: !1
                }
            }]
        }),
        $(".js-slick-hero").each(function() {
            var autoplayHero = $(this).data("autoplay")
              , speedHero = $(this).data("speed")
              , delayHero = $(this).data("delay");
            $(this).on("init", function(event, slick, direction) {
                1 == slick.$slides.length && slick.$dots.addClass("hide")
            }).on("afterChange", function(event, slick, currentSlide) {
                ACC.carousel.carouselLazyload(".js-slick-hero .lazy-background.slick-active")
            }).slick({
                speed: speedHero,
                infinite: !0,
                dots: !0,
                autoplay: autoplayHero,
                autoplaySpeed: delayHero,
                useTransform: !1,
                prevArrow: '<button type="button" class="slick-prev"><span class="fa fa-chevron-left"></span></button>',
                nextArrow: '<button type="button" class="slick-next"><span class="fa fa-chevron-right"></span></button>',
                responsive: [{
                    breakpoint: ACC.carousel.breakpoint.small,
                    settings: {
                        arrows: !1,
                        swipe: !0
                    }
                }]
            })
        }),
        $(".slick-home-product").on("afterChange", function(event, slick, currentSlide) {
            ACC.carousel.carouselLazyload(".slick-home-product .slick-active .lazy-background")
        }).slick({
            infinite: !0,
            speed: 300,
            slidesToShow: 6,
            slidesToScroll: 2,
            dots: !1,
            prevArrow: '<button type="button" class="slick-prev"><span class="fa fa-angle-left"></span></button>',
            nextArrow: '<button type="button" class="slick-next"><span class="fa fa-angle-right"></span></button>',
            responsive: [{
                breakpoint: ACC.carousel.breakpoint.med,
                settings: {
                    slidesToShow: 4,
                    slidesToScroll: 2
                }
            }, {
                breakpoint: ACC.carousel.breakpoint.small,
                settings: {
                    slidesToShow: 2,
                    slidesToScroll: 2
                }
            }]
        }),
        $(".slick-blog").on("afterChange", function(event, slick, currentSlide) {
            ACC.carousel.carouselLazyload(".slick-blog .slick-active .lazy-background")
        }).slick({
            infinite: !0,
            slidesToShow: 3,
            slidesToScroll: 3,
            arrows: !1,
            responsive: [{
                breakpoint: ACC.carousel.breakpoint.small,
                settings: {
                    centerMode: !0,
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    arrows: !0,
                    prevArrow: '<button type="button" class="slick-prev"><span class="fa fa-chevron-left"></span></button>',
                    nextArrow: '<button type="button" class="slick-next"><span class="fa fa-chevron-right"></span></button>'
                }
            }]
        }),
        $(".js-slick-text-med").on("afterChange", function(event, slick, currentSlide) {
            ACC.carousel.carouselLazyload(".js-slick-text-med .slick-active .lazy-background")
        }).slick({
            infinite: !0,
            slidesToShow: 4,
            slidesToScroll: 4,
            arrows: !1,
            responsive: [{
                breakpoint: ACC.carousel.breakpoint.small,
                settings: {
                    centerMode: !1,
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    dots: !0
                }
            }]
        }),
        $(".js-slick-text-small").on("afterChange", function(event, slick, currentSlide) {
            ACC.carousel.carouselLazyload(".js-slick-text-small .slick-active .lazy-background")
        }).slick({
            infinite: !0,
            slidesToShow: 6,
            slidesToScroll: 6,
            arrows: !0,
            prevArrow: '<button type="button" class="slick-prev"><span class="fa fa-chevron-left"></span></button>',
            nextArrow: '<button type="button" class="slick-next"><span class="fa fa-chevron-right"></span></button>',
            responsive: [{
                breakpoint: ACC.carousel.breakpoint.small,
                settings: {
                    centerMode: !1,
                    slidesToShow: 2,
                    slidesToScroll: 2,
                    arrows: !0
                }
            }]
        })
    },
    carouselLazyload: function(target) {
        $(target).each(function() {
            var imgUrl = $(this).data("src");
            $(this).css({
                "background-image": "url(" + imgUrl + ")"
            }).removeClass("lazy-background")
        })
    },
    carouselButtonSize: function() {
        var windowWidth = $(window).width()
          , linkWidth = parseInt((windowWidth - 62) / 2);
        $(".item__button__link a").css({
            "--link-width": linkWidth
        })
    },
    checkDots: function() {}
},
ACC.cart = {
    _autoload: ["bindHelp", "cartRestoration", "bindCartPage", "bindMultiDEntryRemoval", "bindMultidCartProduct", "bindCartUpdate", ["bindApplyVoucher", 0 != $("#js-voucher-apply-btn").length], ["bindAddToCartPopup", 0 != $(".overlay-add-to-cart-button").length], ["bindToReleaseVoucher", 0 != $("#js-applied-vouchers").length], ["setUpCarousel", 0 != $(".slick-product-reference").length]],
    bindHelp: function() {
        $(document).on("click", ".js-cart-help", function(e) {
            e.preventDefault();
            var title = $(this).data("help");
            ACC.colorbox.open(title, {
                html: $(".js-help-popup-content").html(),
                width: "300px"
            })
        })
    },
    bindCartUpdate: function() {
        $(".cart__wrapper__products").on("click", ".quantity-counter.increase", function() {
            ACC.cart.updateCartEntry($(this).data("no"), $(this).data("quantity") + 1)
        }),
        $(".cart__wrapper__products").on("click", ".quantity-counter.decrease", function() {
            ACC.cart.updateCartEntry($(this).data("no"), $(this).data("quantity") - 1)
        })
    },
    updateCartEntry: function(entryNr, quantity) {
        $.getJSON(ACC.config.contextPath + "/cart/update", {
            entryNumber: entryNr,
            quantity: quantity
        }, function(data) {
            null != data.errorMessage ? ACC.overlayDrm.toastError(data.errorMessage) : (ACC.cart.updateProductReferences(),
            ACC.cart.updateCart())
        })
    },
    updateProductReferences: function(entryNr, quantity) {
        0 != $(".js-product-reference").length && $.getJSON(ACC.config.contextPath + "/cart/references", {
            component: $(".js-product-reference").data("component")
        }, function(data) {
            if ($(".js-product-reference").html(""),
            null == data.productReferences)
                $(".js-you-might-also-like").hide();
            else {
                $(".js-you-might-also-like").show();
                var sourceList = $("#product-reference-template").html()
                  , templateList = Handlebars.compile(sourceList);
                $(".js-product-reference").append(templateList(data)),
                ACC.cart.setUpCarousel()
            }
        })
    },
    updateCart: function() {
        0 != $(".js-cart-items").length && $.getJSON(ACC.config.contextPath + "/cart/cart-json", {}, function(data) {
            if ($(".js-cart-items").html(""),
            null == data)
                ;
            else {
                ACC.cart.reRenderCartDetails(data);
                var $deliveryCountrySelect = $("#deliveryCountry");
                0 < $deliveryCountrySelect.length && ACC.cart.changeDeliveryCountry($deliveryCountrySelect)
            }
        })
    },
    reRenderCartDetails: function(data) {
        null != data.redirectUrl && (window.location = data.redirectUrl);
        var source = $("#cartpage-entries-template").html()
          , template = Handlebars.compile(source);
        $(".js-cart-items").html(template(data));
        source = $("#cartpage-sidebar-template").html(),
        template = Handlebars.compile(source);
        $(".js-cartpage-total").html(template(data))
    },
    cartRestoration: function() {
        $(".cartRestoration").click(function() {
            var sCartUrl = $(this).data("cartUrl");
            window.location = sCartUrl
        })
    },
    changeDeliveryMode: function($this) {
        var $deliveryCountrySelect = $("#deliveryCountry")
          , countryIso = "";
        if (0 < $(".country-wrapper").length) {
            var countryName = $(".country-radio-btn:checked").data("label");
            $("#countrySelected").empty(),
            $("#countrySelected").append(countryName),
            countryIso = $(".country-radio-btn:checked").val()
        } else
            countryIso = $deliveryCountrySelect.val();
        var param = {
            countryIso: countryIso,
            deliveryMode: $this.val()
        };
        $.post(ACC.config.sitePath + "/cart/checkout/set-delivery-methods", param, function(data) {
            ACC.cart.initTotalPrice(data),
            ACC.cart.initDeliveryLabel($this, data)
        })
    },
    changeDeliveryCountry: function($this) {
        var countrycode = $this.val();
        if (countrycode && "0" != countrycode) {
            var selectedState = null;
            0 < $(".js-delivery-state-selector").length && (null == (selectedState = $(".js-delivery-state-selector").val()) || "" == selectedState) || ($(".delivery-country-error-text").addClass("hide"),
            $.post(ACC.config.sitePath + "/cart/checkout/get-delivery-methods", {
                countryIso: countrycode,
                regionIso: selectedState
            }, function(data) {
                ACC.cart.initTotalPrice(data),
                ACC.cart.initDeliveryLabel($this, data),
                $(".delivery-wrapper").removeAttr("style"),
                $("#deliveryCountryOptionsContainerList").empty();
                var sourceList = $("#delivery-mode-template-list").html()
                  , templateList = Handlebars.compile(sourceList);
                $("#deliveryCountryOptionsContainerList").append(templateList(data)),
                ACC.cart.changeDeliveryMode($(".delivery-radio-btn:checked")),
                data.selectedDeliveryMode ? $("#deliveryCountryOptions option[value=" + data.selectedDeliveryMode + "]").attr("selected", !0) : $("#deliveryCountryOptions option:first").attr("selected", !0),
                $("#deliveryCountryOptions").change(),
                $(".delivery-mode-label").removeClass("hide")
            }))
        }
    },
    bindCartPage: function() {
        var $deliveryCountrySelect = $("#deliveryCountry");
        $(document).on("click", ".js-show-editable-grid", function(event) {
            ACC.cart.populateAndShowEditableGrid(this, event)
        }),
        $(document).on("click", ".item__remove", function() {
            $.post(ACC.config.sitePath + "/cart/update", {
                entryNumber: $(this).data("entrynumber"),
                quantity: "0"
            }, function(data) {
                ACC.cart.updateCart(),
                ACC.cart.updateProductReferences()
            })
        }),
        0 < $deliveryCountrySelect.length && ($deliveryCountrySelect.change(function() {
            ACC.cart.changeDeliveryCountry($(this))
        }),
        $deliveryCountrySelect.change(),
        $(document).on("change", "#deliveryCountryOptions", function(event) {
            ACC.cart.changeDeliveryMode($(this))
        }),
        $(document).on("change", ".delivery-radio-btn", function(event) {
            ACC.cart.changeDeliveryMode($(this))
        }),
        $(document).on("change", ".js-delivery-state-selector", function(event) {
            ACC.cart.changeDeliveryCountry($deliveryCountrySelect)
        }),
        $(document).on("change", ".country-radio-btn", function(event) {
            ACC.accordion.close(event),
            ACC.cart.changeDeliveryCountry($(this))
        })),
        $(document).on("click", ".js-giftcard-edit", function(e) {
            e.preventDefault(),
            ACC.cart.editGiftCard(e)
        })
    },
    bindMultiDEntryRemoval: function() {
        $(document).on("click", ".js-submit-remove-product-multi-d", function() {
            var itemIndex = $(this).data("index")
              , $form = $("#updateCartForm" + itemIndex)
              , initialCartQuantity = $form.find("input[name=initialQuantity]")
              , cartQuantity = $form.find("input[name=quantity]")
              , productCode = ($form.find("input[name=entryNumber]").val(),
            $form.find("input[name=productCode]").val());
            cartQuantity.val(0),
            initialCartQuantity.val(0),
            ACC.track.trackRemoveFromCart(productCode, initialCartQuantity, cartQuantity.val());
            var method = $form.attr("method") ? $form.attr("method").toUpperCase() : "GET";
            $.ajax({
                url: $form.attr("action"),
                data: $form.serialize(),
                type: method,
                success: function(data) {
                    location.reload()
                },
                error: function() {
                    alert("Failed to remove quantity. Error details [" + xht + ", " + textStatus + ", " + ex + "]")
                }
            })
        })
    },
    populateAndShowEditableGrid: function(element, event) {
        var readOnly = $(element).data("readOnlyMultidGrid")
          , itemIndex = $(element).data("index");
        grid = $("#ajaxGrid" + itemIndex);
        var gridEntries = $("#grid" + itemIndex)
          , arrSubEntries = gridEntries.data("sub-entries").split(",")
          , firstVariantCode = arrSubEntries[0].split(":")[0];
        $(element).toggleClass("open");
        for (var targetUrl = gridEntries.data("target-url"), mapCodeQuantity = new Object, i = 0; i < arrSubEntries.length; i++) {
            var arrValue = arrSubEntries[i].split(":");
            mapCodeQuantity[arrValue[0]] = arrValue[1]
        }
        if (0 < grid.children("#cartOrderGridForm").length)
            grid.slideToggle("slow");
        else {
            $.ajax({
                url: targetUrl,
                data: {
                    productCode: firstVariantCode,
                    readOnly: readOnly
                },
                type: "GET",
                success: function(data) {
                    grid.html(data),
                    $("#ajaxGrid").removeAttr("id");
                    for (var $gridContainer = grid.find(".product-grid-container"), numGrids = $gridContainer.length, i = 0; i < numGrids; i++)
                        ACC.cart.getProductQuantity($gridContainer.eq(i), mapCodeQuantity, i);
                    grid.slideDown("slow"),
                    ACC.cart.coreCartGridTableActions(element, mapCodeQuantity),
                    ACC.productorderform.coreTableScrollActions(grid.children("#cartOrderGridForm"))
                },
                error: function(xht, textStatus, ex) {
                    alert("Failed to get variant matrix. Error details [" + xht + ", " + textStatus + ", " + ex + "]")
                }
            })
        }
    },
    coreCartGridTableActions: function(element, mapCodeQuantity) {
        ACC.productorderform.bindUpdateFutureStockButton(".update_future_stock_button"),
        ACC.productorderform.bindVariantSelect($(".variant-select-btn"), "cartOrderGridForm");
        var itemIndex = $(element).data("index")
          , quantityBefore = 0
          , grid = $("#ajaxGrid" + itemIndex + " .product-grid-container");
        grid.on("focusin", ".sku-quantity", function(event) {
            quantityBefore = jQuery.trim(this.value),
            $(this).parents("tr").next(".variant-summary").remove(),
            $(this).parents("table").data(ACC.productorderform.selectedVariantData) ? ACC.productorderform.selectedVariants = $(this).parents("table").data(ACC.productorderform.selectedVariantData) : ACC.productorderform.selectedVariants = [],
            "" == quantityBefore && (quantityBefore = 0,
            this.value = 0)
        }),
        grid.on("focusout keypress", ".sku-quantity", function(event) {
            var code = event.keyCode || event.which || event.charCode;
            if (13 == code || null == code) {
                var quantityAfter = 0
                  , gridLevelTotalPrice = ""
                  , currentIndex = parseInt($(this).attr("id").match("[0-9]+"));
                this.value = ACC.productorderform.filterSkuEntry(this.value),
                quantityAfter = jQuery.trim(this.value);
                var variantCode = $("input[id='cartEntries[" + currentIndex + "].sku']").val();
                isNaN(jQuery.trim(this.value)) && (this.value = 0),
                "" == quantityAfter && (quantityAfter = 0,
                this.value = 0);
                var $gridTotalValue = grid.find("[data-grid-total-id=total_value_" + currentIndex + "]")
                  , currentPrice = $("input[id='productPrice[" + currentIndex + "]']").val();
                0 < quantityAfter && (gridLevelTotalPrice = ACC.productorderform.formatTotalsCurrency(parseFloat(currentPrice) * parseInt(quantityAfter))),
                $gridTotalValue.html(gridLevelTotalPrice);
                var _this = this
                  , priceSibling = $(this).siblings(".price")
                  , propSibling = $(this).siblings(".variant-prop")
                  , currentSkuId = $(this).next(".td_stock").data("sku-id")
                  , currentBaseTotal = $(this).siblings(".data-grid-total");
                if (this.value != quantityBefore) {
                    var newVariant = !0;
                    ACC.productorderform.selectedVariants.forEach(function(item, index) {
                        item.id === currentSkuId && (newVariant = !1,
                        "0" === _this.value || 0 === _this.value ? ACC.productorderform.selectedVariants.splice(index, 1) : (ACC.productorderform.selectedVariants[index].quantity = _this.value,
                        ACC.productorderform.selectedVariants[index].total = ACC.productorderform.updateVariantTotal(priceSibling, _this.value, currentBaseTotal)))
                    }),
                    newVariant && 0 < this.value && ACC.productorderform.selectedVariants.push({
                        id: currentSkuId,
                        size: propSibling.data("variant-prop"),
                        quantity: _this.value,
                        total: ACC.productorderform.updateVariantTotal(priceSibling, _this.value, currentBaseTotal)
                    })
                }
                if (ACC.productorderform.showSelectedVariant($(this).parents("table")),
                0 < this.value && this.value != quantityBefore ? $(this).parents("table").addClass("selected") : 0 === ACC.productorderform.selectedVariants.length && $(this).parents("table").removeClass("selected").find(".variant-summary").remove(),
                quantityBefore != quantityAfter) {
                    $.ajax({
                        url: ACC.config.encodedContextPath + "/cart/updateMultiD",
                        data: {
                            productCode: variantCode,
                            quantity: quantityAfter,
                            entryNumber: -1
                        },
                        type: "POST",
                        success: function(data, textStatus, xhr) {
                            ACC.cart.refreshCartData(data, -1, quantityAfter, itemIndex),
                            mapCodeQuantity[variantCode] = quantityAfter
                        },
                        error: function(xhr, textStatus, error) {
                            var redirectUrl = xhr.getResponseHeader("redirectUrl")
                              , connection = xhr.getResponseHeader("Connection");
                            null !== redirectUrl ? window.location = redirectUrl : "close" === connection && window.location.reload()
                        }
                    })
                }
            }
        })
    },
    refreshCartData: function(cartData, entryNum, quantity, itemIndex) {
        if (0 == cartData.entries.length)
            location.reload();
        else {
            var form;
            if (-1 == entryNum) {
                for (var productCode = (form = $(".js-qty-form" + itemIndex)).find("input[name=productCode]").val(), entryPrice = (quantity = 0,
                0), i = 0; i < cartData.entries.length; i++) {
                    var entry = cartData.entries[i];
                    if (entry.product.code == productCode) {
                        quantity = entry.quantity,
                        entryPrice = entry.totalPrice,
                        ACC.cart.updateEntryNumbersForCartMenuData(entry);
                        break
                    }
                }
                0 == quantity ? location.reload() : (form.find(".qtyValue").html(quantity),
                form.parent().parent().find(".js-item-total").html(entryPrice.formattedValue))
            }
            ACC.cart.refreshCartPageWithJSONResponse(cartData)
        }
    },
    refreshCartPageWithJSONResponse: function(cartData) {
        ACC.minicart.updateMiniCartDisplay(),
        $(".js-cart-top-totals").html($("#cartTopTotalSectionTemplate").tmpl(cartData)),
        $("div .cartpotproline").remove(),
        $("div .cartproline").remove(),
        $(".js-cart-totals").remove(),
        $("#ajaxCartPotentialPromotionSection").html($("#cartPotentialPromotionSectionTemplate").tmpl(cartData)),
        $("#ajaxCartPromotionSection").html($("#cartPromotionSectionTemplate").tmpl(cartData)),
        $("#ajaxCart").html($("#cartTotalsTemplate").tmpl(cartData)),
        ACC.quote.bindQuoteDiscount()
    },
    updateEntryNumbersForCartMenuData: function(entry) {
        var entryNumbers = "";
        $.each(entry.entries, function(index, subEntry) {
            0 != index && (entryNumbers += ";"),
            entryNumbers += subEntry.entryNumber
        }),
        $(".js-execute-entry-action-button").data("actionEntryNumbers", entryNumbers)
    },
    getProductQuantity: function(gridContainer, mapData, i) {
        var tables = gridContainer.find("table");
        $.each(tables, function(index, currentTable) {
            var skus = jQuery.map($(currentTable).find("input[type='hidden'].sku"), function(o) {
                return o.value
            })
              , quantities = jQuery.map($(currentTable).find("input[type='textbox'].sku-quantity"), function(o) {
                return o
            })
              , selectedVariants = [];
            $.each(skus, function(index, skuId) {
                var quantity = mapData[skuId];
                if (null != quantity) {
                    quantities[index].value = quantity;
                    var currentIndex = parseInt(quantities[index].id.match("[0-9]+"))
                      , gridTotalValue = gridContainer.find("[data-grid-total-id=total_value_" + currentIndex + "]")
                      , gridLevelTotalPrice = ""
                      , currentPrice = $("input[id='productPrice[" + currentIndex + "]']").val();
                    0 < quantity && (gridLevelTotalPrice = ACC.productorderform.formatTotalsCurrency(parseFloat(currentPrice) * parseInt(quantity))),
                    gridTotalValue.html(gridLevelTotalPrice),
                    selectedVariants.push({
                        id: skuId,
                        size: $(quantities[index]).siblings(".variant-prop").data("variant-prop"),
                        quantity: quantity,
                        total: gridLevelTotalPrice
                    })
                }
            }),
            0 != selectedVariants.length && ($.tmpl(ACC.productorderform.$variantSummaryTemplate, {
                variants: selectedVariants
            }).appendTo($(currentTable).addClass("selected")),
            $(currentTable).find(".variant-summary .variant-property").html($(currentTable).find(".variant-detail").data("variant-property")),
            $(currentTable).data(ACC.productorderform.selectedVariantData, selectedVariants))
        })
    },
    bindMultidCartProduct: function() {
        $(document).on("click", ".showQuantityProduct", function(event) {
            ACC.multidgrid.populateAndShowGrid(this, event, !0)
        }),
        $(document).on("click", ".showQuantityProductOverlay", function(event) {
            ACC.multidgrid.populateAndShowGridOverlay(this, event)
        })
    },
    bindApplyVoucher: function() {
        $(".checkout-promo-link").on("click", function(e) {
            e.preventDefault(),
            $(this).toggleClass("hide"),
            $(".checkout-promo-container").toggleClass("hide")
        }),
        $(document).on("click", ".js-voucher-apply-btn", function(e) {
            ACC.cart.handleApplyVoucher(e)
        }),
        $("#js-voucher-code-text").on("keypress", function(e) {
            13 == (e.keyCode ? e.keyCode : e.which) && ACC.cart.handleApplyVoucher(e)
        }),
        $(document).on("submit", ".applyVoucherForm", function(e) {
            e.preventDefault(),
            $.post(ACC.config.encodedContextPath + "/cart/voucher/apply-ajax", $(this).serialize(), function(data) {
                data.success ? ($(".js-voucher-respond").removeClass("has-error"),
                $(".js-voucher-respond").addClass("has-success"),
                $(".js-voucher-validation-container").html(data.message),
                ACC.cart.updateCart()) : ($(".js-voucher-respond").addClass("has-error"),
                $(".js-voucher-respond").removeClass("has-success"),
                $(".js-voucher-validation-container").html(data.message))
            }, "json")
        }),
        $(document).on("submit", ".removeVoucherForm", function(e) {
            e.preventDefault(),
            $.post(ACC.config.encodedContextPath + "/cart/voucher/remove-ajax", $(this).serialize(), function(data) {
                data.success && ACC.cart.updateCart()
            }, "json")
        })
    },
    handleApplyVoucher: function(e) {
        var voucherCode = $.trim($("#js-voucher-code-text").val());
        "" != voucherCode && 0 < voucherCode.length && $("#applyVoucherForm").submit()
    },
    bindToReleaseVoucher: function() {
        $(document).on("click", ".js-release-voucher-remove-btn", function(event) {
            $(this).closest("form").submit()
        })
    },
    bindAddToCartPopup: function() {
        var $upsellOverlay = $("#upsell-add-to-cart-overlay");
        Handlebars.registerHelper("json", function(context) {
            return JSON.stringify(context)
        }),
        $(".js-you-might-also-like").on("click", ".overlay-add-to-cart-button", function(event) {
            var btnId = $(this).attr("id");
            if (ACC.common.loadingStatus("#" + btnId, "loading"),
            $upsellOverlay.removeAttr("data-size"),
            $(this).data("single"))
                ACC.cart.addToCart($(this).data("code"));
            else {
                var productCode = $(this).data("code");
                $(this).data("json") || $.ajax({
                    url: ACC.config.encodedContextPath + "/cart/product-overlay-json",
                    type: "POST",
                    data: {
                        productCode: productCode
                    }
                }).done(function(data) {
                    ACC.common.loadingStatus(".overlay-add-to-cart-button", "done"),
                    $(this).data("json", JSON.stringify(data));
                    var source = $("#add-to-cart-overlay-template").html()
                      , template = Handlebars.compile(source);
                    $upsellOverlay.html(template(JSON.parse($(this).data("json"))));
                    var sourceItem = "#addToCartButton-" + productCode;
                    $upsellOverlay.data("source-item", sourceItem),
                    ACC.overlayDrm.open("#product_reference_overlay")
                })
            }
        }),
        $upsellOverlay.on("click", ".js-size", function(e) {
            e.preventDefault();
            var sizeCode = $(this).data("size");
            $(".js-size").removeClass("selected"),
            $(this).addClass("selected"),
            $upsellOverlay.attr("data-size", sizeCode)
        }),
        $upsellOverlay.on("click", ".popup-colour-select", function() {
            $upsellOverlay.removeAttr("data-size");
            var sizeSelectorHtml = $("#popup-colour-selector").html()
              , source = $("#render-colour-variant").html()
              , template = Handlebars.compile(source);
            $upsellOverlay.html(template($(this).data("json"))),
            $("#popup-colour-selector").html(sizeSelectorHtml)
        }),
        $upsellOverlay.on("click", ".cart-product-add-btn", function() {
            var message = $(this).data("msg-error")
              , toast = $("#toast-wrapper-overlay")
              , selectedSize = $upsellOverlay.data("size");
            null == selectedSize ? (toast.addClass("error-toast-overlay").text(message),
            setTimeout(function() {
                toast.removeClass("error-toast-overlay").text("")
            }, 5e3)) : ACC.cart.addToCart(selectedSize)
        })
    },
    addToCart: function(sizeCode) {
        ACC.common.loadingStatus(".cart-product-add-btn", "loading"),
        $.ajax({
            url: ACC.config.encodedContextPath + "/cart/add",
            type: "POST",
            data: {
                productCodePost: sizeCode
            }
        }).done(function(data) {
            ACC.cart.updateCart(),
            ACC.cart.updateProductReferences(),
            ACC.overlayDrm.close("#product_reference_overlay"),
            ACC.cart.updateCart()
        })
    },
    setUpCarousel: function() {
        $(".slick-product-reference").slick({
            infinite: !0,
            slidesToShow: 3,
            slidesToScroll: 3,
            arrows: !1,
            init: void $(".slick-product-reference").removeClass("slick-loading"),
            responsive: [{
                breakpoint: 480,
                settings: {
                    slidesToShow: 2,
                    slidesToScroll: 2,
                    arrows: !0,
                    prevArrow: '<button type="button" class="slick-prev"><span class="fa fa-play fa-rotate-180"></span></button>',
                    nextArrow: '<button type="button" class="slick-next"><span class="fa fa-play"></span></button>'
                }
            }]
        })
    },
    initTotalPrice: function(data) {
        var source = $("#delivery-mode-cartinfo-template").html()
          , template = Handlebars.compile(source);
        $(".ajax-cart-info").html(template(data))
    },
    initDeliveryLabel: function($this, data) {
        $("#deliveryCountryOptionsContainer").empty(),
        data.name = $this.data("label");
        var sourceMethosSelected = $("#delivery-mode-selected").html()
          , templateMethosSelected = Handlebars.compile(sourceMethosSelected);
        $("#deliveryCountryOptionsContainer").append(templateMethosSelected(data))
    },
    editGiftCard: function(e) {
        var textarea = e.target.hash
          , labelEdit = $(e.target).data("label-edit")
          , labelDone = $(e.target).data("label-done")
          , index = $(e.target).data("index")
          , action = $(e.target).closest(".js-giftcard-edit-area").hasClass("_edit") ? "deactive" : "active"
          , updatedValue = $("#giftcard_message_" + index).val();
        switch (updatedValue = ACC.validation.emojiStrip(updatedValue),
        action) {
        case "active":
            $(e.target).text(labelDone).closest(".js-giftcard-edit-area").addClass("_edit").find(textarea).removeAttr("disabled");
            break;
        case "deactive":
            var toEmail = $("#giftcard_recipient_" + index).val();
            if (ACC.validation.checkEmail(toEmail)) {
                $(e.target).text(labelEdit).closest(".js-giftcard-edit-area").removeClass("_edit").removeClass("has-error").find(textarea).attr("disabled", "disabled");
                var url = ACC.config.encodedContextPath + "/cart/update/giftcard"
                  , postData = {
                    giftcardMessage: updatedValue,
                    sequenceNumber: index,
                    toEmail: toEmail
                };
                $.ajax({
                    url: url,
                    data: postData,
                    type: "POST"
                })
            } else
                $(e.target).closest(".js-giftcard-edit-area").addClass("has-error")
        }
    }
},
ACC.cartitem = {
    _autoload: ["bindCartItem"],
    submitTriggered: !1,
    bindCartItem: function() {
        $(".js-execute-entry-action-button").on("click", function() {
            var entryAction = $(this).data("entryAction")
              , entryActionUrl = $(this).data("entryActionUrl")
              , entryProductCode = $(this).data("entryProductCode")
              , entryInitialQuantity = $(this).data("entryInitialQuantity")
              , actionEntryNumbers = $(this).data("actionEntryNumbers");
            "REMOVE" == entryAction && ACC.track.trackRemoveFromCart(entryProductCode, entryInitialQuantity);
            var cartEntryActionForm = $("#cartEntryActionForm");
            actionEntryNumbers.toString().split(";").forEach(function(entryNumber) {
                var entryNumbersInput = $("<input>").attr("type", "hidden").attr("name", "entryNumbers").val(entryNumber);
                cartEntryActionForm.append($(entryNumbersInput))
            }),
            cartEntryActionForm.attr("action", entryActionUrl).submit()
        }),
        $(".js-update-entry-quantity-input").on("blur", function(e) {
            ACC.cartitem.handleUpdateQuantity(this, e)
        }).on("keyup", function(e) {
            return ACC.cartitem.handleKeyEvent(this, e)
        }).on("keydown", function(e) {
            return ACC.cartitem.handleKeyEvent(this, e)
        })
    },
    handleKeyEvent: function(elementRef, event) {
        return 13 != event.which || ACC.cartitem.submitTriggered ? !ACC.cartitem.submitTriggered : (ACC.cartitem.submitTriggered = ACC.cartitem.handleUpdateQuantity(elementRef, event),
        !1)
    },
    handleUpdateQuantity: function(elementRef, event) {
        var form = $(elementRef).closest("form")
          , productCode = form.find("input[name=productCode]").val()
          , initialCartQuantity = form.find("input[name=initialQuantity]").val()
          , newCartQuantity = form.find("input[name=quantity]").val();
        return initialCartQuantity != newCartQuantity && (ACC.track.trackUpdateCart(productCode, initialCartQuantity, newCartQuantity),
        form.submit(),
        !0)
    }
},
$(document).ready(function() {
    $(".js-entry-comment-button").click(function(event) {
        event.preventDefault();
        var linkID = $(this).attr("href");
        $(linkID).toggleClass("in"),
        $(thisDetailGroup).removeClass("open")
    })
}),
$(document).ready(function() {
    var $VariantItem = $(".product__list__item__item-variant__single.abled");
    function updateProductInformation(action, $selectedProduct, selectedProductJson, hoveredProductJson, fieldName, fieldClass) {
        var $field = $(fieldClass, $selectedProduct);
        "on" === action ? $field.text(hoveredProductJson[fieldName]) : $field.text(selectedProductJson[fieldName])
    }
    $(".product__list__item__thumb").mouseenter(function() {
        var $this = $(this)
          , $productImg = $this.find(".product__list__item__product-img")
          , altImgUrl = $this.attr("data-alternate-img");
        "" != altImgUrl && $productImg.attr("style", "background-image: url(" + altImgUrl + ")")
    }).mouseleave(function() {
        var $productImg = $(this).find(".product__list__item__product-img")
          , origImgUrl = $productImg.attr("data-src");
        "" != origImgUrl && $productImg.attr("style", "background-image: url(" + origImgUrl + ")")
    }),
    $VariantItem.on("click", function(e) {
        $(".product__list__item.product-item-" + $(this).data("id"));
        window.location = $(this).data("url")
    }),
    $VariantItem.on("mouseenter", function(e) {
        !function(item, action) {
            var $selectedProduct = $(".product__list__item.product-item-" + $(item.target).data("id"))
              , selectedProductJson = $selectedProduct.data("json")
              , hoveredProductJson = $(item.target).data("json")
              , fieldName = "thumbnailImgUrl"
              , $field = $(".product__list__item__product-img", $selectedProduct)
              , showHoveredProduct = "on" === action;
            showHoveredProduct ? ($field.attr("style", "background-image: url(" + hoveredProductJson[fieldName] + ")"),
            $field.attr("data-src", hoveredProductJson[fieldName]),
            $field.parent().attr("data-alternate-img", hoveredProductJson.alternateThumbnailImgUrl)) : ($field.attr("style", "background-image: url(" + selectedProductJson[fieldName] + ")"),
            $field.attr("data-src", selectedProductJson[fieldName]),
            $field.parent().attr("data-alternate-img", selectedProductJson.alternateThumbnailImgUrl));
            updateProductInformation(action, $selectedProduct, selectedProductJson, hoveredProductJson, "miniDescription", ".product__list__item__description"),
            updateProductInformation(action, $selectedProduct, selectedProductJson, hoveredProductJson, "name", ".product__list__item__name");
            var labelText, labelStyle, showLabel = !0;
            labelStyle = showHoveredProduct ? (showLabel = null != hoveredProductJson.labelText,
            labelText = hoveredProductJson.labelText,
            hoveredProductJson.labelHex) : (showLabel = null != selectedProductJson.labelText,
            labelText = selectedProductJson.labelText,
            selectedProductJson.labelHex);
            showLabel ? ($(".product-label", $selectedProduct).attr("class", "product-label label-" + labelStyle),
            $(".product-label", $selectedProduct).text(labelText),
            $(".product__list__item__line-label", $selectedProduct).show()) : $(".product__list__item__line-label", $selectedProduct).hide();
            showHoveredProduct ? $("a.product__list__item__thumb", $selectedProduct).attr("href", ACC.config.sitePath + hoveredProductJson.url) : $("a.product__list__item__thumb", $selectedProduct).attr("href", ACC.config.sitePath + selectedProductJson.url);
            var wasPricePresent = !0;
            wasPricePresent = showHoveredProduct ? null != hoveredProductJson.formattedWasPrice : null != selectedProductJson.formattedWasPrice;
            wasPricePresent ? ($(".was-price-not-present", $selectedProduct).addClass("hide"),
            $(".was-price-present", $selectedProduct).removeClass("hide")) : ($(".was-price-present", $selectedProduct).addClass("hide"),
            $(".was-price-not-present", $selectedProduct).removeClass("hide"));
            $(".formattedPrice", $selectedProduct).hide(),
            $(".formattedWasPrice", $selectedProduct).hide(),
            updateProductInformation(action, $selectedProduct, selectedProductJson, hoveredProductJson, "formattedPrice", ".current-price"),
            updateProductInformation(action, $selectedProduct, selectedProductJson, hoveredProductJson, "formattedWasPrice", ".original-price")
        }(e, "on")
    }),
    $("#facet-reset").on("click", function() {
        urlParam("text") ? window.location.href = location.protocol + "//" + location.host + location.pathname + "?text=" + urlParam("text") : window.location.href = location.protocol + "//" + location.host + location.pathname
    })
}),
ACC.checkoutaddress = {
    _autoload: ["bindAll", "bindCartFunctions", ["bindForm", 0 != $(".checkout-address-next").length], ["checkoutSidebar", 2 <= $(".checkout-product-sidebar-block").length]],
    storeListData: [],
    collectMethod: "",
    enableScrollError: !0,
    ignoreValidation: !1,
    bindForm: function() {
        var $nextButton = $(".checkout-address-next")
          , $shippingSection = $(".shipping-address-section-control")
          , $billingSection = $(".billing-address-section-control")
          , $globalErrorMessage = $("#global-error-message");
        $nextButton.click(function() {
            var data = {};
            ACC.checkoutaddress.filledColletName(),
            $.each($("#billingAddressForm").serializeArray(), function() {
                "phone" == this.name ? data["billing_" + this.name] = $("#billingAddressForm .phone").intlTelInput("getNumber") : data["billing_" + this.name] = this.value
            }),
            $.each($("#shippingAddressForm").serializeArray(), function() {
                "phone" == this.name ? data["shipping_" + this.name] = $("#shippingAddressForm .phone").intlTelInput("getNumber") : data["shipping_" + this.name] = this.value
            }),
            $.each($(".input-to-submit").serializeArray(), function() {
                data[this.name] = this.value
            }),
            data.CSRFToken = ACC.config.CSRFToken,
            data.ignoreValidation = ACC.checkoutaddress.ignoreValidation,
            ACC.common.loadingStatus(".checkout-address-next", "loading");
            return $("#guest-user-form").removeClass("form-error"),
            $("#guest-user-form .fieldErrorMessageClassTxt").remove(),
            $.post(ACC.config.sitePath + "/checkout/address/save-address", data, function(data) {
                if ($globalErrorMessage.empty(),
                $(".field-error-message").removeClass("field-error-message"),
                "OK" == data.status)
                    window.location.href = $nextButton.data("next");
                else {
                    ACC.common.loadingStatus(".checkout-address-next", "done");
                    var errorMessageData = void 0;
                    if (null != data.global_error_messages ? errorMessageData = data : null != data.billing.global_error_messages ? errorMessageData = data.billing : null != data.shipping.global_error_messages && (errorMessageData = data.shipping),
                    null != errorMessageData) {
                        var source = $("#global-error-message-template").html()
                          , template = Handlebars.compile(source);
                        $globalErrorMessage.html(template(errorMessageData)),
                        $globalErrorMessage.show()
                    }
                    "NOK" == data.shipping.status && ACC.checkoutaddress.renderErrorMessage(data.shipping.field_error_messages, $shippingSection),
                    "NOK" == data.billing.status && ACC.checkoutaddress.renderErrorMessage(data.billing.field_error_messages, $billingSection),
                    1 == data.showSuggestion && ACC.checkoutaddress.suggestAddress(data),
                    null != data.field_error_messages && ACC.checkoutaddress.renderErrorMessage(data.field_error_messages, $(".address-step"))
                }
            }),
            !1
        })
    },
    bindCartFunctions: function() {
        $(".checkout-product-sidebar-block").on("click", ".quantity-counter.increase", function() {
            ACC.checkoutaddress.changeQuantity($(this).data("no"), $(this).data("quantity") + 1)
        }),
        $(".checkout-product-sidebar-block").on("click", ".quantity-counter.decrease", function() {
            ACC.checkoutaddress.changeQuantity($(this).data("no"), $(this).data("quantity") - 1)
        }),
        $(".checkout-container").on("change", ".delivery-radio-btn", function() {
            var param = {
                countryIso: ACC.checkoutaddress.getSelectedCountry(),
                deliveryMode: $(this).val()
            };
            $.post(ACC.config.sitePath + "/cart/checkout/set-delivery-methods-full", param, function(data) {
                ACC.checkoutaddress.reRenderCartDetails(data)
            })
        })
    },
    reRenderCartDetails: function(data) {
        null != data.redirectUrl && (window.location = data.redirectUrl);
        var source = $("#cart-details-template").html()
          , template = Handlebars.compile(source);
        $("#checkout-product-sidebar").find(".checkout-order-summary").html(template(data)),
        $(".product-sidebar-mobile").find(".checkout-order-summary").html(template(data))
    },
    changeQuantity: function(entryNr, quantity) {
        $.getJSON(ACC.config.contextPath + "/cart/update", {
            entryNumber: entryNr,
            quantity: quantity
        }, function(data) {
            null != data.errorMessage && (data.entries[entryNr].error = !0),
            ACC.checkoutaddress.reRenderCartDetails(data)
        })
    },
    renderErrorMessage: function(errorMap, $sectionSelector) {
        $sectionSelector.find(".form-group.form-error").each(function() {
            var $thisError = $(this);
            $thisError.removeClass("form-error"),
            $thisError.find(".field-error-message").removeClass("field-error-message"),
            $thisError.find(".fieldErrorMessageClassTxt").remove()
        }),
        $.map(errorMap, function(value, key) {
            var $field = $("[name=" + key + "]", $sectionSelector);
            $field.closest(".form-group").hasClass("form-error") || ($field.closest(".form-group").addClass("form-error"),
            $field.addClass("field-error-message"),
            $field.is(":radio") ? $field.parent().parent().append('<span class="fieldErrorMessageClassTxt">' + value + "</span>") : $field.after('<span class="fieldErrorMessageClassTxt">' + value + "</span>"),
            $field.data("error-msg", value))
        }),
        1 == ACC.checkoutaddress.enableScrollError && $("html, body").animate({
            scrollTop: $(".form-group.form-error").offset().top - 100
        }, 1e3)
    },
    bindAll: function() {
        var $secondAddressSection, $shippingSameAsBillingChk = $("#shipping-same-as-billing"), $addressSectionLink = ($("#saveAddressInMyAddressBook"),
        $(".address-section-link"));
        $secondAddressSection = "true" == ACC.checkoutaddress.billingBeforeShipping ? $(".shipping-address-section-control") : $(".billing-address-section-control"),
        $shippingSameAsBillingChk.change(function() {
            this.checked ? $secondAddressSection.attr("style", "display:none !important") : ($secondAddressSection.show(),
            $("#billingCountry").val($("#shippingCountry").val()).change(),
            0 == $("input[name=shippingAddressId]:checked").length && 0 < $("input[name=shippingAddressId]").length && $("input[name=shippingAddressId]:first").click())
        }),
        $shippingSameAsBillingChk.is(":checked") && $secondAddressSection.attr("style", "display:none !important"),
        $addressSectionLink.click(function() {
            return ACC.checkoutaddress.changeSection($(this)),
            ACC.checkoutaddress.reloadDeliveryModes(),
            !1
        }),
        $("#shippingCountry").change(function() {
            ACC.checkoutaddress.reloadDeliveryModes()
        }),
        $("input[name=shipping-method-mode]").change(function() {
            ACC.checkoutaddress.reloadDeliveryModes()
        }),
        $("#billingCountry").change(function() {
            $shippingSameAsBillingChk.is(":checked") && "true" == ACC.checkoutaddress.billingBeforeShipping && ACC.checkoutaddress.reloadDeliveryModes()
        }),
        $("#billingState").change(function() {
            $shippingSameAsBillingChk.is(":checked") && "true" == ACC.checkoutaddress.billingBeforeShipping && ACC.checkoutaddress.reloadDeliveryModes()
        }),
        $("input[name=billingAddressId]").change(function() {
            $shippingSameAsBillingChk.is(":checked") && "true" == ACC.checkoutaddress.billingBeforeShipping && ACC.checkoutaddress.reloadDeliveryModes()
        }),
        $(".shipping-address-section").on("change", ".region-selector", function() {
            ACC.checkoutaddress.reloadDeliveryModes(ACC.checkoutaddress.getSelectedCountry(), $(this).val())
        }),
        $("input[name=shippingAddressId]").change(function() {
            ACC.checkoutaddress.reloadDeliveryModes()
        }),
        ["shipping", "billing", "account"].map(function(postcodeType) {
            var $parentSelector = $("#add-" + postcodeType + "-address");
            $parentSelector.on("click", ".postcodeSearch", function() {
                ACC.checkoutaddress.doPostcodeSearch($parentSelector)
            }),
            $parentSelector.on("change", ".address-selector", function() {
                ACC.checkoutaddress.selectAddress($(this), $parentSelector)
            })
        }),
        $(document).ready(function() {
            $(".checkout-guest-register").on("click", function() {
                $(this).parent().toggleClass("hidden"),
                $(".checkout__new-account__form").slideToggle()
            })
        }),
        $("#shipping-method-store").is(":checked") && (ACC.checkoutaddress.collectMethod = "instore",
        ACC.checkoutaddress.manageMethod()),
        $(".checkout-container").on("change", ".js-shipping-method-btn", function() {
            var method = $(this).val();
            ACC.checkoutaddress.collectMethod = "collect-in-store" == method ? "instore" : "myhome",
            ACC.checkoutaddress.manageMethod()
        }),
        null != $(".new-shipping-address-form").data("selectedState") && null == $(".region-selector", ".new-shipping-address-form").val() && ($(".region-selector", ".new-shipping-address-form").val($(".new-shipping-address-form").data("selectedState")),
        $(".region-selector", ".new-shipping-address-form").change()),
        ACC.checkoutaddress.reloadDeliveryModes(),
        ACC.checkoutaddress.suggestAddressBtnsBind()
    },
    checkoutSidebar: function() {
        var $checkoutRover = $("#checkout-product-sidebar .checkout-product-sidebar-block");
        $(window).bind("load", function() {
            ACC.os.isMobile() ? $("#product-sidebar-mobile-toggle").on("click", function() {
                0 === $(".reveal-modal-bg").length && $("body").append('<div class="reveal-modal-bg"></div>'),
                $(".product-sidebar-mobile-cart").slideToggle(),
                $("#product-sidebar-mobile-toggle span").toggleClass("hide"),
                $(".reveal-modal-bg").toggle(),
                $(".product-sidebar-mobile").toggleClass("_active")
            }) : ($checkoutRover.affix({
                offset: {
                    top: $(".checkout-headline").offset().top
                }
            }),
            $(window).scroll(function() {
                var targetClass = 0 < $(".affix").length ? ".affix" : ".affix-top"
                  , deltaSideBar = $(".checkout-product-sidebar-block" + targetClass).height() + $(".checkout-product-sidebar-block" + targetClass).position().top;
                $(".footer__top").offset().top - $(window).scrollTop() < deltaSideBar && $checkoutRover.removeClass("affix").addClass("affix-top")
            }))
        })
    },
    changeSection: function($checkbox) {
        var showContainer = $checkbox.data("show")
          , showLink = $checkbox.data("link")
          , hideContainer = $checkbox.data("hide")
          , targetField = $checkbox.data("target")
          , targetFieldValue = $checkbox.data("target-value");
        $(showContainer).show(),
        $(showLink).show(),
        $(hideContainer).hide(),
        $(targetField).val(targetFieldValue),
        $checkbox.hide()
    },
    getSelectedCountry: function() {
        var shippingCountry = ""
          , $shippingSameAsBillingChk = $("#shipping-same-as-billing");
        return "true" == ACC.checkoutaddress.billingBeforeShipping && $shippingSameAsBillingChk.is(":checked") ? "new" == $("#billingAddressType").val() ? shippingCountry = $("#billingCountry").val() : null != $("input[name=billingAddressId]:checked") && (shippingCountry = $("input[name=billingAddressId]:checked").data("country")) : "new" == $("#shippingAddressType").val() ? shippingCountry = $("#shippingCountry").val() : $("input[name=shippingAddressId]:checked") && (shippingCountry = $("input[name=shippingAddressId]:checked").data("country")),
        shippingCountry
    },
    getSelectedState: function() {
        var shippingState = "";
        return "true" == ACC.checkoutaddress.billingBeforeShipping ? $shippingSameAsBillingChk.is(":checked") ? "new" == $("#billingAddressType").val() && $("#billingState") ? shippingState = $("#billingState").val() : null != $("input[name=billingAddressId]:checked") && (shippingState = $("input[name=billingAddressId]:checked").data("state")) : "new" == $("#shippingAddressType").val() && $("#shippingState") ? shippingState = $("#shippingState").val() : $("input[name=shippingAddressId]:checked") && (shippingState = $("input[name=shippingAddressId]:checked").data("state")) : "new" == $("#shippingAddressType").val() && $(".add-shipping-address .region-selector") ? shippingState = $(".region-selector").val() : $("input[name=shippingAddressId]:checked") && (shippingState = $("input[name=shippingAddressId]:checked").data("state")),
        shippingState || ""
    },
    reloadDeliveryModes: function(countryiso, regioniso) {
        null == countryiso && (countryiso = ACC.checkoutaddress.getSelectedCountry()),
        null == regioniso && (regioniso = ACC.checkoutaddress.getSelectedState());
        var clickAndCollect = !1;
        0 < $("#shipping-method-store").length && (clickAndCollect = $("#shipping-method-store").is(":checked")),
        null != countryiso && void 0 !== countryiso && "" != countryiso && $.post(ACC.config.sitePath + "/cart/checkout/get-delivery-methods", {
            countryIso: countryiso,
            regionIso: regioniso,
            clickAndCollect: clickAndCollect
        }, function(data) {
            $(".delivery-container-list").empty(),
            $(".delivery-country-row").removeClass("has-error");
            var source = $("#delivery-mode-template").html()
              , template = Handlebars.compile(source);
            $(".delivery-container-list").append(template(data)),
            data.selectedDeliveryMode ? $("input[name=deliveryMode][value=" + data.selectedDeliveryMode + "]").prop("checked", !0) : $("input[name=deliveryMode]:first").click()
        })
    },
    validateAddress: function(clickEvent, clickButton) {
        return clickEvent.preventDefault(),
        $.ajax({
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            async: !0,
            url: ACC.checkout.checkoutUrl + "/validateAddress",
            data: '{"firstName": "' + $("#shipping-firstName").val() + '", "lastName": "' + $("#shipping-lastName").val() + '", "line1": "' + $("#shipping-addressLine1").val() + '", "line2": "' + $("#shipping-addressLine2").val() + '", "townCity": "' + $("#shipping-city").val() + '", "regionIso": "' + $("#state-shipping").val() + '", "postcode": "' + $("#shipping-postCode").val() + '", "countryIso": "' + $("#country-shipping").val() + '"}',
            success: ACC.checkout.payment.isFreeOrder,
            error: function(xhr) {
                jQuery.parseJSON(xhr.responseText);
                ACC.checkout.smoothScroll($("#step2")),
                ACC.checkout.validAddress = !1,
                ACC.checkout.showPaymentContainer(!1)
            }
        })
    },
    getIEDocumentOffset: function(obj) {
        var ol = ot = 0;
        if (obj.offsetParent)
            for (; ol += obj.offsetLeft,
            ot += obj.offsetTop,
            obj = obj.offsetParent; )
                ;
        return {
            left: ol,
            top: ot
        }
    },
    smoothScroll: function(target) {
        var offsetTop = 0;
        switch (!0) {
        case /MSIE (\d+\.\d+);/.test(navigator.userAgent):
        case /Trident.*rv:([0-9]{1,}[\.0-9]{0,})/.test(navigator.userAgent):
            offsetTop = ACC.checkout.getIEDocumentOffset(target).top;
            break;
        default:
            offsetTop = $(target).offset().top
        }
        offsetTop = 20 < offsetTop ? offsetTop - 20 : offsetTop,
        $("html,body").animate({
            scrollTop: offsetTop
        }, 1e3)
    },
    doPostcodeSearch: function($parentSelector) {
        var searchTerm = $(".postcodeField", $parentSelector).val();
        ACC.common.loadingStatus(".postcodeSearch", "loading"),
        $.getJSON(ACC.config.postcodeLookupUrl, {
            Key: ACC.config.postcodeLookupKey,
            SearchTerm: searchTerm,
            PreferredLanguage: ACC.config.postcodeLookupLanguage
        }, function(data) {
            if (1 == data.Items.length && void 0 !== data.Items[0].Error) {
                var message = $(".postcodeSearch", $parentSelector).data("noresult");
                ACC.overlayDrm.toastError(message)
            } else if (0 == data.Items.length) {
                message = $(".postcodeSearch", $parentSelector).data("error");
                ACC.overlayDrm.toastError(message)
            } else {
                var $selector = $(".address-selector", $parentSelector);
                $selector.show(),
                $selector.find(" option:gt(0)").remove();
                for (var i = 0; i < data.Items.length; i++) {
                    var addressString = data.Items[i].StreetAddress + "," + data.Items[i].Place;
                    $("<option/>").data("addressId", data.Items[i].Id).html(addressString).appendTo($selector)
                }
                $selector.prop({
                    selectedIndex: 0
                }).show()
            }
            ACC.common.loadingStatus(".postcodeSearch", "done")
        })
    },
    selectAddress: function($select, $parentSelector) {
        var addressId = $select.find("option:selected").data("addressId");
        $.getJSON("https://services.postcodeanywhere.co.uk/PostcodeAnywhere/Interactive/RetrieveById/v1.30/json3.ws?callback=?", {
            Key: ACC.config.postcodeLookupKey,
            Id: addressId,
            PreferredLanguage: ACC.config.postcodeLookupLanguage
        }, function(data) {
            if (1 == data.Items.length && void 0 !== data.Items[0].Error)
                alert($(".postcodeSearch", $parentSelector).data("error"));
            else if (0 == data.Items.length)
                alert($(".postcodeSearch", $parentSelector).data("noresult"));
            else {
                var a = data.Items[0];
                a.Company ? a.Line2 ? ($(".line1", $parentSelector).val(a.Company),
                $(".line2", $parentSelector).val(a.Line1 + " " + a.Line2)) : ($(".line1", $parentSelector).val(a.Company),
                $(".line2", $parentSelector).val(a.Line1)) : ($(".line1", $parentSelector).val(a.Line1),
                $(".line2", $parentSelector).val(a.Line2)),
                $(".townCity", $parentSelector).val(a.PostTown),
                $(".postcode", $parentSelector).val(a.Postcode)
            }
            $select.hide()
        })
    },
    manageMethod: function() {
        var $secondAddressSection, $shippingSameAsBillingChk = $("#shipping-same-as-billing"), $billingCheckbox = $(".billing-checkbox"), $collectInStore = $("#collect-in-store");
        $secondAddressSection = "true" == ACC.checkoutaddress.billingBeforeShipping ? $(".shipping-address-section-control") : $(".billing-address-section-control"),
        "instore" == ACC.checkoutaddress.collectMethod ? ($collectInStore.removeClass("hidden"),
        $shippingSameAsBillingChk.prop("checked", !1),
        $billingCheckbox.addClass("hidden"),
        $("#shippingAddressForm").addClass("hidden"),
        $secondAddressSection.show(),
        $("#billingCountry").val($("#shippingCountry").val()).change(),
        0 == $("input[name=shippingAddressId]:checked").length && 0 < $("input[name=shippingAddressId]").length && $("input[name=shippingAddressId]:first").click(),
        $(".selectpicker-store").selectpicker({
            style: "select-dm",
            width: "100%",
            mobile: !1,
            template: {
                caret: '<i class="fa fa-angle-down fa-2x select-dm__arrow" aria-hidden="true"></i>'
            }
        }),
        ACC.checkoutaddress.getStoreCountry()) : "myhome" == ACC.checkoutaddress.collectMethod && ($collectInStore.addClass("hidden"),
        $billingCheckbox.removeClass("hidden"),
        $shippingSameAsBillingChk.prop("checked", !0),
        $("#shippingAddressForm").removeClass("hidden"),
        $secondAddressSection.attr("style", "display:none !important")),
        $("#collect-store-list").on("changed.bs.select", function(e, clickedIndex, isSelected, previousValue) {
            $(".bootstrap-select").removeClass("open"),
            ACC.checkoutaddress.filletStoreInfo(clickedIndex - 1)
        })
    },
    getStoreCountry: function() {
        var id = $("#collect-country-list select").val();
        $("#collect-country-list").on("rendered.bs.select", function(e, clickedIndex, isSelected, previousValue) {
            $(".bootstrap-select").removeClass("open")
        }),
        ACC.checkoutaddress.getStoreList(id)
    },
    getStoreList: function(id) {
        ACC.checkoutaddress.storeListData = [];
        var storeId = $("#collect-store-detail").data("storeid")
          , url = ACC.config.encodedContextPath + "/store-finder/get-click-and-store?countryIso=" + id;
        return $.ajax({
            type: "GET",
            dataType: "json",
            contentType: "application/json",
            async: !0,
            url: url,
            success: function(response) {
                $.each(response, function(e, item) {
                    ACC.checkoutaddress.storeListData.push(item)
                }),
                ACC.checkoutaddress.createStoreSelect(),
                storeId && ACC.checkoutaddress.filletStoreInfo(storeId, "prepopulate"),
                $("#collect-store-list").removeClass("hidden")
            },
            error: function(xhr) {
                console.log("error:", xhr)
            }
        })
    },
    createStoreSelect: function() {
        var label = $("#collect-store-list").data("label")
          , htmlSelect = "";
        $("#collect-store-list select").find("option").remove(),
        $("#collect-store-detail").html(htmlSelect),
        htmlSelect += "<option>" + label + "</option>",
        $.each(ACC.checkoutaddress.storeListData, function(e, item) {
            htmlSelect += "<option>" + item.address.town + " - " + item.displayName + " " + item.address.line1 + " " + item.address.postalCode + "</option>"
        }),
        $("#collect-store-list select").append(htmlSelect).selectpicker("refresh")
    },
    filletStoreInfo: function(id, action) {
        var content = "";
        if ($("#collect-store-detail").html(),
        $("#collect-store-list .bootstrap-select").removeClass("field-error-message"),
        $("#collect-store-list .fieldErrorMessageClassTxt").remove(),
        "prepopulate" === action)
            storeData = (storeData = jQuery.grep(ACC.checkoutaddress.storeListData, function(n) {
                return n.storeId === id
            }))[0];
        else
            var storeData = ACC.checkoutaddress.storeListData[id];
        content = '<div class="collect-in-store__detail">',
        content += "<strong>" + storeData.displayName + "</strong>",
        content += "<br>" + storeData.address.line1,
        content += "<br>" + storeData.address.postalCode,
        content += "<br>" + storeData.address.town,
        content += "<br>" + storeData.address.phone,
        content += '<input name="deliveryStoreId" type="hidden" class="input-to-submit" value="' + storeData.name + '" />',
        content += "</div>",
        $("#collect-store-detail").html(content)
    },
    filledColletName: function() {
        var storeList = "#collect-store-list"
          , label = $("#collect-store-list").data("label");
        if ("instore" == ACC.checkoutaddress.collectMethod) {
            var firstName = $("#billingAddressForm input[name=firstName]").val()
              , lastName = $("#billingAddressForm input[name=lastName]").val();
            if ($(storeList + " .bootstrap-select").removeClass("field-error-message"),
            $(storeList + " .fieldErrorMessageClassTxt").remove(),
            $("#shippingAddressForm input[name=firstName]").val(firstName),
            $("#shippingAddressForm input[name=lastName]").val(lastName),
            0 == $(".collect-in-store__detail").length)
                return ACC.checkoutaddress.enableScrollError = !1,
                setTimeout(function() {
                    $(storeList + " .bootstrap-select").addClass("field-error-message"),
                    $(storeList).append('<span class="fieldErrorMessageClassTxt">' + label + "</span>"),
                    $("html, body").animate({
                        scrollTop: $(storeList).offset().top - 100
                    }, 1e3)
                }, 30),
                !1;
            ACC.checkoutaddress.enableScrollError = !0
        }
    },
    suggestAddress: function(data) {
        if (0 == ACC.checkoutaddress.ignoreValidation) {
            var current = "#suggested-address-current"
              , source = $("#suggested-address-template").html()
              , template = Handlebars.compile(source);
            $(current).html(""),
            ACC.overlayDrm.open("#suggested_address_overlay"),
            null == data.suggestedAddresses ? ($(".suggested-address__title-error").removeClass("hidden"),
            $(".suggested-address__title").addClass("hidden"),
            $(".suggested-address__list").addClass("hidden"),
            $("#suggested-address-btn-suggest").addClass("hidden")) : ($(".suggested-address__title-error").addClass("hidden"),
            $(".suggested-address__title").removeClass("hidden"),
            $(".suggested-address__list").removeClass("hidden"),
            $("#suggested-address-btn-suggest").removeClass("hidden"),
            $("#suggested-address-list").html(template(data))),
            $(current).html(data.originalShippingAddress.line1 + " " + data.originalShippingAddress.line2 + " <br/> " + data.originalShippingAddress.town + ", " + data.originalShippingAddress.region.isocodeShort + " " + data.originalShippingAddress.postalCode)
        }
    },
    suggestAddressBtnsBind: function() {
        function disableBtn() {
            $(".suggested-address__btn a").addClass("disabled")
        }
        $("body").on("click", "#suggested-address-list input", function() {
            $("#suggested-address-btn-suggest").removeClass("disabled")
        }),
        $("body").on("click", "#suggested-address-btn-original", function() {
            disableBtn(),
            ACC.common.loadingStatus("#suggested-address-btn-original", "loading"),
            ACC.checkoutaddress.ignoreValidation = !0,
            $("#addressSubmit").trigger("click")
        }),
        $("body").on("click", "#suggested-address-btn-suggest", function() {
            var shippingForm = "#add-shipping-address"
              , newAddress = ".js-suggested-address-list";
            if (0 < $(newAddress + ":checked").length) {
                disableBtn(),
                ACC.common.loadingStatus("#suggested-address-btn-suggest", "loading"),
                ACC.checkoutaddress.ignoreValidation = !0;
                var line1 = $(newAddress + ":checked").data("line1")
                  , line2 = $(newAddress + ":checked").data("line2")
                  , postcode = $(newAddress + ":checked").data("postcode")
                  , country = $(newAddress + ":checked").data("country")
                  , state = $(newAddress + ":checked").data("state")
                  , town = $(newAddress + ":checked").data("town");
                $(shippingForm + " input[name=line1]").val(line1),
                $(shippingForm + " input[name=line2]").val(line2),
                $(shippingForm + " input[name=townCity]").val(town),
                $(shippingForm + " input[name=postcode]").val(postcode),
                $(shippingForm + " select[name=regionIso]").val(state),
                $(shippingForm + " select[name=countryIso]").val(country),
                $("#addressSubmit").trigger("click")
            } else
                $(".suggested-address__list").addClass("field-error-message")
        }),
        $("body").on("click", "#suggested-address-btn-back", function() {
            $(".js-overlay__close").trigger("click")
        })
    }
},
ACC.checkout = {
    _autoload: ["bindCheckO", "bindForms", "bindSavedPayments", "applePay"],
    bindForms: function() {
        $(document).on("click", "#addressSubmit", function(e) {
            e.preventDefault(),
            $("#addressForm").submit()
        }),
        $(document).on("click", "#deliveryMethodSubmit", function(e) {
            e.preventDefault(),
            $("#selectDeliveryMethodForm").submit()
        })
    },
    bindSavedPayments: function() {
        $(document).on("click", ".js-saved-payments", function(e) {
            e.preventDefault();
            var title = $("#savedpaymentstitle").html();
            $.colorbox({
                href: "#savedpaymentsbody",
                inline: !0,
                maxWidth: "100%",
                opacity: .7,
                title: title,
                close: '<span class="close-icon"></span>',
                onComplete: function() {}
            })
        })
    },
    bindCheckO: function() {
        $(".doFlowSelectedChange").change(function() {
            "multistep-pci" == $("#selectAltCheckoutFlow").val() ? $("#selectPciOption").show() : $("#selectPciOption").hide()
        }),
        $(".js-continue-shopping-button").click(function() {
            var checkoutUrl = $(this).data("continueShoppingUrl");
            window.location = checkoutUrl
        }),
        $(".js-create-quote-button").click(function() {
            $(this).prop("disabled", !0);
            var createQuoteUrl = $(this).data("createQuoteUrl");
            window.location = createQuoteUrl
        }),
        $(".expressCheckoutButton").click(function() {
            document.getElementById("expressCheckoutCheckbox").checked = !0
        }),
        $(document).on("input", ".confirmGuestEmail,.guestEmail", function() {
            $(".guestEmail").val() === $(".confirmGuestEmail").val() ? $(".guestCheckoutBtn").removeAttr("disabled") : $(".guestCheckoutBtn").attr("disabled", "disabled")
        }),
        $(".js-continue-checkout-button").click(function() {
            var $deliveryCountrySelect = $("#deliveryCountry")
              , checkoutUrl = $(this).data("checkoutUrl")
              , countryIso = "";
            if (countryIso = 0 < $(".country-wrapper").length ? $(".country-radio-btn:checked").val() : $deliveryCountrySelect.val(),
            0 < $deliveryCountrySelect.length) {
                if (0 < $deliveryCountrySelect.length && "0" == countryIso || null == countryIso)
                    return $(".delivery-country-error-text").removeClass("hide"),
                    !1;
                var param = {
                    countryIso: countryIso,
                    deliveryMode: $("select[name=deliveryCountryOptions]").val()
                };
                $.post(ACC.config.sitePath + "/cart/checkout/set-delivery-methods", param, function(data) {})
            }
            if (!ACC.pickupinstore.validatePickupinStoreCartEntires()) {
                var expressCheckoutObject = $(".express-checkout-checkbox");
                if (ACC.common.loadingStatus(".btn--continue-checkout", "loading"),
                expressCheckoutObject.is(":checked"))
                    window.location = expressCheckoutObject.data("expressCheckoutUrl");
                else {
                    var flow = $("#selectAltCheckoutFlow").val();
                    if (null == flow || "" == flow || "select-checkout" == flow)
                        window.location = checkoutUrl;
                    else {
                        "multistep-pci" == flow && (flow = "multistep");
                        var redirectUrl = checkoutUrl + "/select-flow?flow=" + flow + "&pci=" + $("#selectPciOption").val();
                        window.location = redirectUrl
                    }
                }
            }
            return !1
        }),
        $(".js-open-cvv").on("click", function(e) {
            e.preventDefault();
            var id = $(this).attr("href");
            ACC.overlayDrm.open(id)
        }),
        "true" === ACC.config.inStore && (ACC.checkout.maskValue("card_accountNumber"),
        ACC.checkout.maskValue("card_cvNumber")),
        $(".js-oos-item-dismiss").on("click", function(e) {
            e.preventDefault(),
            $(".oos-box__summary").hide()
        }),
        $(".js-oos-close").on("click", function(e) {
            e.preventDefault();
            var id = $(this).attr("href");
            $(id).removeClass("_active")
        }),
        0 < $(".oos-box__summary").length && ACC.os.isMobile() && setTimeout(function() {
            window.scrollTo(0, 0)
        }, 2e3)
    },
    createstars: function(n) {
        for (var stars = "", i = 0; i < n; i++)
            stars += "•";
        return stars
    },
    maskValue: function(id) {
        var timer, inputMask = "#" + id + "_mask", inputMasked = "#" + id;
        $("body").on("keypress", inputMask, function(e) {
            var code = e.which
              , length = $(inputMask).val().length
              , maxLenght = parseInt(e.target.attributes.maxlength.value);
            if (window.getSelection().toString().length == length && 0 < length) {
                var character = String.fromCharCode(code);
                $(inputMasked).val(character)
            }
            if (32 <= code && code <= 127 && length < maxLenght) {
                character = String.fromCharCode(code);
                $(inputMasked).val($(inputMasked).val() + character)
            }
        }),
        $("body").on("keyup", inputMask, function(e) {
            var code = e.which;
            if (8 == code) {
                var length = $(inputMask).val().length;
                $(inputMasked).val($(inputMasked).val().substring(0, length))
            } else if (37 == code)
                ;
            else {
                var current_val = $(inputMask).val().length;
                $(inputMask).val(ACC.checkout.createstars(current_val - 1) + $(inputMask).val().substring(current_val - 1)),
                $(inputMasked).trigger("keyup")
            }
            clearTimeout(timer),
            timer = setTimeout(function() {
                $(inputMask).val(ACC.checkout.createstars($(inputMask).val().length))
            }, 200)
        })
    },
    applePay: function() {
        var BTN_ONE = "#dm-apple-pay-button .js-hover";
        $(BTN_ONE) && $(BTN_ONE).on("mouseover", function() {
            $(BTN_ONE).toggleClass("hide")
        }).on("mouseout", function() {
            $(BTN_ONE).toggleClass("hide")
        })
    }
},
ACC.checkoutsteps = {
    _autoload: ["permeateLinks"],
    permeateLinks: function() {
        $(document).on("click", ".js-checkout-step", function(e) {
            e.preventDefault(),
            window.location = $(this).closest("a").attr("href")
        })
    }
},
ACC.close = {
    _autoload: [["bindCloseAccountModalButtons", 0 != $(".js-close-account-popup-button").length], ["bindCloseAccountButton", 0 != $(".js-close-account-popup-button").length]],
    bindCloseAccountModalButtons: function() {
        $(".js-close-account-popup-button").click(function(event) {
            event.preventDefault();
            var popupTitle = $(".js-close-account-popup-button").data("popupTitle");
            ACC.colorbox.open(popupTitle, {
                inline: !0,
                href: "#popup_confirm_account_removal",
                className: "js-close-account-popup",
                width: "500px",
                onComplete: function() {
                    $(this).colorbox.resize()
                }
            })
        })
    },
    bindCloseAccountButton: function() {
        $(document).on("click", ".js-close-account-action", function(event) {
            event.preventDefault();
            var url = ACC.config.encodedContextPath + "/my-account/close-account";
            $.ajax({
                url: url,
                type: "POST",
                success: function(response) {
                    ACC.colorbox.close();
                    var url = ACC.config.encodedContextPath + "/logout?closeAcc=true";
                    window.location.replace(url)
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    alert("Failed to close account. Error: [" + errorThrown + "]"),
                    window.location.reload()
                }
            })
        })
    }
},
ACC.cms = {
    loadComponent: function(id, type, target, onSuccess, onError) {
        var self = this;
        id && $.ajax({
            url: ACC.config.contextPath + "/cms/component?componentUid=" + id,
            cache: !1,
            type: "GET",
            success: function(result) {
                reprocess = -1 < result.indexOf("js-responsive-image"),
                self.insertHtml(result, target, reprocess),
                onSuccess && onSuccess(result, id, type, target)
            },
            error: function(result) {
                onError && onError(result, id, type, target)
            }
        })
    },
    insertHtml: function(html, target, reprocess) {
        target && ($(target).html(html),
        reprocess && ACC.global.reprocessImages())
    }
};
var cboxOptions = {
    width: "95%",
    height: "95%",
    maxWidth: "960px",
    maxHeight: "960px"
};
function dropdownParent($this) {
    var selector = $this.attr("href")
      , $parent = (selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, "")) && $(selector);
    return $parent && $parent.length ? $parent : $this.parent()
}
function dropdownClearMenus(e) {
    e && 3 === e.which || ($(".dropdown-backdrop").remove(),
    $(".dropdown-toggle").each(function() {
        var $parent = dropdownParent($(this));
        $parent.hasClass("open") && (e && "click" == e.type && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target) || $parent.removeClass("open"))
    }))
}
function dropdownToggle(e) {
    var $this = $(this);
    if (!$this.is(".disabled, :disabled")) {
        var $parent = dropdownParent($this)
          , isActive = $parent.hasClass("open");
        if (dropdownClearMenus(),
        !isActive) {
            "ontouchstart"in document.documentElement && !$parent.closest(".navbar-nav").length && $(document.createElement("div")).addClass("dropdown-backdrop").insertAfter($(this)).on("click", dropdownClearMenus);
            if (e.isDefaultPrevented())
                return;
            $this.trigger("focus").attr("aria-expanded", "true"),
            $parent.toggleClass("open")
        }
        return !1
    }
}
$(".cbox-link").colorbox(cboxOptions),
$(window).resize(function() {
    $("#colorbox").hasClass("variantSelectMobile") || $.colorbox.resize({
        width: window.innerWidth > parseInt(cboxOptions.maxWidth) ? cboxOptions.maxWidth : cboxOptions.width,
        height: window.innerHeight > parseInt(cboxOptions.maxHeight) ? cboxOptions.maxHeight : cboxOptions.height
    })
}),
ACC.colorbox = {
    config: {
        maxWidth: "100%",
        opacity: .7,
        width: "auto",
        transition: "none",
        close: '<span class="close-icon"></span>',
        title: '<div class="headline"><span class="headline-text">{title}</span></div>',
        onComplete: function() {
            $.colorbox.resize(),
            ACC.common.refreshScreenReaderBuffer()
        },
        onClosed: function() {
            ACC.common.refreshScreenReaderBuffer()
        }
    },
    open: function(title, config) {
        return (config = $.extend({}, ACC.colorbox.config, config)).title = config.title.replace(/{title}/g, title),
        $.colorbox(config)
    },
    resize: function() {
        $.colorbox.resize()
    },
    close: function() {
        $.colorbox.close()
    },
    fullScreen: function() {
        var winW = $(document).width()
          , winH = $(document).height();
        winW < 481 && ($("body").css({
            position: "fixed"
        }),
        $("#cboxLoadedContent").css({
            "margin-left": "auto",
            "margin-right": "auto"
        }),
        setTimeout(function() {
            $("#colorbox").css({
                width: winW,
                height: winH,
                position: "fixed",
                top: 0,
                left: 0
            }),
            $("#cboxWrapper").css({
                width: winW,
                height: winH
            }),
            $("#cboxContent").css({
                width: winW,
                height: winH,
                position: "fixed",
                top: 0,
                left: 0
            })
        }, 100))
    }
},
ACC.common = {
    currentCurrency: $("main").data("currencyIsoCode") || "USD",
    processingMessage: $("<img src='" + ACC.config.commonResourcePath + "/images/spinner.gif'/>"),
    blockFormAndShowProcessingMessage: function(submitButton) {
        submitButton.parents("form:first").block({
            message: ACC.common.processingMessage
        })
    },
    refreshScreenReaderBuffer: function() {
        $("#accesibility_refreshScreenReaderBufferField").attr("value", (new Date).getTime())
    },
    checkAuthenticationStatusBeforeAction: function(actionCallback) {
        $.ajax({
            url: ACC.config.authenticationStatusUrl,
            statusCode: {
                401: function() {
                    location.href = ACC.config.loginUrl
                }
            },
            success: function(data) {
                "authenticated" == data && actionCallback()
            }
        })
    },
    loadingStatus: function(target, status) {
        $(target).removeClass("loading").removeClass("done").addClass(status)
    }
},
jQuery.extend({
    postJSON: function(url, data, callback) {
        return jQuery.post(url, data, callback, "json")
    }
}),
$.ajaxPrefilter(function(options, originalOptions, jqXHR) {
    if ("post" === options.type || "POST" === options.type)
        if (void 0 === options.data)
            options.data = "CSRFToken=" + ACC.config.CSRFToken;
        else {
            options.data instanceof window.FormData ? options.data.append("CSRFToken", ACC.config.CSRFToken) : /application\/json/i.test(options.contentType) ? jqXHR.setRequestHeader("CSRFToken", ACC.config.CSRFToken) : -1 === options.data.indexOf("CSRFToken") && (options.data = options.data + "&CSRFToken=" + ACC.config.CSRFToken)
        }
}),
ACC.consent = {
    _autoload: [["bindSendConsent", 0 != $("#consent-management-form").length], ["bindToggleConsentTemplateDescription", 0 != $("#consent-management-form").length], "bindConsentClick", "bindConsentManagementAlertBar"],
    bindSendConsent: function() {
        $("#consent-management-form").find("input.toggle-button__input").click(function() {
            var consentId = $(this).prop("id")
              , buttonId = ($(this).is(":checked") ? "#give-consent-button-" : "#withdraw-consent-button-") + consentId;
            $(buttonId).trigger("click"),
            $(buttonId).on("keydown", function(event) {
                13 !== event.keyCode && 32 !== event.keyCode || (event.preventDefault(),
                $(buttonId).trigger("click"))
            })
        })
    },
    bindToggleConsentTemplateDescription: function() {
        var accordion = $("#consent-management-form").find('[data-behavior="accordion"]');
        $.each(accordion, function() {
            var accordionItems = $(this).find('[data-binding="expand-accordion-item"]');
            $.each(accordionItems, function() {
                var triggerBtn = $(this).find('[data-binding="expand-accordion-trigger"]')
                  , toggleClasses = function(event) {
                    var nV, innerContent, maxHeight, content, clickedItem = event.currentTarget, currentItem = $(clickedItem).parent(), clickedContent = $(currentItem).find(".consent-management-list__content");
                    $(currentItem).toggleClass("is-expanded"),
                    innerContent = (nV = currentItem).find(".consent-management-list__content-inner")[0],
                    maxHeight = $(innerContent).outerHeight(),
                    (content = nV.find(".consent-management-list__content")[0]).style.height && "0px" !== content.style.height ? $(content).css("height", "0px") : $(content).css("height", maxHeight),
                    $(currentItem).hasClass("is-expanded") ? ($(clickedItem).attr("aria-selected", "true"),
                    $(clickedItem).attr("aria-expanded", "true"),
                    $(clickedContent).attr("aria-hidden", "false")) : ($(clickedItem).attr("aria-selected", "false"),
                    $(clickedItem).attr("aria-expanded", "false"),
                    $(clickedContent).attr("aria-hidden", "true"))
                };
                triggerBtn.on("click", function(event) {
                    event.preventDefault(),
                    toggleClasses(event)
                }),
                $(triggerBtn).on("keydown", function(event) {
                    13 !== event.keyCode && 32 !== event.keyCode || (event.preventDefault(),
                    toggleClasses(event))
                })
            })
        })
    },
    bindConsentClick: function() {
        $(".consent-accept").on("click", function() {
            ACC.consent.updateConsent(this, "GIVEN")
        }),
        $(".consent-reject").on("click", function() {
            ACC.consent.updateConsent(this, "WITHDRAWN")
        })
    },
    changeConsentState: function(anonymousConsentCookie, consentCode, consentState) {
        anonymousConsentCookie.forEach(function(consent) {
            consent.templateCode === consentCode && (consent.consentState = consentState)
        })
    },
    updateConsent: function(element, state) {
        var anonymousConsentCookie = JSON.parse(decodeURIComponent($.cookie("anonymous-consents")));
        $(element).closest(".consentmanagement-bar").hide();
        var consentCode = $(element).closest(".consentmanagement-bar").data("code");
        ACC.consent.changeConsentState(anonymousConsentCookie, consentCode, state),
        $.cookie("anonymous-consents", JSON.stringify(anonymousConsentCookie), {
            json: !0,
            path: "/"
        })
    },
    bindConsentManagementAlertBar: function() {
        var accordion = $("#consent-management-alert").find('[data-behavior="accordion"]');
        $.each(accordion, function() {
            var accordionItems = $(this).find('[data-binding="expand-accordion-item"]');
            $.each(accordionItems, function() {
                var triggerBtn = $(this).find('[data-binding="expand-accordion-trigger"]')
                  , toggleClasses = function(event) {
                    var nV, innerContent, maxHeight, content, clickedItem = event.currentTarget, currentItem = $(clickedItem).parent(), clickedContent = $(currentItem).find(".consent-management-list__content");
                    $(currentItem).toggleClass("is-expanded"),
                    innerContent = (nV = currentItem).find(".consent-management-list__content-inner")[0],
                    maxHeight = $(innerContent).outerHeight(),
                    (content = nV.find(".consent-management-list__content")[0]).style.height && "0px" !== content.style.height ? $(content).css("height", "0px") : $(content).css("height", maxHeight),
                    $(currentItem).hasClass("is-expanded") ? ($(clickedItem).attr("aria-selected", "true"),
                    $(clickedItem).attr("aria-expanded", "true"),
                    $(clickedContent).attr("aria-hidden", "false")) : ($(clickedItem).attr("aria-selected", "false"),
                    $(clickedItem).attr("aria-expanded", "false"),
                    $(clickedContent).attr("aria-hidden", "true"))
                };
                triggerBtn.on("click", function(event) {
                    event.preventDefault(),
                    toggleClasses(event)
                }),
                $(triggerBtn).on("keydown", function(event) {
                    13 !== event.keyCode && 32 !== event.keyCode || (event.preventDefault(),
                    toggleClasses(event))
                })
            })
        })
    }
},
ACC.coookienotification = {
    _autoload: [["bindCookieNotificationClick", 0 != $(".js-cookie-notification-accept").length]],
    bindCookieNotificationClick: function() {
        $(".js-cookie-notification-accept").on("click", function() {
            $.cookie("cookie-notification", "ACCEPTED", {
                path: "/"
            }),
            $("#js-cookie-notification").hide()
        })
    }
},
ACC.countdown = {
    _autoload: [["init", 0 != $(".js-countdown").length]],
    init: function() {
        var timingAr = $(".js-countdown").data("time").split(";");
        $(".slick-home-hero").addClass("preorder-hero"),
        hoursMs = 36e5 * timingAr[0],
        minMs = 6e4 * timingAr[1],
        secMs = 1e3 * timingAr[2];
        var start = (new Date).getTime()
          , newTime = hoursMs + minMs + secMs + start
          , x = setInterval(function() {
            var now = (new Date).getTime()
              , distance = newTime - now;
            document.getElementById("countdown_days").innerText = Math.floor(distance / 864e5),
            document.getElementById("countdown_hours").innerText = Math.floor(distance % 864e5 / 36e5),
            document.getElementById("countdown_minutes").innerText = Math.floor(distance % 36e5 / 6e4),
            document.getElementById("countdown_seconds").innerText = Math.floor(distance % 6e4 / 1e3),
            Math.floor(distance / 864e5) < 1 && $("#countdown_days").parent().addClass("hidden"),
            Math.floor(distance % 864e5 / 36e5) < 0 && $("#countdown_hours").parent().addClass("hidden"),
            Math.floor(distance % 36e5 / 6e4) < 0 && $("#countdown_minutes").parent().addClass("hidden"),
            Math.floor(distance % 6e4 / 1e3) < 0 && $("#countdown_seconds").parent().addClass("hidden"),
            distance < 0 && (clearInterval(x),
            ACC.countdown.countdownDone())
        }, 1e3)
    },
    countdownDone: function() {
        location.reload(),
        $(".slick-home-hero").removeClass("preorder-hero")
    }
},
function($) {
    var acceptedCreditCards = {
        visa: /^4[0-9]{12}(?:[0-9]{3})?$/,
        mastercard: /^5[1-5][0-9]{14}$|^2(?:2(?:2[1-9]|[3-9][0-9])|[3-6][0-9][0-9]|7(?:[01][0-9]|20))[0-9]{12}$/,
        amex: /^3[47][0-9]{13}$/,
        discover: /^65[4-9][0-9]{13}|64[4-9][0-9]{13}|6011[0-9]{12}|(622(?:12[6-9]|1[3-9][0-9]|[2-8][0-9][0-9]|9[01][0-9]|92[0-5])[0-9]{10})$/,
        diners: /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,
        jcb: /^(?:2131|1800|35[0-9]{3})[0-9]{11}$/
    }
      , typeCreditCards = {
        visa: /^4/,
        mastercard: /^5[1-5]/,
        amex: /^3[47]/,
        discover: /^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)/,
        diners: /^(30[6-9]|36|38)/,
        jcb: /^(352[89]|35[3-8][0-9])/
    }
      , CcForm = function(element) {
        element[0].value;
        var id = element[0].id;
        this.formatCardNumber = function(value) {
            var formattedValue, maxLength, realLength;
            value = value.replace(/\D/g, "");
            return /^3[47]\d{0,13}$/.test(value) ? (formattedValue = value.replace(/(\d{4})/, "$1 ").replace(/(\d{4}) (\d{6})/, "$1 $2 "),
            maxLength = 17,
            realLength = 15) : /^3(?:0[0-5]|[68]\d)\d{0,11}$/.test(value) ? (formattedValue = value.replace(/(\d{4})/, "$1 ").replace(/(\d{4}) (\d{6})/, "$1 $2 "),
            maxLength = 16,
            realLength = 14) : /^\d{0,16}$/.test(value) && (formattedValue = value.replace(/(\d{4})/, "$1 ").replace(/(\d{4}) (\d{4})/, "$1 $2 ").replace(/(\d{4}) (\d{4}) (\d{4})/, "$1 $2 $3 "),
            maxLength = 19,
            realLength = 16),
            $("#" + id).attr("maxlength", maxLength),
            {
                formattedValue: formattedValue,
                realLength: realLength
            }
        }
        ,
        this.validateCard = function() {
            for (var value, sum = 0, shouldDouble = !1, i = (value = (value = element[0].value).replace(/\D/g, "")).length - 1; 0 <= i; i--) {
                var digit = parseInt(value.charAt(i));
                shouldDouble && 9 < (digit *= 2) && (digit -= 9),
                sum += digit,
                shouldDouble = !shouldDouble
            }
            var valid = sum % 10 == 0
              , accepted = !1;
            return Object.keys(acceptedCreditCards).forEach(function(key) {
                acceptedCreditCards[key].test(value) && (accepted = !0)
            }),
            valid && accepted
        }
        ,
        this.typeCreditCard = function() {
            var type, value = element[0].value;
            return Object.keys(typeCreditCards).forEach(function(key) {
                typeCreditCards[key].test(value) && (type = key)
            }),
            type
        }
        ,
        this.formattingCard = function() {
            var id = element[0].id
              , node = element[0]
              , cursor = node.selectionStart
              , lastValue = $("#" + id).val()
              , formattedValue = this.formatCardNumber(lastValue);
            formattedValue = formattedValue.formattedValue,
            $("#" + id).val(formattedValue),
            cursor === lastValue.length && (cursor = formattedValue.length,
            $("#" + id).attr("data-lastvalue") && " " == $("#" + id).attr("data-lastvalue").charAt(cursor - 1) && cursor--),
            lastValue != formattedValue && " " == lastValue.charAt(cursor) && " " == formattedValue.charAt(cursor - 1) && cursor++,
            node.selectionStart = cursor,
            node.selectionEnd = cursor,
            $("#" + id).attr("data-lastvalue", formattedValue)
        }
    };
    $.fn.dmCcForm = function(element) {
        return new CcForm(this,element)
    }
}(jQuery),
ACC.csvimport = {
    TEXT_CSV_CONTENT_TYPE: "text/csv",
    APP_EXCEL_CONTENT_TYPE: "application/vnd.ms-excel",
    _autoload: [["changeFileUploadAppearance", 0 != $(".js-file-upload").length], ["bindImportCSVActions", 0 != $(".js-import-csv").length]],
    changeFileUploadAppearance: function() {
        $(".js-file-upload__input").on("change", function() {
            for (var files = this.files, fileNames = "", i = 0; i < files.length; i++)
                fileNames += files[i].name + "<br/>";
            $(".js-file-upload__file-name").unbind("mouseenter mouseleave"),
            1 < files.length ? ($(".js-file-upload__file-name").html(files.length + " files"),
            $(".js-file-upload__file-name").hover(function() {
                $(this).html(fileNames.toLowerCase())
            }, function() {
                $(this).html(files.length + " files")
            })) : $(".js-file-upload__file-name").html(fileNames.toLowerCase()),
            0 < $(".js-file-upload").parents("#cboxLoadedContent").length && ACC.colorbox.resize()
        })
    },
    bindImportCSVActions: function() {
        $("#chooseFileButton").on("click", function(event) {
            ACC.csvimport.clearGlobalAlerts()
        }),
        $("#importButton").on("click", function(event) {
            if (event.preventDefault(),
            ACC.csvimport.clearGlobalAlerts(),
            0 < $(".js-file-upload__input").val().trim().length) {
                var selectedFile = document.getElementById("csvFile").files[0];
                if (ACC.csvimport.isSelectedFileValid(selectedFile)) {
                    var form = document.getElementById("importCSVSavedCartForm")
                      , formData = new window.FormData(form);
                    formData.append("csvFile", selectedFile),
                    ACC.csvimport.displayGlobalAlert({
                        type: "warning",
                        messageId: "import-csv-upload-message"
                    }),
                    ACC.csvimport.enableDisableActionButtons(!1),
                    $.ajax({
                        url: form.action,
                        type: "POST",
                        data: formData,
                        contentType: !1,
                        processData: !1,
                        success: function() {
                            ACC.csvimport.displayGlobalAlert({
                                type: "info",
                                message: ""
                            }),
                            $("#import-csv-alerts .alert-info").append($("#import-csv-success-message").html()),
                            ACC.csvimport.clearChosenFile()
                        },
                        error: function(jqXHR) {
                            400 == jqXHR.status && jqXHR.responseJSON ? ACC.csvimport.displayGlobalAlert({
                                type: "error",
                                message: jqXHR.responseJSON
                            }) : ACC.csvimport.displayGlobalAlert({
                                type: "error",
                                messageId: "import-csv-generic-error-message"
                            })
                        },
                        complete: function() {
                            ACC.csvimport.enableDisableActionButtons(!0)
                        }
                    })
                }
            } else
                ACC.csvimport.displayGlobalAlert({
                    type: "error",
                    messageId: "import-csv-no-file-chosen-error-message"
                })
        })
    },
    isSelectedFileValid: function(selectedFile) {
        if (window.File && window.Blob) {
            if (selectedFile) {
                if (selectedFile.type != ACC.csvimport.TEXT_CSV_CONTENT_TYPE && selectedFile.type != ACC.csvimport.APP_EXCEL_CONTENT_TYPE)
                    return ACC.csvimport.displayGlobalAlert({
                        type: "error",
                        messageId: "import-csv-file-csv-required"
                    }),
                    !1;
                var fileName = selectedFile.name;
                if (!fileName || !/\.csv$/i.test(fileName))
                    return ACC.csvimport.displayGlobalAlert({
                        type: "error",
                        messageId: "import-csv-file-csv-required"
                    }),
                    !1
            }
            var fileMaxSize = $(".js-file-upload__input").data("file-max-size");
            if ($.isNumeric(fileMaxSize) && selectedFile && selectedFile.size > parseFloat(fileMaxSize))
                return ACC.csvimport.displayGlobalAlert({
                    type: "error",
                    messageId: "import-csv-file-max-size-exceeded-error-message"
                }),
                !1
        }
        return !0
    },
    displayGlobalAlert: function(options) {
        var alertTemplateSelector;
        switch (ACC.csvimport.clearGlobalAlerts(),
        options.type) {
        case "error":
            alertTemplateSelector = "#global-alert-danger-template";
            break;
        case "warning":
            alertTemplateSelector = "#global-alert-warning-template";
            break;
        default:
            alertTemplateSelector = "#global-alert-info-template"
        }
        void 0 !== options.message && $("#import-csv-alerts").append($(alertTemplateSelector).tmpl({
            message: options.message
        })),
        void 0 !== options.messageId && $("#import-csv-alerts").append($(alertTemplateSelector).tmpl({
            message: $("#" + options.messageId).text()
        })),
        $(".closeAccAlert").on("click", function() {
            $(this).parent(".getAccAlert").remove()
        })
    },
    clearGlobalAlerts: function() {
        $("#import-csv-alerts").empty()
    },
    clearChosenFile: function() {
        document.getElementById("csvFile").value = "",
        $(".js-file-upload__file-name").text("")
    },
    enableDisableActionButtons: function(enable) {
        $("#chooseFileButton").attr("disabled", !enable),
        $("#importButton").prop("disabled", !enable)
    }
},
ACC.forgottenpassword = {
    _autoload: ["bindLink"],
    bindLink: function() {
        $(document).on("click", ".js-password-forgotten", function(e) {
            e.preventDefault();
            $(document).width();
            var popupW = 0;
            popupW = ACC.os.isMobile() ? "100%" : "500px",
            ACC.colorbox.open($(this).data("cboxTitle"), {
                href: $(this).data("link"),
                width: popupW,
                fixed: !0,
                top: 150,
                onOpen: function() {
                    $("#validEmail").remove()
                },
                onComplete: function() {
                    ACC.colorbox.fullScreen(),
                    $("form#forgottenPwdForm").ajaxForm({
                        success: function(data) {
                            ACC.colorbox.fullScreen(),
                            $(data).closest("#validEmail").length ? 0 === $("#validEmail").length && ($(".forgotten-password").replaceWith(data),
                            ACC.colorbox.resize()) : ($("#forgottenPwdForm .control-group").replaceWith($(data).find(".control-group")),
                            ACC.colorbox.resize())
                        }
                    })
                },
                onClosed: function() {
                    $("body").removeAttr("style")
                }
            })
        })
    }
},
ACC.futurelink = {
    _autoload: ["bindFutureStockLink"],
    bindFutureStockLink: function() {
        $(document).on("click", ".futureStockLink", function(e) {
            e.preventDefault();
            var url = $(this).attr("href")
              , title = $(this).attr("title");
            ACC.colorbox.open(title, {
                href: url,
                maxWidth: "100%",
                width: "320px",
                height: "320px",
                initialWidth: "320px"
            })
        })
    }
},
ACC.giftcard = {
    _autoload: [["bindGift", 0 < $(".js-giftcard-active").length], ["loadLibrary", 0 != $(".g-recaptcha").length]],
    bindGift: function() {
        $(".js-giftcard").on("click", function(e) {
            e.preventDefault();
            var action = $(this).find("a").attr("href");
            action = action.replace("#", ""),
            ACC.giftcard.steps(action)
        }),
        $(".js-giftcard-add").on("click", function(e) {
            e.preventDefault(),
            ACC.giftcard.addCard()
        }),
        ACC.validation.counterTextArea(".js-giftcard-msg-counter"),
        ACC.giftcard.initPage(),
        $("body").on("click", ".js-mini-cart-close-button, #cboxClose", function(e) {
            e.preventDefault(),
            ACC.giftcard.resetPDPForm(),
            $.colorbox.close()
        })
    },
    steps: function(action) {
        switch (action) {
        case "giftcard_step1":
        case "giftcard_step2":
            ACC.giftcard.changeStep(action);
            break;
        case "check_code":
            ACC.giftcard.checkCode()
        }
    },
    changeStep: function(step) {
        $(".giftcard__content").removeClass("_active"),
        $("#" + step).addClass("_active"),
        ACC.giftcard.resetForm()
    },
    checkCode: function() {
        var url_call = ACC.config.sitePath + "/giftcard/balance-check"
          , postData = {
            giftcardID: $("#giftcard-code").val().toUpperCase(),
            giftcardCvn: $("#giftcard-cvn").val().toUpperCase()
        };
        ACC.giftcard.hideBalanceBtn(),
        ACC.giftcard.checkCaptcha(),
        ACC.giftcard.checkGifcardInput() && ACC.giftcard.checkCaptcha() && ($("#giftcard-balance").removeClass("hidden").addClass("loading--bg").removeClass("error"),
        $("#giftcard-captcha").addClass("hidden"),
        $.ajax({
            url: url_call,
            type: "GET",
            data: postData,
            traditional: !0,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function(data) {
                "ok" === data.status ? ($("#giftcard-balance").removeClass("loading--bg").find("strong").text(data.balance),
                ACC.giftcard.hideBalanceBtn(!0)) : $("#giftcard-balance").removeClass("loading--bg").addClass("error")
            },
            error: function(xht, textStatus, ex) {
                console.log("Error details [" + xht + ", " + textStatus + ", " + ex + "]"),
                $("#giftcard-balance").removeClass("loading--bg").addClass("error"),
                setTimeout(function() {
                    ACC.giftcard.resetForm()
                }, 2e3)
            }
        }))
    },
    resetForm: function() {
        $("#giftcard-code").val(""),
        $("#giftcard-cvn").val(""),
        $("#giftcard-balance").addClass("hidden"),
        $("#giftcard-captcha").removeClass("hidden"),
        grecaptcha.reset()
    },
    addCard: function() {
        var pdpLabel = ".giftcard-plp__sizes .giftcard-plp__label"
          , size = $(".add_to_cart_form input[name=productCodePost]").val();
        if ("" == size) {
            var errorSize = !0;
            $(".variant-name").addClass("has-error")
        } else {
            errorSize = !1;
            $(".variant-name").removeClass("has-error")
        }
        $(pdpLabel).removeClass("error");
        var giftcard_message = $("#giftcard_message").val()
          , url_call = ACC.config.encodedContextPath + "/cart/giftcard/add"
          , postData = {
            productCodePost: size,
            senderName: ACC.giftcard.getInputData().sender_name,
            senderEmail: ACC.giftcard.getInputData().sender_email,
            recipientName: ACC.giftcard.getInputData().recipient_name,
            recipientEmail: ACC.giftcard.getInputData().recipient_email,
            giftcardMessage: ACC.validation.emojiStrip(giftcard_message)
        };
        !1 === errorSize && !1 === ACC.giftcard.getInputData().error ? $.ajax({
            url: url_call,
            type: "POST",
            data: postData,
            traditional: !0,
            success: ACC.product.displayAddToCartPopup,
            error: function(xht, textStatus, ex) {
                console.log("Error details [" + xht + ", " + textStatus + ", " + ex + "]")
            }
        }) : errorSize && $(pdpLabel).addClass("error")
    },
    getInputData: function() {
        var output = {}
          , error = !0;
        return $("#giftcard-form input").parent().removeClass("has-error"),
        $("#giftcard-form input").each(function(e, obj) {
            var input = $(this)
              , inputName = null;
            inputName = obj.id ? obj.id : obj.name,
            console.log(inputName + " " + input.val()),
            input.val() || $("#" + inputName).parent().addClass("has-error"),
            "email" === obj.type && (ACC.validation.checkEmail(input.val()) || $("#" + inputName).parent().addClass("has-error")),
            output[inputName] = input.val()
        }),
        error = !!$("#giftcard-form input").parent().hasClass("has-error"),
        output.error = error,
        output
    },
    resetInputCard: function() {
        $("#giftcard-code").val("").parent().removeClass("has-error")
    },
    checkInput: function(id) {
        var isValid = !1
          , codeIDLenght = $("#" + id).val().toUpperCase().length;
        switch (id) {
        case "giftcard-code":
            var pinLengthMin = ACC.config.giftcard.codeMin
              , pinLengthMax = ACC.config.giftcard.codeMax;
            pinLengthMin <= codeIDLenght && codeIDLenght <= pinLengthMax ? ($("#" + id).parent().removeClass("has-error"),
            isValid = !0) : $("#" + id).parent().addClass("has-error");
            break;
        case "giftcard-cvn":
            codeIDLenght === (pinLengthMax = ACC.config.giftcard.pin) ? ($("#" + id).parent().removeClass("has-error"),
            isValid = !0) : $("#" + id).parent().addClass("has-error")
        }
        return isValid
    },
    checkGifcardInput: function() {
        var isValid = !1;
        return $(".js-giftcard-validation").each(function(e, obj) {
            obj.id ? inputName = obj.id : inputName = obj.name,
            ACC.giftcard.checkInput(inputName)
        }),
        $(".js-giftcard-validation").parent().hasClass("has-error") || (isValid = !0),
        isValid
    },
    checkCaptcha: function() {
        var isCheck = !1;
        return grecaptcha.getResponse() ? ($(".captcha-error").removeClass("_active"),
        isCheck = !0) : $(".captcha-error").addClass("_active"),
        isCheck
    },
    loadLibrary: function() {
        $.getScript("https://www.google.com/recaptcha/api.js", function() {
            console.log("library recaptcha loaded")
        })
    },
    hideBalanceBtn: function(action) {
        action ? ($("#giftcard-btn-check").addClass("hidden"),
        $("#giftcard-btn-shop").removeClass("hidden")) : ($("#giftcard-btn-check").removeClass("hidden"),
        $("#giftcard-btn-shop").addClass("hidden"))
    },
    initPage: function() {
        var currentUrl = window.location.href
          , isProdPage = 0;
        $(".js-giftcard-size").each(function() {
            var code = $(this).data("size")
              , regexTest = new RegExp(code + "$");
            isProdPage = regexTest.test(currentUrl) ? isProdPage + 1 : isProdPage
        }),
        0 == isProdPage && ACC.giftcard.resetSizeSelect(),
        $(".js-giftcard-size").on("click", function(e) {
            e.preventDefault(),
            $("input[name=productCodePost]").val($(this).data("sku")),
            $(".js-giftcard-size").removeClass("_active"),
            $(this).addClass("_active")
        })
    },
    resetSizeSelect: function() {
        $(".js-giftcard-size").removeClass("_active").parent().removeClass("_active"),
        setTimeout(function() {
            $(".add_to_cart_form input[name=productCodePost]").val("")
        }, 0)
    },
    resetPDPForm: function() {
        $("#giftcard-form input.js-giftcard-input").val(""),
        $("#giftcard-form textarea").val(""),
        $(".js-giftcard-msg-counter").val("").change(),
        ACC.giftcard.resetSizeSelect()
    }
},
ACC.global = {
    _autoload: [["passwordStrength", 0 < $(".password-strength").length], "bindToggleXsSearch", "bindHoverIntentMainNavigation", "initImager", "backToHome", "bindDropdown", "closeAccAlert", "initImageBackground", "initSelect", "initVideo", "countryDropDown", "bindHeroMainLink", "extendBtnLink", "initBreadcrumb"],
    passwordStrength: function() {
        $(".password-strength").pstrength({
            verdicts: [ACC.pwdStrengthTooShortPwd, ACC.pwdStrengthVeryWeak, ACC.pwdStrengthWeak, ACC.pwdStrengthMedium, ACC.pwdStrengthStrong, ACC.pwdStrengthVeryStrong],
            minCharText: ACC.pwdStrengthMinCharText
        })
    },
    bindToggleOffcanvas: function() {
        $(document).on("click", ".js-toggle-sm-navigation", function() {
            ACC.global.toggleClassState($("main"), "offcanvas"),
            ACC.global.toggleClassState($("html"), "offcanvas"),
            ACC.global.toggleClassState($("body"), "offcanvas"),
            ACC.global.resetXsSearch()
        })
    },
    bindToggleXsSearch: function() {
        $(document).on("click", ".js-toggle-xs-search", function() {
            ACC.global.toggleClassState($(".site-search"), "active"),
            ACC.global.toggleClassState($(".js-mainHeader .navigation--middle"), "search-open")
        })
    },
    resetXsSearch: function() {
        $(".site-search").removeClass("active"),
        $(".js-mainHeader .navigation--middle").removeClass("search-open")
    },
    toggleClassState: function($e, c) {
        return $e.hasClass(c) ? $e.removeClass(c) : $e.addClass(c),
        $e.hasClass(c)
    },
    bindHoverIntentMainNavigation: function() {
        enquire.register("screen and (min-width:" + screenSmMin + ")", {
            match: function() {
                ACC.os.isMobileOrTabletDevice() ? ($(".js-enquire-has-sub").on("click", function(e) {
                    e.preventDefault(),
                    $(".js-enquire-has-sub").removeClass("show-sub"),
                    $(this).addClass("show-sub")
                }),
                $(".sub-navigation-list a").on("click", function(e) {
                    console.log("ecco");
                    var urlSubNav = $(this).attr("href");
                    window.location.href = urlSubNav
                })) : $(".js-enquire-has-sub").hoverIntent(function() {
                    $(this).addClass("show-sub")
                }, function() {
                    $(this).removeClass("show-sub")
                })
            },
            unmatch: function() {
                $(".js_sub__navigation").removeAttr("style")
            }
        })
    },
    initImager: function(elems) {
        elems = elems || ".js-responsive-image",
        this.imgr = new Imager(elems)
    },
    reprocessImages: function(elems) {
        elems = elems || ".js-responsive-image",
        null == this.imgr ? this.initImager(elems) : this.imgr.checkImagesNeedReplacing($(elems))
    },
    addGoogleMapsApi: function(callback) {
        null != callback && 0 == $(".js-googleMapsApi").length ? $("head").append('<script class="js-googleMapsApi" type="text/javascript" src="//maps.googleapis.com/maps/api/js?key=' + ACC.config.googleApiKey + "&sensor=false&callback=" + callback + '"><\/script>') : null != callback && eval(callback + "()")
    },
    backToHome: function() {
        $(".backToHome").on("click", function() {
            var sUrl = ACC.config.contextPath;
            window.location = sUrl
        })
    },
    bindDropdown: function() {
        $(document).on("click", ".dropdown-toggle", dropdownToggle)
    },
    closeAccAlert: function() {
        $(".closeAccAlert").on("click", function() {
            $(this).parent(".getAccAlert").remove()
        })
    },
    initImageBackground: function() {
        var divBackground = new divImageBackground({
            target: ".js-background-image"
        });
        divBackground.imageBg(),
        $(window).resize(function() {
            divBackground.imageBg()
        })
    },
    initSelect: function() {
        ACC.os.isMobileOrTabletDevice() ? ACC.global.selectSetUp(!0) : ACC.global.selectSetUp(!1)
    },
    initVideo: function() {
        plyr.setup(".js-video > div", {
            controls: ["play-large", "fullscreen"],
            showPosterOnEnd: !0,
            fullscreen: {
                enabled: !0,
                fallback: !0
            }
        })
    },
    countryDropDown: function() {
        ACC.os.isMobileOrTabletDevice() ? $(".country-picker").on("click", "a#flyoutOpen", function(e) {
            e.preventDefault(),
            $(".flyout-container").slideToggle()
        }) : $(".country-picker").hover(function(e) {
            e.preventDefault();
            var $flyout = $(".flyout-container");
            $flyout.clearQueue(),
            $flyout.stop(),
            $flyout.slideDown()
        }, function(e) {
            e.preventDefault(),
            $(".flyout-container").slideUp()
        })
    },
    selectSetUp: function(val) {
        $(".selectpicker").selectpicker({
            style: "select-dm",
            width: "100%",
            mobile: val,
            template: {
                caret: '<i class="fa fa-angle-down fa-2x select-dm__arrow" aria-hidden="true"></i>'
            }
        })
    },
    bindHeroMainLink: function() {
        0 < $(".js-main-link").length && $(".js-main-link").on("click", function() {
            var url = $(this).data("main-link");
            window.location.href = url
        })
    },
    extendBtnLink: function() {
        $(".js-use-link").on("click", function() {
            var URL = $(".js-use-link a").attr("href");
            window.location.href = URL
        })
    },
    initBreadcrumb: function() {
        $(".hero__wrapper").hasClass("_has-hero-image") && $(".hero__breadcrumb").addClass("_has-hero-image")
    }
};
var divImageBackground = function(options) {
    var breakPoint = {
        mobile: 480,
        tabletPortrait: 768,
        tabletLandscape: 992,
        desktop: 1200
    }
      , vars = {
        target: "original Value"
    };
    this.construct = function(options) {
        $.extend(vars, options)
    }
    ,
    this.imageBg = function() {
        var imageBg = ""
          , windowSize = $(window).width();
        0 != $(vars.target).length && $(vars.target).each(function() {
            var media = $(this).attr("data-media");
            if (media)
                if (media = JSON.parse(media),
                "" != (imageBg = checkingData(media))) {
                    switch (!0) {
                    case breakPoint.mobile < windowSize && windowSize <= breakPoint.tabletPortrait:
                        media[breakPoint.tabletPortrait] && (imageBg = media[breakPoint.tabletPortrait]);
                        break;
                    case breakPoint.tabletPortrait < windowSize && windowSize <= breakPoint.tabletLandscape:
                        media[breakPoint.tabletLandscape] && (imageBg = media[breakPoint.tabletLandscape]);
                        break;
                    case breakPoint.tabletLandscape < windowSize:
                        media[breakPoint.desktop] && (imageBg = media[breakPoint.desktop]);
                        break;
                    default:
                        media[breakPoint.mobile] && (imageBg = media[breakPoint.mobile])
                    }
                    $(this).attr("data-src", imageBg)
                } else
                    $(this).addClass("img--empty")
        })
    }
    ;
    var checkingData = function(data) {
        var dataAr = Object.keys(breakPoint)
          , imgTemp = ""
          , breakPointVal = "";
        return dataAr.forEach(function(element) {
            void 0 !== data[breakPointVal = breakPoint[element]] && (imgTemp = data[breakPointVal])
        }),
        imgTemp
    };
    this.construct(options)
};
ACC.hopdebug = {
    bindAll: function() {
        this.bindShowDebugMode()
    },
    bindShowDebugMode: function() {
        $("#hopDebugMode").data("hopDebugMode") || $("#showDebugPage").val() || $("#hostedOrderPagePostForm").submit()
    }
},
$(document).ready(function() {
    ACC.hopdebug.bindAll()
}),
function(window, document) {
    "use strict";
    var nextTick, addEvent;
    function Imager(elements, opts) {
        var self = this;
        opts = opts || {},
        this.elements = elements || ".js-responsive-image",
        this.className = opts.className || "js-responsive-image-replaced",
        this.onResize = !opts.hasOwnProperty("onResize") || opts.onResize,
        this.onImagesReplaced = opts.onImagesReplaced || function() {}
        ,
        this.eles = $(elements),
        nextTick(function() {
            self.init()
        })
    }
    nextTick = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function(callback) {
        window.setTimeout(callback, 1e3 / 60)
    }
    ,
    addEvent = document.addEventListener ? function(el, eventName, fn) {
        return el.addEventListener(eventName, fn, !1)
    }
    : function(el, eventName, fn) {
        return el.attachEvent("on" + eventName, fn)
    }
    ,
    Imager.prototype.init = function() {
        this.checkImagesNeedReplacing(this.eles),
        this.onResize && this.registerResizeEvent()
    }
    ,
    Imager.prototype.checkImagesNeedReplacing = function(images) {
        var self = this;
        this.isResizing || (this.isResizing = !0,
        images.each(function() {
            self.replaceImagesBasedOnScreenDimensions(this)
        }),
        this.isResizing = !1,
        this.onImagesReplaced(images))
    }
    ,
    Imager.prototype.replaceImagesBasedOnScreenDimensions = function(image) {
        var srcARRAY, cwidth, availableWidths = [];
        if (null != $(image).attr("data-media")) {
            var eMedia = $(image).attr("data-media");
            $(image).removeAttr("data-media"),
            eMedia = JSON.parse(eMedia),
            $.each(eMedia, function(key, value) {
                availableWidths.push(parseInt(key))
            }),
            $(image).data("width", availableWidths),
            $(image).data("media", eMedia)
        }
        (srcARRAY = $(image).data("media"))[cwidth = Imager.getClosestValue(window.innerWidth, $.extend([], $(image).data("width")))] && image.src != srcARRAY[cwidth] && (image.src = srcARRAY[cwidth])
    }
    ,
    Imager.getClosestValue = function getClosestValue(baseValue, candidates) {
        return baseValue >= candidates[0] && 1 < candidates.length && (candidates.shift(),
        getClosestValue(baseValue, candidates)),
        candidates[0]
    }
    ,
    Imager.prototype.registerResizeEvent = function() {
        var self = this;
        addEvent(window, "resize", function() {
            self.checkImagesNeedReplacing(self.eles)
        })
    }
    ,
    "object" == typeof module && "object" == typeof module.exports ? module.exports = exports = Imager : "function" == typeof define && define.amd ? define(function() {
        return Imager
    }) : "object" == typeof window && (window.Imager = Imager)
}(window, document),
ACC.instore = {
    _autoload: ["bindInStore"],
    bindInStore: function() {
        !!$("footer").data("instore") && (ACC.instore.checkLink("#dm-primary-nav li"),
        ACC.instore.checkLink(".footer__nav--links li"),
        ACC.instore.googleMapBlock())
    },
    checkLink: function(target) {
        $(target).each(function(index) {
            var link = $(this).find("a").attr("href");
            if (link) {
                var destination = link.split("/")[0];
                "http:" !== destination && "https:" !== destination || $(this).remove()
            }
        })
    },
    googleMapBlock: function() {
        $("body").on("click", ".js-store-finder-map a", function(e) {
            e.preventDefault()
        })
    }
},
ACC.langcurrency = {
    _autoload: ["bindLangCurrencySelector"],
    bindLangCurrencySelector: function() {
        $("#lang-selector").change(function() {
            $("#lang-form").submit()
        }),
        $("#currency-selector").change(function() {
            $("#currency-form").submit()
        })
    }
},
ACC.minicart = {
    _autoload: ["bindMiniCart"],
    bindMiniCart: function() {
        $(".mini-cart-container").mouseenter(function() {
            $(".dm-navigation-bag").addClass("active"),
            jQuery(".cart-remove-button").fitText()
        }).mouseleave(function() {
            $(".dm-navigation-bag").removeClass("active")
        }),
        $(document).on("click", ".cart-entry-remove-button", function(e) {
            e.preventDefault();
            var url = $(this).data("url")
              , form = $(this).data("update");
            $("#" + form).find("input[name=quantity]").val("0"),
            $.ajax({
                url: url,
                cache: !1,
                data: $("#" + form).serialize(),
                type: "POST",
                success: function(jsonData) {
                    ACC.minicart.updateMiniCartDisplay()
                }
            })
        }),
        $(document).on("click", ".js-mini-cart-close-button", function(e) {
            e.preventDefault(),
            ACC.colorbox.close()
        }),
        $(document).on("click", ".mini-cart-checkout-button", function(e) {
            ACC.common.loadingStatus(".mini-cart-checkout-button", "loading")
        }),
        $(document).on("click", ".js-giftcard-remove", function(e) {
            e.preventDefault();
            var cod = $(this).data("code");
            ACC.minicart.removeGiftCard(cod)
        })
    },
    updateMiniCartDisplay: function() {
        $(".js-mini-cart-link").data("miniCartItemsText");
        var miniCartRefreshUrl = $(".js-mini-cart-link").data("mini-cart-url");
        $.ajax({
            url: miniCartRefreshUrl,
            cache: !1,
            type: "GET",
            success: function(jsonData) {
                $(".js-mini-cart-link .bag-count").html(jsonData.miniCartCount),
                $(".mini-cart-hover").html(jsonData.miniCartHtml)
            }
        })
    },
    removeGiftCard: function(code) {
        var param = {
            giftcardId: code,
            CSRFToken: ACC.config.CSRFToken
        };
        $.post(ACC.config.sitePath + "/checkout/giftcard/remove", param, function(data) {
            ACC.checkoutaddress.reRenderCartDetails(data),
            ACC.secureacceptance.reloadSopIframe(),
            ACC.secureacceptance.checkRedeemGiftCard(),
            ACC.secureacceptance.disableOrderButton(),
            $("#placeOrderForm1 #placeOrder").length && $("#placeOrderForm1 #placeOrder").removeClass("js-gift-card-payment")
        })
    }
},
ACC.multidgrid = {
    populateAndShowGridOverlay: function(element, event) {
        event.preventDefault();
        var itemIndex = $(element).data("index")
          , gridEntries = $("#grid" + itemIndex)
          , strSubEntries = gridEntries.data("sub-entries")
          , productName = gridEntries.data("product-name")
          , firstVariantCode = strSubEntries.split(",")[0].split(":")[0]
          , targetUrl = gridEntries.data("target-url") + "?productCode=" + firstVariantCode;
        ACC.colorbox.open(productName, {
            href: targetUrl,
            className: "read-only-grid",
            close: '<span class="close-icon"></span>',
            width: window.innerWidth > parseInt(cboxOptions.maxWidth) ? cboxOptions.maxWidth : cboxOptions.width,
            height: window.innerHeight > parseInt(cboxOptions.maxHeight) ? cboxOptions.maxHeight : cboxOptions.height,
            onComplete: function() {
                $("body").addClass("offcanvas");
                var oH = $("#cboxLoadedContent").height();
                $("#cboxLoadedContent").height(oH - $("#cboxTitle").height() + "px")
            },
            onClosed: function() {
                $("body").removeClass("offcanvas")
            }
        })
    },
    populateAndShowGrid: function(element, event, readOnly) {
        var itemIndex = $(element).data("index");
        grid = $("#ajaxGrid" + itemIndex);
        var gridEntries = $("#grid" + itemIndex);
        if ($(element).toggleClass("open"),
        grid.is(":hidden"))
            if ("" == grid.html()) {
                var firstVariantCode = gridEntries.data("sub-entries").split(",")[0].split(":")[0]
                  , targetUrl = gridEntries.data("target-url");
                $.ajax({
                    url: targetUrl,
                    data: {
                        productCode: firstVariantCode
                    },
                    type: "GET",
                    success: function(data) {
                        grid.html(data),
                        grid.slideDown("slow")
                    },
                    error: function(xht, textStatus, ex) {
                        alert("Failed to get variant matrix. Error details [" + xht + ", " + textStatus + ", " + ex + "]")
                    }
                })
            } else
                grid.slideToggle("slow");
        else
            grid.slideUp()
    }
};
var oDoc = document;
ACC.navigation = {
    _autoload: ["mobileMenu", "offcanvasNavigation", "myAccountNavigation", "orderToolsNavigation", "footerLinksNavigation", "mainNavigation", "mobileNavScrolling"],
    mobileMenu: function() {
        $(".dm-navigation-ham").on("click", ".fa", function() {
            var $this = $(this);
            if ($("body").toggleClass("fixed"),
            $(".js-mainHeader").toggleClass("active"),
            $(".dm-navigation-ham .fa").toggleClass("hide"),
            $this.hasClass("fa-close")) {
                var $dmNav = $("#dm-primary-nav");
                $this.removeClass("top-menu-link"),
                $dmNav.removeClass("second-level"),
                $dmNav.find(".js-enquire-has-sub, .sub-navigation-section, .sub-navigation-list").removeClass("active"),
                $(".js-sticky-user-group").show()
            }
            var winHeight = $(window).height()
              , heaederHeight = $(".js-mainHeader").height();
            $(".js_navigation--bottom").css({
                height: winHeight - heaederHeight + 2
            }),
            $(".dm-m-search-icon.active") && ($(".dm-m-search-icon").removeClass("active"),
            $(".site-search").slideUp())
        })
    },
    offcanvasNavigation: function() {
        enquire.register("screen and (max-width:" + screenSmMax + ")", {
            match: function() {
                $(document).on("click", "#dm-primary-nav .js-enquire-has-sub .js_nav__link a", function(e) {
                    e.preventDefault();
                    var $this = $(this)
                      , $dmNav = $("#dm-primary-nav");
                    $dmNav.find(".js-enquire-has-sub").removeClass("active"),
                    $(".js-sticky-user-group").hide(),
                    $dmNav.addClass("second-level"),
                    $this.closest(".js-enquire-has-sub").addClass("active"),
                    $this.addClass("top-menu-link")
                }),
                $(document).on("click", "#dm-primary-nav .sub-navigation-section .title", function(e) {
                    e.preventDefault();
                    var $this = $(this)
                      , $dmNav = $("#dm-primary-nav");
                    $this.parent().hasClass("active") ? ($this.parent().removeClass("active"),
                    $this.next().removeClass("active")) : ($dmNav.find(".sub-navigation-section, .sub-navigation-list").removeClass("active"),
                    $this.parent().addClass("active"),
                    $this.next().addClass("active"))
                }),
                $(document).on("click", "#dm-primary-nav .js-enquire-has-sub .js_nav__link a.top-menu-link", function(e) {
                    e.preventDefault();
                    var $this = $(this)
                      , $dmNav = $("#dm-primary-nav");
                    $this.removeClass("top-menu-link"),
                    $dmNav.removeClass("second-level"),
                    $dmNav.find(".js-enquire-has-sub, .sub-navigation-section, .sub-navigation-list").removeClass("active"),
                    $(".js-sticky-user-group").show()
                })
            },
            unmatch: function() {
                var $dmNav = $("#dm-primary-nav");
                $(".js-userAccount-Links").show(),
                $dmNav.find(".js-enquire-has-sub, .sub-navigation-section, .sub-navigation-list").removeClass("active"),
                $(document).off("click", "#dm-primary-nav .js-enquire-has-sub .js_nav__link a"),
                $(document).off("click", "#dm-primary-nav .sub-navigation-section .title"),
                $(".js-mainHeader, .dm-navigation-bag").removeClass("active")
            }
        })
    },
    myAccountNavigation: function() {
        var aAcctData = []
          , sSignBtn = ""
          , sMyAccountBtn = ""
          , oMyAccountData = $(".accNavComponent")
          , oMMainNavDesktop = $(".js-secondaryNavAccount > ul");
        $(".navigation--bottom > ul.nav__links.nav__links--products");
        if (oMyAccountData)
            for (var aLinks = oMyAccountData.find("a"), i = 0; i < aLinks.length; i++)
                aAcctData.push({
                    link: aLinks[i].href,
                    text: aLinks[i].title
                });
        0 < $(".js-logged_in").length && (sMyAccountBtn += '<li class="mobile-myaccount-link"><a href="' + $(".js-logged_in a")[0].href + '">' + $(".js-logged_in a")[0].innerHTML + "</a></li>"),
        $(".liOffcanvas a") && 0 < $(".liOffcanvas a").length && (sSignBtn += sMyAccountBtn + '<li class="auto liUserSign" ><a href="' + $(".liOffcanvas a")[0].href + '">' + $(".liOffcanvas a")[0].innerHTML + "</a></li>");
        var oUserInfo = $(".nav__right ul li.logged_in");
        if (oUserInfo && 1 === oUserInfo.length) {
            var myAccountHook, sUserBtn = "";
            sUserBtn += '<li class="auto ">',
            sUserBtn += '<div class="userGroup">',
            sUserBtn += '<span class="glyphicon glyphicon-user myAcctUserIcon"></span>',
            sUserBtn += '<div class="userName">' + oUserInfo[0].innerHTML + "</div>",
            0 < aAcctData.length && (sUserBtn += '<a class="collapsed js-nav-collapse" id="signedInUserOptionsToggle" data-toggle="collapse"  data-target=".offcanvasGroup1">',
            sUserBtn += '<span class="glyphicon glyphicon-chevron-up myAcctExp"></span>',
            sUserBtn += "</a>"),
            sUserBtn += "</div>",
            $(".js-sticky-user-group").html(sUserBtn),
            $(".js-userAccount-Links").append(sSignBtn),
            $(".js-userAccount-Links").append($('<li class="auto"><div class="myAccountLinksContainer js-myAccountLinksContainer"></div></li>')),
            (myAccountHook = $('<div class="myAccountLinksHeader js-myAccount-toggle" data-toggle="collapse" data-parent=".nav__right" >' + oMyAccountData.data("title") + "</div>")).insertBefore(oMyAccountData),
            $(".myAccountLinksHeader").click(function() {
                return $(this).toggleClass("show"),
                $(".js-secondaryNavAccount").slideToggle(400),
                $(this).hasClass("show") && ($(".myCompanyLinksHeader").removeClass("show"),
                $(".js-secondaryNavCompany").slideUp(400)),
                !1
            }),
            (myAccountHook = []).push('<div class="sub-nav">'),
            myAccountHook.push('<a id="signedInUserAccountToggle" class="myAccountLinksHeader collapsed js-myAccount-toggle" data-toggle="collapse" data-target=".offcanvasGroup2">'),
            myAccountHook.push(oMyAccountData.data("title")),
            myAccountHook.push('<span class="glyphicon glyphicon-chevron-down myAcctExp"></span>'),
            myAccountHook.push("</a>"),
            myAccountHook.push("</div>"),
            $(".js-myAccountLinksContainer").append(myAccountHook.join("")),
            $(".js-myAccountLinksContainer").append($('<ul data-trigger="#signedInUserAccountToggle" class="offcanvasGroup2 offcanvasNoBorder collapse js-nav-collapse-body subNavList js-myAccount-root sub-nav"></ul>')),
            $("#signedInUserAccountToggle").click(function() {
                $(this).toggleClass("show"),
                $(".offcanvasGroup2").slideToggle(400),
                $(this).hasClass("show") ? ($(this).find("span").removeClass("glyphicon-chevron-down").addClass("glyphicon-chevron-up"),
                $("#signedInCompanyToggle").removeClass("show"),
                $("#signedInCompanyToggle").find("span").removeClass("glyphicon-chevron-up").addClass("glyphicon-chevron-down"),
                $(".offcanvasGroup3").slideUp(400)) : $(this).find("span").removeClass("glyphicon-chevron-up").addClass("glyphicon-chevron-down")
            });
            for (i = aAcctData.length - 1; 0 <= i; i--) {
                (oLink = oDoc.createElement("a")).title = aAcctData[i].text,
                oLink.href = aAcctData[i].link,
                oLink.innerHTML = aAcctData[i].text,
                (oListItem = oDoc.createElement("li")).appendChild(oLink),
                (oListItem = $(oListItem)).addClass("auto "),
                $(".js-myAccount-root").append(oListItem)
            }
        } else {
            var navButtons = sSignBtn.substring(0, sSignBtn.length - 5) + "</li>";
            $(".js-sticky-user-group").html(navButtons)
        }
        for (i = 0; i < aAcctData.length; i++) {
            var oLink, oListItem;
            (oLink = oDoc.createElement("a")).title = aAcctData[i].text,
            oLink.href = aAcctData[i].link,
            oLink.innerHTML = aAcctData[i].text,
            (oListItem = oDoc.createElement("li")).appendChild(oLink),
            (oListItem = $(oListItem)).addClass("auto col-md-4"),
            oMMainNavDesktop.get(0).appendChild(oListItem.get(0))
        }
        $(".js-secondaryNavAccount").on("shown.bs.collapse", function() {
            $(".js-secondaryNavCompany").hasClass("in") && $(".js-myCompany-toggle").click()
        }),
        $(".js-secondaryNavCompany").on("shown.bs.collapse", function() {
            $(".js-secondaryNavAccount").hasClass("in") && $(".js-myAccount-toggle").click()
        }),
        $(".js-nav-collapse-body").on("hidden.bs.collapse", function(e) {
            var target = $(e.target)
              , targetSpan = target.attr("data-trigger") + " > span";
            target.hasClass("in") ? $(targetSpan).removeClass("glyphicon-chevron-down").addClass("glyphicon-chevron-up") : $(targetSpan).removeClass("glyphicon-chevron-up").addClass("glyphicon-chevron-down")
        }),
        $(".js-nav-collapse-body").on("show.bs.collapse", function(e) {
            var target = $(e.target)
              , targetSpan = target.attr("data-trigger") + " > span";
            target.hasClass("in") ? $(targetSpan).removeClass("glyphicon-chevron-up").addClass("glyphicon-chevron-down") : $(targetSpan).removeClass("glyphicon-chevron-down").addClass("glyphicon-chevron-up")
        })
    },
    orderToolsNavigation: function() {
        $(".js-nav-order-tools").on("click", function(e) {
            $(this).toggleClass("js-nav-order-tools--active")
        })
    },
    footerLinksNavigation: function() {
        $(".footer__nav--container").on("click", "h3", function() {
            var $this = $(this)
              , $thisParent = $this.parent();
            $thisParent.toggleClass("open"),
            $thisParent.hasClass("open") ? $this.attr("aria-selected", "true").attr("aria-expanded", "true") : $this.attr("aria-selected", "false").attr("aria-expanded", "false")
        })
    },
    mainNavigation: function() {
        $("#dm-primary-nav .main-nav-link a").wrapInner("<span>")
    },
    mobileNavScrolling: function() {
        if (ACC.os.isMobile()) {
            var didScroll, navbarHeight, menuNav = ".js-mainHeader", lastScrollTop = 0;
            navbarHeight = $(menuNav).height(),
            $("body").css({
                "padding-top": navbarHeight
            }),
            $(window).scroll(function(event) {
                didScroll = !0
            }),
            setInterval(function() {
                didScroll && (!function() {
                    navbarHeight = $(menuNav).height();
                    var st = $(this).scrollTop();
                    if (Math.abs(lastScrollTop - st) <= 5)
                        return;
                    lastScrollTop < st && navbarHeight < st ? ($(menuNav).css({
                        top: -navbarHeight
                    }).removeClass("nav-down").addClass("nav-up"),
                    $("body").css({
                        "padding-top": 0
                    }),
                    $(".flyout-container").css({
                        display: "none"
                    })) : st + $(window).height() < $(document).height() && ($(menuNav).removeAttr("style").removeClass("nav-up").addClass("nav-down"),
                    $("body").css({
                        "padding-top": navbarHeight
                    }));
                    lastScrollTop = st
                }(),
                didScroll = !1)
            }, 250)
        }
    }
},
ACC.newsletter = {
    _autoload: ["bind", "checkNewsletterModal"],
    globalVar: {
        cookieName: "dm_show_newsletter",
        modal: "#newsletter-modal",
        expires: 7
    },
    bind: function() {
        $("body").on("click", ".js-subscribe-newsletter", function(e) {
            e.preventDefault();
            var form = $(this).parents("form:first")
              , $form = $("#" + form[0].id)
              , btnSub = "#" + form[0].id + " .js-subscribe-newsletter"
              , errorEmailInvalid = $form.data("error-emailinvalid")
              , errorGeneral = $form.data("error-general")
              , errorEmailEmpty = $form.data("error-emailempty")
              , msgDone = $form.data("mgs-done")
              , email = $("#" + form[0].id + " .email").blur().val();
            return ACC.common.loadingStatus(btnSub, "loading"),
            "" == email ? (ACC.overlayDrm.toastError(errorEmailEmpty),
            ACC.common.loadingStatus(btnSub, "done")) : ACC.validation.checkEmail(email) ? $.ajax({
                async: !0,
                type: "POST",
                url: $form.attr("action"),
                data: $form.serialize(),
                success: function(msg) {
                    ACC.common.loadingStatus(btnSub, "done"),
                    dataLayer.push({
                        event: "visitor interaction",
                        interaction_name: "newsletter sign up",
                        newsletter_signup_method: "website"
                    }),
                    ACC.overlayDrm.toastDone(msgDone),
                    ACC.newsletter.setupNewsletter("hide")
                },
                error: function(XMLHttpRequest, textStatus, errorThrown) {
                    ACC.common.loadingStatus(btnSub, "done"),
                    $("#newscontainer").hide(),
                    ACC.overlayDrm.toastError(errorGeneral),
                    ACC.newsletter.setupNewsletter("show")
                }
            }) : (ACC.overlayDrm.toastError(errorEmailInvalid),
            ACC.common.loadingStatus(btnSub, "done")),
            !1
        }),
        $("#newsletter-close").on("click", function() {
            ACC.newsletter.setupNewsletter("hide")
        })
    },
    checkNewsletterModal: function() {
        switch ($.cookie(ACC.newsletter.globalVar.cookieName)) {
        case "hide":
            ACC.newsletter.setupNewsletter("hide"),
            ACC.newsletter.setUpMobileHeader();
            break;
        case "show":
            ACC.newsletter.setupNewsletter("show"),
            ACC.newsletter.setUpMobileHeader();
            break;
        default:
            $(ACC.newsletter.globalVar.modal).addClass("_active"),
            ACC.newsletter.setUpMobileHeader()
        }
    },
    setupNewsletter: function(action) {
        switch (action) {
        case "show":
            $(ACC.newsletter.globalVar.modal).addClass("_active"),
            $.cookie(ACC.newsletter.globalVar.cookieName, "show", {
                expires: ACC.newsletter.globalVar.expires,
                path: "/"
            }),
            ACC.newsletter.setUpMobileHeader();
            break;
        case "hide":
            $(ACC.newsletter.globalVar.modal).removeClass("_active"),
            $.cookie(ACC.newsletter.globalVar.cookieName, "hide", {
                expires: ACC.newsletter.globalVar.expires,
                path: "/"
            }),
            ACC.newsletter.setUpMobileHeader()
        }
    },
    setUpMobileHeader: function() {
        if (ACC.os.isMobile()) {
            var headerH = $(".js-mainHeader").outerHeight();
            $("body").css({
                "padding-top": headerH
            })
        } else
            $("body").removeAttr("style");
        ACC.navigation.mobileNavScrolling()
    }
},
ACC.order = {
    _autoload: ["backToOrderHistory", "bindMultidProduct"],
    backToOrderHistory: function() {
        $(".orderBackBtn > button").on("click", function() {
            var sUrl = $(this).data("backToOrders");
            window.location = sUrl
        })
    },
    bindMultidProduct: function() {
        $(document).on("click", ".js-show-multiD-grid-in-order", function(event) {
            return ACC.multidgrid.populateAndShowGrid(this, event, !0),
            !1
        }),
        $(document).on("click", ".showMultiDGridInOrderOverlay", function(event) {
            ACC.multidgrid.populateAndShowGridOverlay(this, event)
        })
    }
},
ACC.os = {
    _autoload: ["addClass"],
    isiOS: function() {
        var isiPad = null !== navigator.userAgent.match(/iPad/i)
          , isiPhone = null !== navigator.userAgent.match(/iPhone/i)
          , isiPod = null !== navigator.userAgent.match(/iPod/i);
        if (isiPad || isiPhone || isiPod)
            return !0
    },
    isAndroid: function() {
        return /Android/i.test(navigator.userAgent)
    },
    isMobileOrTabletDevice: function() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent)
    },
    detectIE: function() {
        var ua = window.navigator.userAgent
          , msie = ua.indexOf("MSIE ");
        if (0 < msie)
            return parseInt(ua.substring(msie + 5, ua.indexOf(".", msie)), 10);
        if (0 < ua.indexOf("Trident/")) {
            var rv = ua.indexOf("rv:");
            return parseInt(ua.substring(rv + 3, ua.indexOf(".", rv)), 10)
        }
        var edge = ua.indexOf("Edge/");
        return 0 < edge && parseInt(ua.substring(edge + 5, ua.indexOf(".", edge)), 10)
    },
    isIE: function() {
        return ACC.os.detectIE() && ACC.os.detectIE() < 12
    },
    isEdge: function() {
        return 11 < ACC.os.detectIE()
    },
    isSafari: function() {
        return !!navigator.userAgent.match(/safari/i) && !navigator.userAgent.match(/chrome/i) && void 0 !== document.body.style.webkitFilter && !window.chrome
    },
    isMobile: function() {
        var userAgent = navigator.userAgent;
        return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(navigator.userAgent || navigator.vendor || window.opera) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test((userAgent || navigator.vendor || window.opera).substr(0, 4))
    },
    isFF: function() {
        return !!navigator.userAgent.match(/firefox/i)
    },
    addClass: function() {
        var isiOS = ACC.os.isiOS() ? " ios" : ""
          , isAndroid = ACC.os.isAndroid() ? " android" : ""
          , isMobileOrTabletDevice = ACC.os.isMobileOrTabletDevice() ? " mobile-or-tablet" : ""
          , isIE = ACC.os.isIE() ? " ie" : ""
          , isEdge = ACC.os.isEdge() ? " edge" : ""
          , isSafari = ACC.os.isSafari() ? " safari" : ""
          , isFF = ACC.os.isFF() ? " firefox" : ""
          , isMobile = ACC.os.isMobile() ? " mobile" : "";
        $("html").addClass(isiOS + isAndroid + isMobileOrTabletDevice + isIE + isSafari + isEdge + isFF + isMobile)
    }
};
var htmlVideoTemp = {};
ACC.overlayDrm = {
    _autoload: ["openVideo", "bindClick", "playVideo", "resize", "setupVideoOverlay"],
    bindClick: function() {
        $(document).on("click", ".js-overlay__close", function(e) {
            e.preventDefault();
            var overlayId = $(this).attr("href");
            ACC.overlayDrm.close(overlayId)
        }),
        ACC.overlayDrm.closeColorBoxTC()
    },
    playVideo: function() {
        $(document).on("click", ".video-overlay__action", function(e) {
            e.preventDefault();
            var overlayId = $(this).attr("href");
            ($(".video-overlay__cover").addClass("hidden"),
            ACC.os.isMobileOrTabletDevice()) || plyr.get(overlayId + " .plyr")[0].play()
        })
    },
    openVideo: function() {
        $(document).on("click", ".js-open-video", function(e) {
            e.preventDefault();
            var overlayId = $(this).attr("href");
            $(overlayId).removeClass("hidden"),
            ACC.overlayDrm.setUp(overlayId);
            plyr.setup(overlayId + " .item > div", {
                controls: ["play-large", "fullscreen"],
                showPosterOnEnd: !0,
                fullscreen: {
                    enabled: !0,
                    fallback: !0
                }
            })
        })
    },
    open: function(overlayId) {
        $(overlayId).removeClass("hidden"),
        ACC.os.isMobile() && $("body").addClass("block-background"),
        ACC.overlayDrm.setUp(overlayId)
    },
    close: function(overlayId) {
        if ($(".video-overlay__cover").length) {
            if (ACC.os.isMobileOrTabletDevice())
                $(overlayId + " .item > div").remove(),
                $(overlayId + " .item").append(htmlVideoTemp[overlayId]);
            else {
                var players = plyr.get(overlayId + " .item .plyr");
                players[0].isPaused() || players[0].stop()
            }
            $(".video-overlay__cover").removeClass("hidden")
        }
        $(overlayId).addClass("hidden"),
        ACC.os.isMobile() && $("body").removeClass("block-background"),
        ACC.overlayDrm.destroyOverlay(overlayId)
    },
    setUp: function(id) {
        var codeTitle = ""
          , codeHtmlAjax = ""
          , popupWrapper = ".js-overlay__wrapper"
          , codeBtnClose = "";
        setTimeout(function() {
            if ($(id).data("title") && (codeTitle = '<div class="js-overlay__title">' + $(id).attr("data-title") + "</div>"),
            $(id).data("hide-close") || (codeBtnClose = '<a href="' + id + '" class="js-overlay__close"><span class="close-icon"></span></a>'),
            $(id).data("ajax")) {
                var ajaxUrl = $(id).data("ajax");
                $.ajax({
                    url: ajaxUrl,
                    type: "GET",
                    success: function(data) {
                        $(id + " " + popupWrapper).addClass("active"),
                        codeHtmlAjax = data,
                        $(id + " .js-overlay__content-scroll").prepend('<div class="js-overlay__content-ajax">' + codeHtmlAjax + "</div>")
                    },
                    error: function() {
                        alert("connection error")
                    }
                })
            } else
                $(id + " " + popupWrapper).addClass("active");
            var boxWidth = $(id + " " + popupWrapper).width()
              , boxHeight = $(id + " " + popupWrapper).height()
              , posLeft = parseInt(($(window).width() - boxWidth) / 2)
              , posTop = parseInt(($(window).height() - boxHeight) / 2);
            posTop = posTop < 0 ? 0 : posTop,
            $(id).append('<div id="toast-wrapper-overlay"></div><div class="js-overlay__background"></div>'),
            $(id + " " + popupWrapper).prepend(codeBtnClose + codeTitle).css({
                top: posTop,
                left: posLeft
            }),
            0 == posTop ? $(".video-overlay__wrapper .js-overlay__close").css({
                top: 10
            }) : $(".video-overlay__wrapper .js-overlay__close").removeAttr("style")
        }, 0)
    },
    destroyOverlay: function(id) {
        $(id + " .js-overlay__background").remove(),
        $(id + " #toast-wrapper-overlay").remove(),
        $(id + " .js-overlay__content-ajax").remove(),
        $(id + " .js-overlay__close").remove(),
        $(id + " .js-overlay__title").remove(),
        $(id + " .js-overlay__wrapper").removeAttr("style").removeClass("active")
    },
    resize: function() {
        var btnClose = ".js-overlay__close";
        $(window).resize(function() {
            if (0 < $(btnClose).length) {
                var id = $(btnClose).attr("href")
                  , boxWidth = $(id + " .js-overlay__wrapper").width()
                  , boxHeight = $(id + " .js-overlay__wrapper").height()
                  , posLeft = parseInt(($(window).width() - boxWidth) / 2)
                  , posTop = parseInt(($(window).height() - boxHeight) / 2);
                0 == posTop ? $(".video-overlay__wrapper " + btnClose).css({
                    top: 10
                }) : $(".video-overlay__wrapper " + btnClose).removeAttr("style"),
                $(id + " .js-overlay__wrapper").css({
                    top: posTop,
                    left: posLeft
                })
            }
        })
    },
    toastError: function(message) {
        var toast = $("#toast-wrapper");
        toast.offset().top - $(document).scrollTop() < 0 ? toast.addClass("pos-fix") : toast.removeClass("pos-fix"),
        toast.addClass("error-toast").text(message),
        setTimeout(function() {
            toast.removeClass("error-toast").text("")
        }, 5e3)
    },
    toastDone: function(message) {
        var toast = $("#toast-wrapper");
        toast.offset().top - $(document).scrollTop() < 0 ? toast.addClass("pos-fix") : toast.removeClass("pos-fix"),
        toast.addClass("done-toast").text(message),
        setTimeout(function() {
            toast.removeClass("done-toast").text("")
        }, 5e3)
    },
    setupVideoOverlay: function() {
        $(".js-open-video").each(function(index) {
            var overlayId = $(this).attr("href");
            htmlVideoTemp[overlayId] = $(overlayId + " .item").html()
        })
    },
    closeColorBoxTC: function() {
        $("body.page-multiStepCheckoutSummaryPage").on("click", "#cboxLoadedContent .btn.btn-primary.btn-block", function(e) {
            e.preventDefault(),
            $.colorbox.close()
        })
    }
},
ACC.paginationsort = {
    downUpKeysPressed: !1,
    bindAll: function() {
        this.bindPaginationSort()
    },
    bindPaginationSort: function() {
        with (ACC.paginationsort)
            bindSortForm($("#sortForm1")),
            bindSortForm($("#sortForm2"))
    },
    bindSortForm: function(sortForm) {
        sortForm.change(function() {
            ACC.paginationsort.downUpPressed || this.submit(),
            ACC.paginationsort.downUpPressed = !1
        })
    },
    sortFormIEFix: function(sortOptions, selectedOption) {
        sortOptions.keydown(function(e) {
            38 === e.keyCode || 40 === e.keyCode ? ACC.paginationsort.downUpPressed = !0 : 13 === e.keyCode && selectedOption !== $(this).val() ? $(this).parent().submit() : ACC.paginationsort.downUpPressed = !1
        })
    }
},
$(document).ready(function() {
    ACC.paginationsort.bindAll()
}),
ACC.payment = {
    activateSavedPaymentButton: function() {
        $(document).on("click", ".js-saved-payments", function(e) {
            e.preventDefault();
            var title = $("#savedpaymentstitle").html();
            $.colorbox({
                href: "#savedpaymentsbody",
                inline: !0,
                maxWidth: "100%",
                opacity: .7,
                width: "320px",
                title: title,
                close: '<span class="close-icon"></span>',
                onComplete: function() {}
            })
        })
    },
    bindPaymentCardTypeSelect: function() {
        ACC.payment.filterCardInformationDisplayed(),
        $("#card_cardType").change(function() {
            "024" == $(this).val() ? $("#startDate, #issueNum").show() : $("#startDate, #issueNum").hide()
        })
    },
    filterCardInformationDisplayed: function() {
        "024" == $("#card_cardType").val() ? $("#startDate, #issueNum").show() : $("#startDate, #issueNum").hide()
    }
},
$(document).ready(function() {
    with (ACC.payment)
        activateSavedPaymentButton(),
        bindPaymentCardTypeSelect()
}),
ACC.paymentDetails = {
    _autoload: ["showRemovePaymentDetailsConfirmation"],
    showRemovePaymentDetailsConfirmation: function() {
        $(document).on("click", ".removePaymentDetailsButton", function() {
            var paymentId = $(this).data("paymentId")
              , popupTitle = $(this).data("popupTitle");
            ACC.colorbox.open(popupTitle, {
                inline: !0,
                href: "#popup_confirm_payment_removal_" + paymentId,
                onComplete: function() {
                    $(this).colorbox.resize()
                }
            })
        })
    }
},
ACC.pickupinstore = {
    _autoload: ["bindClickPickupInStoreButton", "bindPickupButton", "bindPickupClose", "bindPickupInStoreSearch"],
    storeId: "",
    unbindPickupPaginationResults: function() {
        $(document).off("click", "#colorbox .js-pickup-store-pager-prev"),
        $(document).off("click", "#colorbox .js-pickup-store-pager-next")
    },
    bindPickupPaginationResults: function() {
        var listHeight = $("#colorbox .js-pickup-store-list").height()
          , $listitems = $("#colorbox .js-pickup-store-list > li")
          , listItemHeight = $listitems.height()
          , totalCount = $listitems.length
          , curPos = 0;
        function checkPosition() {
            var curPage = Math.ceil(curPos / (5 * listItemHeight) * -1) + 1;
            $("#colorbox .js-pickup-store-pager-item-from").html(5 * curPage - 4);
            var tocount = totalCount < 5 * curPage ? totalCount : 5 * curPage;
            5 * curPage - 4 == 1 ? $("#colorbox .js-pickup-store-pager-prev").hide() : $("#colorbox .js-pickup-store-pager-prev").show(),
            totalCount <= 5 * curPage ? $("#colorbox .js-pickup-store-pager-next").hide() : $("#colorbox .js-pickup-store-pager-next").show(),
            $("#colorbox .js-pickup-store-pager-item-to").html(tocount)
        }
        $("#colorbox .js-pickup-store-pager-item-all").html(totalCount),
        $("#colorbox .store-navigation-pager").show(),
        checkPosition(),
        $(document).on("click", "#colorbox .js-pickup-store-pager-prev", function(e) {
            e.preventDefault(),
            $listitems.css("transform", "translateY(" + (curPos + listHeight) + "px)"),
            curPos += listHeight,
            checkPosition()
        }),
        $(document).on("click", "#colorbox .js-pickup-store-pager-next", function(e) {
            e.preventDefault(),
            $listitems.css("transform", "translateY(" + (curPos - listHeight) + "px)"),
            curPos -= listHeight,
            checkPosition()
        })
    },
    bindPickupInStoreQuantity: function() {
        $(".pdpPickupQtyPlus").click(function(e) {
            e.preventDefault();
            var inputQty = $(".js-add-pickup-cart #pdpPickupAddtoCartInput")
              , currentVal = parseInt(inputQty.val())
              , maxVal = inputQty.data("max");
            !isNaN(currentVal) && currentVal < maxVal && (inputQty.val(currentVal + 1),
            inputQty.change())
        }),
        $(".pdpPickupQtyMinus").click(function(e) {
            e.preventDefault();
            var inputQty = $(".js-add-pickup-cart #pdpPickupAddtoCartInput")
              , currentVal = parseInt(inputQty.val())
              , minVal = inputQty.data("min");
            !isNaN(currentVal) && minVal < currentVal && (inputQty.val(currentVal - 1),
            inputQty.change())
        }),
        $("body").on("keyup", ".js-add-pickup-cart #pdpPickupAddtoCartInput", function(event) {
            var input = $(event.target);
            input.val(this.value.match(/[0-9]*/));
            input.val()
        })
    },
    bindPickupInStoreSearch: function() {
        $(document).on("click", "#pickupstore_location_search_button", function(e) {
            return ACC.pickupinstore.locationSearchSubmit($("#locationForSearch").val(), $("#atCartPage").val(), $("#entryNumber").val(), $(this).parents("form").attr("action")),
            !1
        }),
        $(document).on("keypress", "#locationForSearch", function(e) {
            if (13 === e.keyCode)
                return e.preventDefault(),
                ACC.pickupinstore.locationSearchSubmit($("#locationForSearch").val(), $("#atCartPage").val(), $("input.entryNumber").val(), $(this).parents("form").attr("action")),
                !1
        })
    },
    bindPickupHereInStoreButtonClick: function() {
        $(document).on("click", ".pickup_add_to_bag_instore_button", function(e) {
            $(this).prev(".hiddenPickupQty").val($("#pickupQty").val())
        }),
        $(document).on("click", ".pickup_here_instore_button", function(e) {
            $(this).prev(".hiddenPickupQty").val($("#pickupQty").val()),
            ACC.colorbox.close()
        })
    },
    locationSearchSubmit: function(location, cartPage, entryNumber, productCode, latitude, longitude) {
        $("#colorbox .js-add-to-cart-for-pickup-popup, #colorbox .js-qty-selector-minus, #colorbox .js-qty-selector-input, #colorbox .js-qty-selector-plus").attr("disabled", "disabled"),
        $.ajax({
            url: productCode,
            data: {
                locationQuery: location,
                cartPage: cartPage,
                entryNumber: entryNumber,
                latitude: latitude,
                longitude: longitude
            },
            type: "post",
            success: function(response) {
                ACC.pickupinstore.refreshPickupInStoreColumn(response)
            }
        })
    },
    createListItemHtml: function(data, id) {
        var item = "";
        return item += '<li class="pickup-store-list-entry">',
        item += '<input type="radio" name="storeNamePost" value="' + data.displayName + '" id="pickup-entry-' + id + '" class="js-pickup-store-input" data-id="' + id + '">',
        item += '<label for="pickup-entry-' + id + '" class="js-select-store-label">',
        item += '<span class="pickup-store-info">',
        item += '<span class="pickup-store-list-entry-name">' + data.displayName + "</span>",
        item += '<span class="pickup-store-list-entry-address">' + data.line1 + " " + data.line2 + "</span>",
        item += '<span class="pickup-store-list-entry-city">' + data.town + "</span>",
        item += "</span>",
        item += '<span class="store-availability">',
        item += '<span class="available">' + data.formattedDistance + "<br>" + data.stockPickup + "</span>",
        item += "</span>",
        item += "</label>",
        item += "</li>"
    },
    refreshPickupInStoreColumn: function(data) {
        data = $.parseJSON(data);
        var listitems = "";
        for ($("#colorbox .js-pickup-component").data("data", data),
        i = 0; i < data.data.length; i++)
            listitems += ACC.pickupinstore.createListItemHtml(data.data[i], i);
        $("#colorbox .js-pickup-store-list").html(listitems),
        ACC.pickupinstore.unbindPickupPaginationResults(),
        ACC.pickupinstore.bindPickupPaginationResults();
        var firstInput = $("#colorbox .js-pickup-store-input")[0];
        $(firstInput).click(),
        $("#colorbox .js-add-to-cart-for-pickup-popup, #colorbox .js-qty-selector-minus, #colorbox .js-qty-selector-input, #colorbox .js-qty-selector-plus").removeAttr("disabled")
    },
    bindClickPickupInStoreButton: function() {
        $(document).on("click", ".js-pickup-in-store-button", function(e) {
            e.preventDefault();
            var ele = $(this)
              , productId = "pickupModal_" + $(this).attr("id")
              , productIdNUM = $(this).attr("id");
            productIdNUM = (productIdNUM = productIdNUM.split("_"))[1];
            var boxContent = $("#popup_store_pickup_form > #pickupModal").clone()
              , titleHeader = $("#pickupTitle > .pickup-header").html();
            ACC.colorbox.open(titleHeader, {
                html: boxContent,
                width: "960px",
                onComplete: function() {
                    $("#colorbox .js-add-to-cart-for-pickup-popup, #colorbox .js-qty-selector-minus, #colorbox .js-qty-selector-input, #colorbox .js-qty-selector-plus").attr("disabled", "disabled"),
                    boxContent.show(),
                    ACC.pickupinstore.pickupStorePager();
                    $("#colorbox .js-pickup-tabs").accessibleTabs({
                        tabhead: ".tabhead",
                        tabbody: ".tabbody",
                        fx: "show",
                        fxspeed: 0,
                        currentClass: "active",
                        autoAnchor: !0,
                        cssClassAvailable: !0
                    });
                    $("#colorbox #pickupModal *").each(function() {
                        null != $(this).attr("data-id") && ($(this).attr("id", $(this).attr("data-id")),
                        $(this).removeAttr("data-id"))
                    }),
                    $("#colorbox input#locationForSearch").focus(),
                    $("#colorbox #pickupModal").attr("id", productId),
                    $("#colorbox #" + productId + " .thumb").html(ele.data("img")),
                    $("#colorbox #" + productId + " .js-pickup-product-price").html(ele.data("productcart"));
                    var variants = ele.data("productcartVariants")
                      , variantsOut = "";
                    $.each(variants, function(key, value) {
                        variantsOut += "<span>" + value + "</span>"
                    }),
                    $("#colorbox #" + productId + " .js-pickup-product-variants").html(variantsOut),
                    $("#colorbox  #" + productId + " .js-pickup-product-info").text(ele.data("productname")),
                    $("#colorbox #" + productId + " form.searchPOSForm").attr("action", ele.data("actionurl")),
                    $("#colorbox #" + productId + " form.searchPOSForm").attr("id", "pickup_in_store_search_form_product_" + productIdNUM),
                    $("#colorbox #" + productId + " #pdpPickupAddtoCartInput").attr("value", void 0 !== $("#pdpPickupAddtoCartInput").val() ? $("#pdpPickupAddtoCartInput").val() : ele.data("value")),
                    $("#colorbox #" + productId + " input#entryNumber").attr("value", ele.data("entrynumber")),
                    $("#colorbox #" + productId + " input#atCartPage").attr("value", ele.data("cartpage")),
                    navigator.geolocation && navigator.geolocation.getCurrentPosition(function(position) {
                        ACC.pickupinstore.locationSearchSubmit("", $("#atCartPage").val(), ele.data("entrynumber"), ele.data("actionurl"), position.coords.latitude, position.coords.longitude)
                    }, function(error) {
                        console.log("An error occurred... The error code and message are: " + error.code + "/" + error.message)
                    }),
                    ACC.product.bindToAddToCartStorePickUpForm()
                }
            })
        })
    },
    pickupStorePager: function() {
        $(document).on("change", "#colorbox .js-pickup-store-input", function(e) {
            e.preventDefault(),
            $("#colorbox .js-pickup-tabs li.first a").click();
            var storeData = $("#colorbox .js-pickup-component").data("data");
            storeData = storeData.data;
            var storeId = $(this).data("id")
              , $ele = $("#colorbox .display-details");
            $.each(storeData[storeId], function(key, value) {
                if ("url" == key)
                    "" != value ? $ele.find(".js-store-image").html('<img src="' + value + '" alt="" />') : $ele.find(".js-store-image").html("");
                else if ("productcode" == key)
                    $ele.find(".js-store-productcode").val(value);
                else if ("openings" == key)
                    if ("" != value) {
                        var $oele = $ele.find(".js-store-" + key)
                          , openings = "";
                        $.each(value, function(key2, value2) {
                            openings += "<dt>" + key2 + "</dt>",
                            openings += "<dd>" + value2 + "</dd>"
                        }),
                        $oele.html(openings)
                    } else
                        $ele.find(".js-store-" + key).html("");
                else
                    "specialOpenings" == key || ("" != value ? $ele.find(".js-store-" + key).html(value) : $ele.find(".js-store-" + key).html(""))
            }),
            $(document).one("click", "#colorbox .js-pickup-map-tab", function() {
                ACC.pickupinstore.storeId = storeData[storeId],
                ACC.global.addGoogleMapsApi("ACC.pickupinstore.drawMap")
            });
            e = $("#colorbox .pickup-store-list-entry input:checked");
            if ($("#add_to_cart_storepickup_form .js-store-id").attr("id", e.attr("id")),
            $("#add_to_cart_storepickup_form .js-store-id").attr("name", e.attr("name")),
            $("#add_to_cart_storepickup_form .js-store-id").val(e.val()),
            0 < storeData[storeId].stockLevel || "" == storeData[storeId].stockLevel) {
                var input = $("#add_to_cart_storepickup_form .js-qty-selector-input");
                input.data("max", storeData[storeId].stockLevel),
                ACC.productDetail.checkQtySelector(input, "reset"),
                $("#add_to_cart_storepickup_form").show()
            } else
                $("#add_to_cart_storepickup_form").hide()
        }),
        $(document).on("click", ".js-select-store-label", function(e) {
            $("#colorbox .js-pickup-component").addClass("show-store"),
            $("#colorbox #cboxTitle .headline-inner").addClass("hidden-xs hidden-sm"),
            $("#colorbox #cboxTitle .back-to-storelist").removeClass("hidden-xs hidden-sm")
        }),
        $(document).on("click", ".js-back-to-storelist", function(e) {
            $("#colorbox .js-pickup-component").removeClass("show-store"),
            $("#colorbox #cboxTitle .headline-inner").removeClass("hidden-xs hidden-sm"),
            $("#colorbox #cboxTitle .back-to-storelist").addClass("hidden-xs hidden-sm")
        })
    },
    bindPickupButton: function() {
        $(document).on("click", ".js-pickup-button", function(e) {
            e.preventDefault(),
            $e = $(this).parent().nextAll(".js-inline-layer"),
            $e.addClass("open");
            var h = $e.height();
            $e.removeClass("open"),
            $e.animate({
                height: h
            })
        })
    },
    bindPickupClose: function() {
        $(document).on("click", ".js-close-inline-layer", function(e) {
            e.preventDefault(),
            $e = $(this).parents(".js-inline-layer"),
            $e.animate({
                height: 0
            })
        })
    },
    checkIfPointOfServiceIsEmpty: function(cartEntryDeliveryModeForm) {
        return !cartEntryDeliveryModeForm.find(".pointOfServiceName").text().trim().length
    },
    validatePickupinStoreCartEntires: function() {
        var validationErrors = !1;
        return $("form.cartEntryShippingModeForm").each(function() {
            var formid = "#" + $(this).attr("id");
            $(formid + " input[value=pickUp][checked]").length && ACC.pickupinstore.checkIfPointOfServiceIsEmpty($(this)) && ($(this).addClass("shipError"),
            validationErrors = !0)
        }),
        validationErrors && ($("div#noStoreSelected").show().focus(),
        $(window).scrollTop(0)),
        validationErrors
    },
    drawMap: function() {
        if (storeInformation = ACC.pickupinstore.storeId,
        0 < $("#colorbox .js-map-canvas").length) {
            $("#colorbox .js-map-canvas").attr("id", "pickup-map");
            var centerPoint = new google.maps.LatLng(storeInformation.storeLatitude,storeInformation.storeLongitude)
              , mapOptions = {
                zoom: 13,
                zoomControl: !0,
                panControl: !0,
                streetViewControl: !1,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                center: centerPoint
            }
              , map = new google.maps.Map(document.getElementById("pickup-map"),mapOptions)
              , marker = new google.maps.Marker({
                position: new google.maps.LatLng(storeInformation.storeLatitude,storeInformation.storeLongitude),
                map: map,
                title: storeInformation.name,
                icon: "https://maps.google.com/mapfiles/markerA.png"
            })
              , infowindow = new google.maps.InfoWindow({
                content: storeInformation.name,
                disableAutoPan: !0
            });
            google.maps.event.addListener(marker, "click", function() {
                infowindow.open(map, marker)
            })
        }
    }
},
ACC.product = {
    _autoload: ["bindToAddToCartForm", "enableStorePickupButton", "enableVariantSelectors", "bindFacets", "bindBackInStock"],
    bindFacets: function() {
        $(document).on("click", ".js-show-facets", function(e) {
            e.preventDefault();
            var selectRefinementsTitle = $(this).data("selectRefinementsTitle");
            $(".js-dm-facet-minus").hide(),
            $(".js-dm-facet-plus").show();
            $(document).width(),
            $(document).height();
            ACC.colorbox.open(selectRefinementsTitle, {
                href: ".js-product-facet",
                inline: !0,
                fixed: !0,
                top: 0,
                left: 0,
                width: "100%",
                height: "100%",
                reposition: !1,
                onComplete: function() {
                    ACC.colorbox.fullScreen(),
                    $(document).on("click", ".js-product-facet .js-facet-name", function(e) {
                        e.preventDefault(),
                        $(this).parents(".js-facet").hasClass("active") ? $(this).parents(".js-facet").removeClass("active") : ($(".js-product-facet .js-facet").removeClass("active"),
                        $(this).parents(".js-facet").addClass("active"))
                    })
                },
                onClosed: function() {
                    $("body").removeAttr("style"),
                    $(document).off("click", ".js-product-facet .js-facet-name")
                }
            })
        }),
        enquire.register("screen and (min-width:" + screenSmMax + ")", function() {
            $("#cboxClose").click()
        }),
        $(".product-grid-left-refinements-component").on("click", ".facet__name", function(e) {
            var $this = $(this);
            $this.toggleClass("open closed"),
            $this.closest(".js-facet").find(".js-facet-values").slideToggle(200)
        })
    },
    enableAddToCartButton: function() {
        $(".js-enable-btn").each(function() {
            $(this).hasClass("outOfStock") || $(this).hasClass("out-of-stock") || $(this).prop("disabled", !1)
        })
    },
    enableVariantSelectors: function() {
        $(".variant-select").prop("disabled", !1)
    },
    bindToAddToCartForm: function() {
        $(".add_to_cart_form").ajaxForm({
            beforeSubmit: ACC.product.showRequest,
            success: ACC.product.displayAddToCartPopup
        }),
        setTimeout(function() {
            $ajaxCallEvent = !0
        }, 2e3)
    },
    showRequest: function(arr, $form, options) {
        return $ajaxCallEvent ? (ACC.common.loadingStatus("#addToCartButton", "loading"),
        !($ajaxCallEvent = !1)) : ($("#addToCartButton").addClass("disabled"),
        !1)
    },
    bindToAddToCartStorePickUpForm: function() {
        $("#colorbox #add_to_cart_storepickup_form").ajaxForm({
            success: ACC.product.displayAddToCartPopup
        })
    },
    bindBackInStock: function() {
        $(".js-stock-notify-me").on("click", function(e) {
            var $stockPanel = $(this).closest(".js-back-instock-panel")
              , productItem = $stockPanel.find(".selected").children()
              , productLabel = productItem.text()
              , product = productItem.data("sku-code")
              , email = $stockPanel.find("#stockEmail").val();
            $stockPanel.find(".email-me__form").removeClass("_success"),
            ACC.product.validationBackInStock() && $.ajax({
                url: ACC.config.sitePath + "/stock-notification/register-interest",
                async: !1,
                dataType: "json",
                type: "POST",
                data: {
                    skuId: product,
                    email: email
                },
                success: function(result) {
                    if ("OK" === result.status) {
                        $stockPanel.find(".email-me__form").addClass("_success");
                        var message = (message = (message = $(".email-me__success--msg").data("msg")).replace("#size#", productLabel)).replace("#email#", email);
                        $(".email-me__success--msg").html(message),
                        $(".js-stock-notify-me").addClass("disabled")
                    } else
                        console.log(result.errorMessage)
                },
                error: function() {
                    ACC.overlayDrm.toastError("Sorry, unexpected error."),
                    setTimeout(function() {
                        window.location = ACC.config.sitePath + "/cart"
                    }, 4e3)
                }
            })
        }),
        ACC.product.selectSizeBackInStock(),
        $(".email-me__input--value").on("focusout", function() {
            ACC.product.validationBackInStock()
        }),
        $("body").on("click", "#back-instock-panel-default .js-overlay__close", function() {
            ACC.product.resetBackInStock(),
            $(".email-me__input--value").val("")
        }),
        $("body").on("click", "#back-instock-panel-default .js-reset-email", function() {
            ACC.product.resetEmailBackInStock(),
            $(".email-me__input--value").val("")
        })
    },
    enableStorePickupButton: function() {
        $(".js-pickup-in-store-button").prop("disabled", !1)
    },
    displayAddToCartPopup: function(cartResult, statusText, xhr, formElement) {
        if (ACC.common.loadingStatus("#addToCartButton", "done"),
        null == cartResult.errorMessage) {
            $ajaxCallEvent = !0,
            $("#addToCartLayer").remove(),
            "function" == typeof ACC.minicart.updateMiniCartDisplay && ACC.minicart.updateMiniCartDisplay();
            var titleHeader = $("#addToCartTitle").html();
            ACC.colorbox.open(titleHeader, {
                html: cartResult.addToCartLayer,
                width: "460px"
            });
            var productCode = $("[name=productCodePost]", formElement).val()
              , quantityField = $("[name=qty]", formElement).val()
              , quantity = 1;
            null != quantityField && (quantity = quantityField);
            var cartAnalyticsData = cartResult.cartAnalyticsData
              , cartData = {
                cartCode: cartAnalyticsData.cartCode,
                productCode: productCode,
                quantity: quantity,
                productPrice: cartAnalyticsData.productPostPrice,
                productName: cartAnalyticsData.productName
            };
            ACC.track.trackAddToCart(productCode, quantity, cartData)
        } else
            ACC.overlayDrm.toastError(cartResult.errorMessage)
    },
    selectSizeBackInStock: function() {
        $(".js-facet-list-emailme a").on("click", function() {
            $(".js-facet-list-emailme li").removeClass("selected"),
            $(this).parent().addClass("selected"),
            ACC.product.validationBackInStock()
        })
    },
    validationBackInStock: function() {
        var isValid = !1
          , $stockPanel = $(".js-back-instock-panel")
          , product = $stockPanel.find(".selected").children().data("sku-code")
          , email = $stockPanel.find("#stockEmail").val()
          , sizeForm = ".email-me__sizes"
          , emailForm = ".email-me__input";
        return ACC.product.resetEmailBackInStock(),
        ACC.validation.checkEmail(email) ? $(emailForm).addClass("has-ok").removeClass("has-error") : $(emailForm).removeClass("has-ok").addClass("has-error"),
        $(emailForm).append('<div class="js-reset-email">&times;</div>'),
        product ? $(sizeForm).removeClass("has-error") : $(sizeForm).addClass("has-error"),
        $(emailForm).hasClass("has-error") || $(sizeForm).hasClass("has-error") ? (isValid = !1,
        $(".js-stock-notify-me").addClass("disabled")) : (isValid = !0,
        $(".js-stock-notify-me").removeClass("disabled")),
        isValid
    },
    resetBackInStock: function() {
        var sizeForm = ".email-me__sizes";
        $(sizeForm).removeClass("has-error"),
        $(sizeForm).hasClass("is-single") || $(sizeForm + " li").removeClass("selected"),
        $(".email-me__form").removeClass("_success"),
        $(".email-me__form").removeClass("_success"),
        $(".js-stock-notify-me").addClass("disabled"),
        ACC.product.resetEmailBackInStock()
    },
    resetEmailBackInStock: function() {
        $(".email-me__input").removeClass("has-ok").removeClass("has-error"),
        $(".email-me__input .js-reset-email").remove()
    }
},
$(document).ready(function() {
    $ajaxCallEvent = !0,
    ACC.product.enableAddToCartButton()
});
var imgZoomItems = []
  , isImgZoomItemsLoad = !1;
ACC.productDetail = {
    _autoload: ["initPageEvents", "bindVariantOptions", "setupZoomItems", "setUpCarousel", "initSize", "selectSize"],
    checkQtySelector: function(self, mode) {
        var input = $(self).parents(".js-qty-selector").find(".js-qty-selector-input")
          , inputVal = parseInt(input.val())
          , max = input.data("max")
          , minusBtn = $(self).parents(".js-qty-selector").find(".js-qty-selector-minus")
          , plusBtn = $(self).parents(".js-qty-selector").find(".js-qty-selector-plus");
        $(self).parents(".js-qty-selector").find(".btn").removeAttr("disabled"),
        "minus" == mode ? 1 != inputVal ? (ACC.productDetail.updateQtyValue(self, inputVal - 1),
        inputVal - 1 == 1 && minusBtn.attr("disabled", "disabled")) : minusBtn.attr("disabled", "disabled") : "reset" == mode ? ACC.productDetail.updateQtyValue(self, 1) : "plus" == mode ? "FORCE_IN_STOCK" == max ? ACC.productDetail.updateQtyValue(self, inputVal + 1) : inputVal <= max ? (ACC.productDetail.updateQtyValue(self, inputVal + 1),
        inputVal + 1 == max && plusBtn.attr("disabled", "disabled")) : plusBtn.attr("disabled", "disabled") : "input" == mode ? 1 == inputVal ? minusBtn.attr("disabled", "disabled") : "FORCE_IN_STOCK" == max && 0 < inputVal ? ACC.productDetail.updateQtyValue(self, inputVal) : inputVal == max ? plusBtn.attr("disabled", "disabled") : inputVal < 1 ? (ACC.productDetail.updateQtyValue(self, 1),
        minusBtn.attr("disabled", "disabled")) : max < inputVal && (ACC.productDetail.updateQtyValue(self, max),
        plusBtn.attr("disabled", "disabled")) : "focusout" == mode && (isNaN(inputVal) ? (ACC.productDetail.updateQtyValue(self, 1),
        minusBtn.attr("disabled", "disabled")) : max <= inputVal && plusBtn.attr("disabled", "disabled"))
    },
    updateQtyValue: function(self, value) {
        var input = $(self).parents(".js-qty-selector").find(".js-qty-selector-input")
          , addtocartQty = $(self).parents(".addtocart-component").find("#addToCartForm").find(".js-qty-selector-input")
          , configureQty = $(self).parents(".addtocart-component").find("#configureForm").find(".js-qty-selector-input");
        input.val(value),
        addtocartQty.val(value),
        configureQty.val(value)
    },
    initPageEvents: function() {
        $("#Size").change(function() {
            changeOnVariantOptionSelection($("#Size option:selected"))
        }),
        $("#sizeSelector .product-size").click(function() {
            $("#sizeSelector li.selected").removeClass("selected");
            var purchasable = $(this).data("sku-purchasable")
              , skuCode = $(this).data("sku-code");
            purchasable ? ($(this).parent().addClass("selected"),
            $("#addToCartForm [name=productCodePost]").val(skuCode),
            $("#addToCartForm [name=productLabel]").val($(this).data("label")),
            $("#outOfStockButton").hide(),
            $("#addToCartButton").show()) : ($("#outOfStockButton").show(),
            $("#addToCartButton").hide()),
            $("#outOfStockButton").removeClass("hidden"),
            $("#addToCartButton").removeClass("btn-disable")
        });
        var anyPurchasable = !1;
        function changeOnVariantOptionSelection(optionSelected) {
            window.location.href = optionSelected.attr("value")
        }
        $("#sizeSelector .product-size").each(function() {
            isPurchasable = $(this).hasClass("stock-outStock"),
            isPurchasable || (anyPurchasable = !0)
        }),
        anyPurchasable || ($("#outOfStockButton").removeClass("hidden"),
        $("#addToCartButton").hide()),
        $("#variant").change(function() {
            changeOnVariantOptionSelection($("#variant option:selected"))
        }),
        $(".selectPriority").change(function() {
            window.location.href = $(this[this.selectedIndex]).val()
        }),
        $(document).on("click", ".js-zoom-img a.link-active", function(e) {
            var indexValAr = e.target.dataset.pid.split("-");
            ACC.productDetail.openPhotoSwipe(indexValAr[1] - 1)
        }),
        $(document).on("click", ".pdp-zoom-icon", function(e) {
            $(".js-zoom-img.slick-current a.link-active img").trigger("click")
        }),
        $(document).on("click", ".js-overlay", function(e) {
            e.preventDefault();
            var overlayId = $(this).attr("href");
            ACC.overlayDrm.open(overlayId)
        }),
        $(document).on("click", ".js-tab", function(e) {
            e.preventDefault();
            var tabId = $(this).attr("href");
            $(".size-guide-overlay__content .tab-title").removeClass("active"),
            $(".size-guide-overlay__content .tabs-content .content").removeClass("active"),
            $(this).parent().addClass("active"),
            $(tabId).addClass("active")
        }),
        $(document).on("click", ".btn-disable", function(e) {
            e.preventDefault();
            var message = $(this).data("msg-error");
            ACC.overlayDrm.toastError(message)
        }),
        1 == $("a.onlySize").length && $("a.onlySize").click(),
        $(window).bind("load", function() {
            isImgZoomItemsLoad ? ($(".js-zoom-img a").addClass("link-active"),
            $(".slick-pdp-product").append('<span class="pdp-zoom-icon"></span>')) : ($(".js-zoom-img a").addClass("link-inactive"),
            $(".slick-pdp-product").remove("pdp-zoom-icon")),
            ACC.productDetail.initTabs()
        }),
        ACC.productDetail.serviceTabCheck(),
        ACC.productDetail.serviceOpenTab()
    },
    bindVariantOptions: function() {
        ACC.productDetail.bindCurrentStyle(),
        ACC.productDetail.bindCurrentSize(),
        ACC.productDetail.bindCurrentType()
    },
    bindCurrentStyle: function() {
        var currentStyle = $("#currentStyleValue").data("styleValue")
          , styleSpan = $(".styleName");
        null != currentStyle && styleSpan.text(": " + currentStyle)
    },
    bindCurrentSize: function() {
        var currentSize = $("#currentSizeValue").data("sizeValue")
          , sizeSpan = $(".sizeName");
        null != currentSize && sizeSpan.text(": " + currentSize)
    },
    bindCurrentType: function() {
        var currentSize = $("#currentTypeValue").data("typeValue")
          , sizeSpan = $(".typeName");
        null != currentSize && sizeSpan.text(": " + currentSize)
    },
    setUpCarousel: function() {
        var gallery, thumbnailActive, slickPDP = ".slick-pdp-product", thumbnail = ".slider-pdp-nav-thumbnails", imageTotal = $(".slick-pdp-product .item").length, numberDots = 7, swipeDir = "", sliderDot = "#slick-slide-control1";
        $(".slick-pdp-product").slick({
            fade: !1,
            arrows: !0,
            asNavFor: thumbnail,
            init: (gallery = ".image-gallery",
            $(".js-image-gallery").removeClass("hide"),
            $(".product-details").removeClass("loading--bg"),
            void setTimeout(function() {
                $(".js-video").each(function(index) {
                    var dotId = $(this).attr("aria-describedby");
                    $("#" + dotId).addClass("video-dot")
                }),
                ACC.os.isMobile() && ($(gallery + " .slick-dots").insertBefore(gallery + " .slick-list"),
                $(gallery + " .slick-dots").after('<div class="dots-counter">1/' + imageTotal + "</div>"),
                $(".slick-dots li").each(function(index, e) {
                    numberDots <= index && $(this).css({
                        display: "none"
                    })
                }))
            }, 0)),
            draggable: !1,
            infinite: !1,
            speed: 500,
            prevArrow: '<button type="button" class="slick-prev"><span class="fa fa-angle-left"></span></button>',
            nextArrow: '<button type="button" class="slick-next"><span class="fa fa-angle-right"></span></button>',
            responsive: [{
                breakpoint: 480,
                settings: {
                    speed: 100,
                    draggable: !0,
                    arrows: !1,
                    dots: !0
                }
            }]
        }),
        $(thumbnail).slick({
            slidesToShow: 6,
            slidesToScroll: 6,
            arrows: !0,
            asNavFor: slickPDP,
            focusOnSelect: !0,
            vertical: !0,
            verticalSwiping: !0,
            infinite: !1,
            init: (thumbnailActive = $(thumbnail + " ._real").length,
            void setTimeout(function() {
                !ACC.os.isMobile() && thumbnailActive < 7 && $(thumbnail + " .slick-next").remove()
            }, 0))
        }),
        $(thumbnail + " .slick-slide").removeClass("slick-active"),
        $(thumbnail + " .slick-slide").eq(0).addClass("slick-active"),
        $(slickPDP).on("beforeChange", function(event, slick, currentSlide, nextSlide) {
            var mySlideNumber = nextSlide;
            $(thumbnail + " .slick-slide").removeClass("slick-active"),
            $(thumbnail + " .slick-slide").eq(mySlideNumber).addClass("slick-active"),
            ACC.os.isMobile() && $(".dots-counter").text(mySlideNumber + 1 + "/" + imageTotal)
        }),
        $(slickPDP).on("afterChange", function(event, slick, currentSlide, nextSlide) {
            ($(thumbnail + " .slick-active").last().hasClass("_disabled") ? $(thumbnail + " .slick-next.slick-arrow").addClass("_disabled") : $(thumbnail + " .slick-next.slick-arrow").removeClass("_disabled"),
            ACC.os.isMobile()) && ("left" == swipeDir ? "none" == $(sliderDot + currentSlide).parent().next().css("display") && ($(sliderDot + currentSlide).parent().next().removeAttr("style"),
            $(sliderDot + (currentSlide - numberDots + 1)).parent().css({
                display: "none"
            })) : "none" == $(sliderDot + currentSlide).parent().prev().css("display") && ($(sliderDot + currentSlide).parent().prev().removeAttr("style"),
            $(sliderDot + (currentSlide + numberDots - 1)).parent().css({
                display: "none"
            })))
        }),
        $(slickPDP).on("swipe", function(event, slick, direction) {
            swipeDir = direction
        })
    },
    openPhotoSwipe: function(index) {
        var pswpElement = document.querySelectorAll(".pswp")[0];
        index = index || 0;
        new PhotoSwipe(pswpElement,PhotoSwipeUI_Default,imgZoomItems,{
            history: !1,
            focus: !1,
            shareEl: !1,
            index: index
        }).init()
    },
    setupZoomItems: function() {
        var items = [];
        $(".js-zoom-img a img").each(function(index) {
            var item = new Object
              , imgUrl = $(this).data("zoom-image")
              , imgPid = $(this).data("pid")
              , tmpImg = new Image;
            tmpImg.src = imgUrl,
            $(tmpImg).one("load", function() {
                isImgZoomItemsLoad = !0,
                item.w = tmpImg.width,
                item.h = tmpImg.height
            }),
            item.src = imgUrl,
            item.pid = imgPid,
            items[index] = item
        }),
        imgZoomItems = items
    },
    reevooOpenTab: function() {
        $("#tabreview").trigger("click");
        var distance;
        distance = $("#tabreview-mobile").offset().top,
        $("html, body").animate({
            scrollTop: distance
        }, 300)
    },
    serviceOpenTab: function() {
        $(".js-tab-link").on("click", function(e) {
            e.preventDefault();
            var tabId = $(this).attr("href");
            $(tabId).parent().hasClass("active") || $(tabId).trigger("click");
            var distance = $(tabId).offset().top;
            768 <= $(window).width() && (distance -= $(".js-mainHeader").height()),
            $("html, body").animate({
                scrollTop: distance
            }, 300)
        })
    },
    serviceTabCheck: function() {
        $(".js-tab-link").each(function() {
            var tabId = $(this).attr("href");
            $(tabId).length < 1 && $(this).parent().removeClass("_active")
        })
    },
    selectSize: function() {
        var selectedSku = $(".js-variant-section").data("sku");
        null != selectedSku && "" != selectedSku && $(".product-size[data-sku-code=" + selectedSku + "]").click()
    },
    initSize: function() {
        var $sizeAccordion = $("#item_size");
        ACC.os.isMobile() && 0 < $sizeAccordion.length && $sizeAccordion.removeClass("_active")
    },
    initTabs: function() {
        0 < $(".js-tabs").length && ($(".tabhead.first").removeClass("active"),
        $(".tabhead.first").next().css({
            display: "none"
        }),
        $(".js-tabs").removeClass("hidden"))
    }
},
ACC.productorderform = {
    _autoload: ["headerActions", "coreTableActions", "addToCartOrderGridForm"],
    $addToCartOrderForm: $("#AddToCartOrderForm"),
    $addToCartBtn: $("#addToCartBtn"),
    $omsErrorMessageContainer: $("#globalMessages"),
    $emptySkuQuantityInputs: $(".sku-quantity[value]"),
    $nonEmptySkuQuantityInputs: $(".sku-quantity[value]"),
    $totalGridValues: $("[data-grid-total-id]"),
    $futureTooltipTemplate: $("#future-stock-template"),
    $futureTooltipErrorTemplate: $("#future-tooltip-error-template"),
    $omsErrorMessageTemplate: $("#oms-error-message-template"),
    $variantSummaryTemplate: $("#variant-summary"),
    selectedVariantData: "selected-variant",
    selectedVariants: [],
    quantityTotal: 0,
    scrollTopPos: 0,
    headerActions: function() {
        ACC.productorderform.bindProductDetailToggle($(".product-details-toggle"))
    },
    coreTableActions: function() {
        ACC.productorderform.coreTableScrollActions(ACC.productorderform.$addToCartOrderForm),
        ACC.productorderform.bindUpdateFutureStockButton(".update_future_stock_button"),
        ACC.productorderform.bindHideFutureStockInfo(".hide_future_stock_info"),
        ACC.productorderform.bindVariantSelect($(".variant-select-btn"), "AddToCartOrderForm"),
        ACC.productorderform.cancelVariantModal(".closeVariantModal"),
        ACC.productorderform.checkLimitExceed(".sku-quantity");
        var quantityBefore = 0
          , quantityAfter = 0;
        ACC.productorderform.$addToCartOrderForm.on("click", ".sku-quantity", function(event) {
            $(this).select()
        }),
        ACC.productorderform.$addToCartOrderForm.on("focusin", ".sku-quantity", function(event) {
            quantityBefore = jQuery.trim(this.value),
            $(this).parents("tr").next(".variant-summary").remove(),
            $(this).parents("table").data(ACC.productorderform.selectedVariantData) ? ACC.productorderform.selectedVariants = $(this).parents("table").data(ACC.productorderform.selectedVariantData) : ACC.productorderform.selectedVariants = [],
            "" == quantityBefore && (quantityBefore = 0,
            this.value = 0)
        }),
        $(".sku-quantity").on("blur keypress", function(event) {
            var code = event.keyCode || event.which || event.charCode;
            if (13 == code || null == code) {
                var currentIndex = parseInt($(this).attr("id").match("[0-9]+"))
                  , totalPrice = 0
                  , currentPrice = $("input[id='productPrice[" + currentIndex + "]']").val();
                this.value = ACC.productorderform.filterSkuEntry(this.value);
                var $currentTotalItems = $(".js-total-items-count")
                  , currentTotalItemsValue = $currentTotalItems.html()
                  , currentTotalPrice = $(".js-total-price-value").val()
                  , $gridGroup = $(this).parents(".orderForm_grid_group");
                if (isNaN(jQuery.trim(this.value)) && (this.value = 0),
                "" == (quantityAfter = jQuery.trim(this.value)) && (quantityAfter = 0,
                this.value = 0),
                ACC.orderform)
                    void 0 !== sessionStorage.totalItems && void 0 !== sessionStorage.totalPriceVal && (currentTotalItemsValue = sessionStorage.totalItems,
                    currentTotalPrice = sessionStorage.totalPriceVal),
                    totalPrice = 0 == quantityBefore ? ($currentTotalItems.html(parseInt(currentTotalItemsValue) + parseInt(quantityAfter)),
                    parseFloat(currentTotalPrice) + parseFloat(currentPrice) * parseInt(quantityAfter)) : ($currentTotalItems.html(parseInt(currentTotalItemsValue) + (parseInt(quantityAfter) - parseInt(quantityBefore))),
                    parseFloat(currentTotalPrice) + parseFloat(currentPrice) * (parseInt(quantityAfter) - parseInt(quantityBefore))),
                    sessionStorage.totalPrice = ACC.productorderform.formatTotalsCurrency(totalPrice),
                    sessionStorage.totalItems = $currentTotalItems.html(),
                    sessionStorage.totalPriceVal = totalPrice,
                    ACC.orderform.addToSkuQtyInput(this);
                else if ($gridGroup && 0 < $gridGroup.length) {
                    var $closestQuantityValue = $gridGroup.find("#quantityValue")
                      , $closestAvgPriceValue = $gridGroup.find("#avgPriceValue")
                      , $closestSubtotalValue = $gridGroup.find("#subtotalValue")
                      , currentQuantityValue = $closestQuantityValue.val()
                      , currentSubtotalValue = $closestSubtotalValue.val();
                    totalPrice = 0 == quantityBefore ? ($closestQuantityValue.val(parseInt(currentQuantityValue) + parseInt(quantityAfter)),
                    $closestSubtotalValue.val(parseFloat(currentSubtotalValue) + parseFloat(currentPrice) * parseInt(quantityAfter)),
                    $currentTotalItems.html(parseInt(currentTotalItemsValue) + parseInt(quantityAfter)),
                    parseFloat(currentTotalPrice) + parseFloat(currentPrice) * parseInt(quantityAfter)) : ($closestQuantityValue.val(parseInt(currentQuantityValue) + (parseInt(quantityAfter) - parseInt(quantityBefore))),
                    $closestSubtotalValue.val(parseFloat(currentSubtotalValue) + parseFloat(currentPrice) * (parseInt(quantityAfter) - parseInt(quantityBefore))),
                    $currentTotalItems.html(parseInt(currentTotalItemsValue) + (parseInt(quantityAfter) - parseInt(quantityBefore))),
                    parseFloat(currentTotalPrice) + parseFloat(currentPrice) * (parseInt(quantityAfter) - parseInt(quantityBefore))),
                    ACC.productorderform.enableBeforeUnloadEvent(quantityAfter, $currentTotalItems.text()),
                    0 != $currentTotalItems.length && 0 == $currentTotalItems.text() ? (ACC.productorderform.$addToCartBtn.attr("disabled", "disabled"),
                    $(window).off("beforeunload", ACC.productorderform.beforeUnloadHandler)) : ACC.productorderform.$addToCartBtn.removeAttr("disabled"),
                    0 < parseInt($closestQuantityValue.val()) ? $closestAvgPriceValue.val(parseFloat($closestSubtotalValue.val()) / parseInt($closestQuantityValue.val())) : $closestAvgPriceValue.val(0)
                }
                if ($gridGroup && 0 < $gridGroup.length) {
                    var gridLevelTotalPrice = ""
                      , $gridTotalValue = $gridGroup.find("[data-grid-total-id=total_value_" + currentIndex + "]");
                    0 < quantityAfter && (gridLevelTotalPrice = ACC.productorderform.formatTotalsCurrency(parseFloat(currentPrice) * parseInt(quantityAfter))),
                    $gridTotalValue.html(gridLevelTotalPrice),
                    ACC.productorderform.updateSelectedVariantGridTotal(this, quantityBefore, !1, !1)
                }
                $(".js-total-price").html(ACC.productorderform.formatTotalsCurrency(totalPrice)),
                $(".js-total-price-value").val(totalPrice)
            }
        }),
        $("body").on("focusin", "#cboxContent .sku-quantity", function() {
            quantityBefore = jQuery.trim(this.value);
            var currentVariantId = $(this).data("variant-id")
              , currentBaseInput = $("#AddToCartOrderForm, #cartOrderGridForm").find("[data-variant-id='" + currentVariantId + "']");
            currentBaseInput.trigger("focusin"),
            currentBaseInput.parents("table").find(".variant-summary").remove(),
            currentBaseInput.parents("table").data(ACC.productorderform.selectedVariantData) ? ACC.productorderform.selectedVariants = currentBaseInput.parents("table").data(ACC.productorderform.selectedVariantData) : ACC.productorderform.selectedVariants = [],
            "" == quantityBefore && (quantityBefore = 0,
            this.value = 0)
        }),
        $("body").on("blur", "#cboxContent .sku-quantity", function() {
            var priceSibling = $(this).siblings(".price")
              , totalSibling = $(this).siblings(".data-grid-total")
              , currentVariantId = $(this).data("variant-id")
              , currentBaseInput = $("#AddToCartOrderForm, #cartOrderGridForm").find("[data-variant-id='" + currentVariantId + "']");
            this.value = ACC.productorderform.filterSkuEntry(this.value),
            (isNaN(jQuery.trim(this.value)) || this.value < 0 || "" == this.value) && (this.value = 0),
            currentBaseInput.val(this.value),
            currentBaseInput.trigger("blur"),
            ACC.productorderform.updateVariantTotal(priceSibling, this.value, totalSibling),
            0 < this.value && this.value != quantityBefore ? (currentBaseInput.parents("table").addClass("selected"),
            currentBaseInput.trigger("change")) : 0 === ACC.productorderform.selectedVariants.length && currentBaseInput.parents("table").removeClass("selected")
        })
    },
    updateSelectedVariantGridTotal: function(_this, quantityBefore, isFillQty, resetSummary) {
        var priceSibling = $(_this).siblings(".price")
          , propSibling = $(_this).siblings(".variant-prop")
          , currentSkuId = $(_this).next(".td_stock").data("sku-id")
          , currentBaseTotal = $(_this).siblings(".data-grid-total");
        if (isFillQty && (ACC.productorderform.selectedVariants = []),
        _this.value != quantityBefore) {
            var newVariant = !0;
            ACC.productorderform.selectedVariants.forEach(function(item, index) {
                item.id === currentSkuId && (newVariant = !1,
                "0" === _this.value || 0 === _this.value ? ACC.productorderform.selectedVariants.splice(index, 1) : (ACC.productorderform.selectedVariants[index].quantity = _this.value,
                ACC.productorderform.selectedVariants[index].total = ACC.productorderform.updateVariantTotal(priceSibling, _this.value, currentBaseTotal)))
            }),
            newVariant && 0 < _this.value && ACC.productorderform.selectedVariants.push({
                id: currentSkuId,
                size: propSibling.data("variant-prop"),
                quantity: _this.value,
                total: ACC.productorderform.updateVariantTotal(priceSibling, _this.value, currentBaseTotal)
            })
        }
        resetSummary && $(_this).parents("table").find(".variant-summary").remove(),
        ACC.productorderform.showSelectedVariant($(_this).parents("table")),
        0 < _this.value && _this.value != quantityBefore ? $(_this).parents("table").addClass("selected") : 0 === ACC.productorderform.selectedVariants.length && $(_this).parents("table").removeClass("selected").find(".variant-summary").remove()
    },
    updateVariantTotal: function(priceSibling, quantity, totalElement) {
        var variantTotal = parseFloat(priceSibling.data("variant-price")) * parseInt(quantity);
        return totalElement.html(ACC.productorderform.formatTotalsCurrency(variantTotal)),
        ACC.productorderform.formatTotalsCurrency(variantTotal)
    },
    bindUpdateFutureStockButton: function(updateFutureStockButton) {
        $("body").on("click", updateFutureStockButton, function(event) {
            event.preventDefault();
            var $gridContainer = $(this).parents(".orderForm_grid_group").find(".product-grid-container")
              , $skus = jQuery.map($gridContainer.find("input[type='hidden'].sku"), function(o) {
                return o.value
            })
              , skusId = $(this).data("skusId")
              , futureStockUrl = $(this).data("skusFutureStockUrl")
              , postData = {
                skus: $skus,
                productCode: skusId
            }
              , hideFutureStockInfo = $(this).parent().find(".hide_future_stock_info")
              , showFutureStockLink = $(this);
            $.ajax({
                url: futureStockUrl,
                type: "POST",
                data: postData,
                traditional: !0,
                dataType: "json",
                success: function(data) {
                    ACC.productorderform.updateFuture($gridContainer, $skus, data, skusId, showFutureStockLink, hideFutureStockInfo)
                },
                error: function(xht, textStatus, ex) {
                    alert("Failed to get delivery modes. Error details [" + xht + ", " + textStatus + ", " + ex + "]")
                }
            })
        })
    },
    bindHideFutureStockInfo: function(hideFutureStockInfoLink) {
        $("body").on("click", hideFutureStockInfoLink, function(event) {
            event.preventDefault();
            var gridContainer = $(this).parent().parent().find(".product-grid-container");
            $(this).parent().find(".update_future_stock_button").show(),
            $(this).hide(),
            gridContainer.find("[data-sku-id]").children(".future_stock, .out-of-stock").remove()
        })
    },
    updateFuture: function(gridContainer, skus, freshData, callerId, showFutureStockInfoLink, hideFutureStockInfo) {
        var obj;
        ACC.productorderform.$omsErrorMessageContainer.find("div").remove(),
        null !== freshData && void 0 !== freshData["basket.page.viewFuture.unavailable"] ? $.tmpl(ACC.productorderform.$omsErrorMessageTemplate, {
            errorMessage: freshData["basket.page.viewFuture.unavailable"]
        }).appendTo(ACC.productorderform.$omsErrorMessageContainer) : (obj = freshData,
        Object.keys(obj).length <= 0 || (showFutureStockInfoLink.hide(),
        hideFutureStockInfo.css("display", "block"),
        $.each(skus, function(index, skuId) {
            var stocks = freshData[skuId]
              , cell = gridContainer.find("[data-sku-id='" + skuId + "']")
              , isCurrentlyInStock = -1 != cell[0].attributes.class.nodeValue.indexOf("in-stock")
              , futureStockPresent = null != stocks && null !== stocks[0] && void 0 !== stocks[0];
            cell.children(".future_stock, .out-of-stock").remove(),
            futureStockPresent ? (isCurrentlyInStock || cell.addClass("future-stock"),
            $.tmpl(ACC.productorderform.$futureTooltipTemplate, {
                formattedDate: stocks[0].formattedDate,
                availabilities: stocks
            }).appendTo(cell)) : isCurrentlyInStock || (cell[0].attributes.class.nodeValue = "td_stock out-of-stock")
        })))
    },
    toJSON: function(gridForm, skipZeroQuantity) {
        for (var skus = gridForm.find("input.sku").map(function(index, element) {
            return element.value
        }), skuQuantities = gridForm.find("input.sku-quantity").map(function(index, element) {
            return parseInt(element.value)
        }), skusAsJSON = [], i = 0; i < skus.length; i++)
            skipZeroQuantity && 0 === skuQuantities[i] || skusAsJSON.push({
                product: {
                    code: skus[i]
                },
                quantity: skuQuantities[i]
            });
        return JSON.stringify({
            cartEntries: skusAsJSON
        })
    },
    formatTotalsCurrency: function(amount) {
        return Currency.formatMoney(Number(amount).toFixed(2), Currency.money_format[ACC.common.currentCurrency])
    },
    cleanValues: function() {
        if (0 !== $(".orderForm_grid_group").length) {
            var formattedTotal = ACC.productorderform.formatTotalsCurrency("0.00");
            $(".js-total-price").html(formattedTotal),
            $("#quantity, .js-total-items-count").html(0),
            $("#quantityValue, #avgPriceValue, #subtotalValue, .js-total-price-value").val(0),
            ACC.productorderform.$emptySkuQuantityInputs.val(0),
            ACC.productorderform.$totalGridValues.html("")
        }
    },
    calculateGrid: function() {
        ACC.productorderform.$nonEmptySkuQuantityInputs.trigger("focusout")
    },
    bindProductDetailToggle: function(productDetailToggle) {
        productDetailToggle.on("click", function(event) {
            event.preventDefault(),
            $(this).parents(".product-details").toggleClass("open")
        })
    },
    showSelectedVariant: function(currentVariant) {
        $.tmpl(ACC.productorderform.$variantSummaryTemplate, {
            variants: ACC.productorderform.selectedVariants
        }).appendTo(currentVariant),
        $(".variant-summary .variant-property").html($(".variant-detail").data("variant-property")),
        currentVariant.data(ACC.productorderform.selectedVariantData, ACC.productorderform.selectedVariants),
        currentVariant.removeClass("currentVariant")
    },
    bindVariantSelect: function(variantSelectBtn, parentId) {
        variantSelectBtn.on("click", function(event) {
            event.preventDefault();
            var currentVariant = $(this).parents("table");
            currentVariant.data(ACC.productorderform.selectedVariantData) ? ACC.productorderform.selectedVariants = currentVariant.data(ACC.productorderform.selectedVariantData) : ACC.productorderform.selectedVariants = [];
            var titleHeader = variantSelectBtn.html()
              , tableWrap = $("#" + parentId).clone().empty().attr("id", parentId + "Variant");
            currentVariant.addClass("currentVariant");
            var popupContent = $(this).parents(".orderForm_grid_group").clone();
            currentVariant.removeClass("currentVariant"),
            $(popupContent).find(".currentVariant").siblings().remove(),
            tableWrap.html(popupContent),
            tableWrap.find(".hidden-xs").removeClass("hidden-xs"),
            tableWrap.find(".hide").removeClass("hide"),
            scrollTopPos = $("body").scrollTop(),
            $("body").scrollTop(0),
            ACC.colorbox.open(titleHeader, {
                html: tableWrap,
                width: "100%",
                reposition: !1,
                className: "variantSelectMobile",
                onCleanup: function() {
                    0 < ACC.productorderform.$addToCartOrderForm.find(".selected").length ? ACC.productorderform.$addToCartBtn.removeAttr("disabled") : ACC.productorderform.$addToCartBtn.attr("disabled", "disabled"),
                    $("body").scrollTop(scrollTopPos)
                }
            })
        })
    },
    cancelVariantModal: function(closeVariantModal) {
        $("body").on("click", closeVariantModal, function(event) {
            event.preventDefault(),
            ACC.colorbox.close()
        })
    },
    checkLimitExceed: function(closeVariantModal1) {
        $("body").on("keyup blur", closeVariantModal1, function(event) {
            var input = Number($(this).val())
              , stock_amt = Number($(this).attr("data-instock"));
            stock_amt < input && $(this).val(stock_amt)
        })
    },
    resetSelectedVariant: function() {
        ACC.productorderform.selectedVariants = [],
        $(".product-grid-container table").removeData(ACC.productorderform.selectedVariantData).removeClass("selected").removeClass("currentVariant")
    },
    addToCartOrderGridForm: function() {
        $("#AddToCartOrderForm").keypress(function(event) {
            "13" == event.which && event.preventDefault()
        }),
        ACC.productorderform.$addToCartBtn.click(function() {
            ACC.productorderform.$addToCartBtn.attr("disabled", "disabled"),
            $.ajax({
                url: ACC.productorderform.$addToCartOrderForm.attr("action"),
                type: "POST",
                dataType: "json",
                contentType: "application/json",
                data: ACC.productorderform.toJSON(ACC.productorderform.$addToCartOrderForm, !0),
                async: !1,
                success: function(response) {
                    $(window).off("beforeunload", ACC.productorderform.beforeUnloadHandler),
                    ACC.product.displayAddToCartPopup(response),
                    ACC.productorderform.cleanValues(),
                    ACC.productorderform.resetSelectedVariant()
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    console.log("The following error occured: " + textStatus, errorThrown)
                }
            })
        })
    },
    beforeUnloadHandler: function() {
        return ACC.productorderform.$addToCartOrderForm.attr("data-grid-confirm-message")
    },
    enableBeforeUnloadEvent: function(quantityAfter, currentTotalItems) {
        ACC.orderform || 0 < quantityAfter && 0 < currentTotalItems && $(window).off("beforeunload", ACC.productorderform.beforeUnloadHandler).on("beforeunload", ACC.productorderform.beforeUnloadHandler)
    },
    filterSkuEntry: function(quantityInput) {
        return /\D/g.test(quantityInput) ? quantityInput.replace(/\D/g, "") : quantityInput
    },
    coreTableScrollActions: function($scrollContent) {
        if ($scrollContent.hasClass("visible")) {
            ACC.productorderform.orderGridScroll($scrollContent);
            var widthDiff, heightDiff, scrollRight = $scrollContent.parent().find(".order-form-scroll.right"), scrollLeft = $scrollContent.parent().find(".order-form-scroll.left"), scrollUp = $scrollContent.parent().find(".order-form-scroll.up"), scrollDown = $scrollContent.parent().find(".order-form-scroll.down"), widthReference = $scrollContent.find(".widthReference").outerWidth(), heightReference = $scrollContent.find(".product-grid-container table").eq(0).height() / 2, maxWidth = 0, maxHeight = 0;
            $scrollContent.find(".product-grid-container table").each(function() {
                $(this).outerWidth() > maxWidth && (maxWidth = $(this).outerWidth())
            }),
            $scrollContent.find(".orderForm_grid_group").each(function() {
                maxHeight += $(this).height()
            }),
            widthDiff = maxWidth - $scrollContent.outerWidth(),
            heightDiff = maxHeight - $scrollContent.height() + 14,
            $scrollContent.scroll(function() {
                0 < $(this).scrollLeft() ? scrollLeft.show() : scrollLeft.hide(),
                $(this).scrollLeft() >= widthDiff ? scrollRight.hide() : scrollRight.show(),
                0 < $(this).scrollTop() ? scrollUp.show() : scrollUp.hide(),
                $(this).scrollTop() >= heightDiff ? scrollDown.hide() : scrollDown.show(),
                $scrollContent.find(".update-future-stock").css("margin-right", -$(this).scrollLeft())
            }),
            $scrollContent.parent().find(".order-form-scroll").click(function() {
                var pos_left = $scrollContent.scrollLeft()
                  , pos_top = $scrollContent.scrollTop();
                $(this).hasClass("right") ? $scrollContent.scrollLeft(pos_left + widthReference) : $(this).hasClass("left") ? $scrollContent.scrollLeft(pos_left - widthReference) : $(this).hasClass("up") ? $scrollContent.scrollTop(pos_top - heightReference) : $scrollContent.scrollTop(pos_top + heightReference)
            })
        }
    },
    orderGridScroll: function(scrollContent) {
        var showRight = !1
          , calcHeight = 0
          , maxWidth = $(scrollContent).find(".orderForm_grid_group").innerWidth()
          , maxHeight = $(scrollContent).innerHeight() - 18;
        $(scrollContent).find(".product-grid-container table").each(function() {
            $(this).width() > maxWidth && (showRight = !0),
            calcHeight += $(this).height()
        }),
        showRight && $(scrollContent).parent().find(".order-form-scroll.right").show(),
        maxHeight < calcHeight && $(scrollContent).parent().find(".order-form-scroll.down").show()
    },
    calculateVariantTotal: function(_this, quantityToAdd) {
        var $gridGroup = _this.parents(".orderForm_grid_group")
          , currentIndex = parseInt(_this.attr("id").match("[0-9]+"))
          , currentPrice = $("input[id='productPrice[" + currentIndex + "]']").val()
          , $gridTotalValue = $gridGroup.find("[data-grid-total-id=total_value_" + currentIndex + "]");
        0 < quantityToAdd && $gridTotalValue.html(ACC.productorderform.formatTotalsCurrency(parseFloat(currentPrice) * parseInt(quantityToAdd)))
    }
};
var ACC = ACC || {};
0 < $("#quickOrder").length && (ACC.quickorder = {
    _autoload: ["bindClearQuickOrderRow", "bindAddSkuInputRow", "bindResetFormBtn", "bindAddToCartClick"],
    $quickOrderContainer: $(".js-quick-order-container"),
    $quickOrderMinRows: Number($(".js-quick-order-container").data("quickOrderMinRows")),
    $quickOrderMaxRows: Number($(".js-quick-order-container").data("quickOrderMaxRows")),
    $productExistsInFormMsg: $(".js-quick-order-container").data("productExistsInFormMsg"),
    $quickOrderLeavePageMsg: $("#quickOrder").data("gridConfirmMessage"),
    $hiddenSkuInput: "input.js-hidden-sku-field",
    $addToCartBtn: $("#js-add-to-cart-quick-order-btn-top, #js-add-to-cart-quick-order-btn-bottom"),
    $resetFormBtn: $("#js-reset-quick-order-form-btn-top, #js-reset-quick-order-form-btn-bottom"),
    $productInfoContainer: ".js-product-info",
    $skuInputField: ".js-sku-input-field",
    $qtyInputField: ".js-quick-order-qty",
    $jsLiContainer: "li.js-li-container",
    $removeQuickOrderRowBtn: ".js-remove-quick-order-row",
    $skuValidationContainer: ".js-sku-validation-container",
    $qtyValidationContainer: ".js-qty-validation-container",
    $productItemTotal: ".js-quick-order-item-total",
    $classHasError: "has-error",
    bindResetFormBtn: function() {
        ACC.quickorder.$resetFormBtn.on("click", ACC.quickorder.clearForm)
    },
    bindAddToCartClick: function() {
        ACC.quickorder.$addToCartBtn.on("click", ACC.quickorder.addToCart)
    },
    bindAddSkuInputRow: function() {
        $(ACC.quickorder.$skuInputField).on("focusin", ACC.quickorder.addInputRow).on("focusout keydown", ACC.quickorder.handleFocusOutOnSkuInput)
    },
    bindClearQuickOrderRow: function() {
        $(ACC.quickorder.$removeQuickOrderRowBtn).on("mousedown", ACC.quickorder.clearQuickOrderRow)
    },
    addToCart: function() {
        $.ajax({
            url: ACC.quickorder.$quickOrderContainer.data("quickOrderAddToCartUrl"),
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            data: ACC.quickorder.getJSONDataForAddToCart(),
            async: !1,
            success: function(response) {
                ACC.quickorder.handleAddToCartSuccess(response)
            },
            error: function(jqXHR, textStatus, errorThrown) {
                console.log("The following error occurred: " + textStatus, errorThrown)
            }
        })
    },
    handleAddToCartSuccess: function(response) {
        0 < $(response.quickOrderErrorData).length && ACC.quickorder.disableBeforeUnloadEvent();
        var lookup = {};
        response.quickOrderErrorData.forEach(function(el) {
            lookup[el.sku] = el.errorMsg
        }),
        $(ACC.quickorder.$qtyInputField).each(function() {
            var parentLi = ACC.quickorder.getCurrentParentLi(this)
              , sku = ACC.quickorder.findElement(parentLi, ACC.quickorder.$skuInputField).val()
              , errorMsg = lookup[sku];
            errorMsg ? ACC.quickorder.findElement(parentLi, ACC.quickorder.$skuValidationContainer).text(errorMsg) : ACC.quickorder.findElement(parentLi, ACC.quickorder.$removeQuickOrderRowBtn).trigger("mousedown")
        }),
        ACC.quickorder.handleBeforeUnloadEvent(),
        ACC.product.displayAddToCartPopup(response)
    },
    getJSONDataForAddToCart: function() {
        var skusAsJSON = [];
        return $(ACC.quickorder.$qtyInputField).each(function() {
            var qty = Number($(this).val());
            if (0 < qty) {
                var sku = jQuery.trim(ACC.quickorder.findElementInCurrentParentLi(this, ACC.quickorder.$skuInputField).val());
                skusAsJSON.push({
                    product: {
                        code: sku
                    },
                    quantity: qty
                })
            }
        }),
        JSON.stringify({
            cartEntries: skusAsJSON
        })
    },
    handleFocusOutOnSkuInput: function(event) {
        13 == (event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0) && $(event.target).focusout(),
        "focusout" == event.type && (ACC.quickorder.handleGetProduct(event),
        ACC.quickorder.handleBeforeUnloadEvent())
    },
    handleFocusOutOnQtyInput: function(event) {
        13 == (event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0) && (event.preventDefault(),
        ACC.quickorder.getCurrentParentLi(event.target).next().find(ACC.quickorder.$skuInputField).focus(),
        $(event.target).focusout());
        "focusout" == event.type && (ACC.quickorder.validateAndUpdateItemTotal(event),
        ACC.quickorder.enableDisableAddToCartBtn())
    },
    clearForm: function() {
        window.location.reload()
    },
    validateAndUpdateItemTotal: function(event) {
        var parentLi = ACC.quickorder.getCurrentParentLi(event.target)
          , qtyValue = jQuery.trim(ACC.productorderform.filterSkuEntry($(event.target).val()));
        if (isNaN(qtyValue) || "" == qtyValue)
            qtyValue = 0,
            $(event.target).removeClass(ACC.quickorder.$classHasError),
            ACC.quickorder.findElement(parentLi, ACC.quickorder.$qtyValidationContainer).text(""),
            $(event.target).val(0);
        else {
            qtyValue = Number(qtyValue),
            $(event.target).val(qtyValue);
            var maxQty = jQuery.trim(ACC.quickorder.findElement(parentLi, ACC.quickorder.$qtyInputField).data("maxProductQty"))
              , stockLevelStatus = jQuery.trim(ACC.quickorder.findElement(parentLi, ACC.quickorder.$qtyInputField).data("stockLevelStatus"));
            if (maxQty = $.isEmptyObject(maxQty) && "inStock" == stockLevelStatus ? "FORCE_IN_STOCK" : Number(maxQty),
            !isNaN(maxQty) && maxQty < qtyValue) {
                $(event.target).addClass(ACC.quickorder.$classHasError);
                var qtyValidationContainer = ACC.quickorder.findElement(parentLi, ACC.quickorder.$qtyValidationContainer);
                qtyValidationContainer.text(qtyValidationContainer.data("maxProductQtyMsg")),
                qtyValue = maxQty,
                $(event.target).val(maxQty)
            } else
                $(event.target).removeClass(ACC.quickorder.$classHasError),
                ACC.quickorder.findElement(parentLi, ACC.quickorder.$qtyValidationContainer).text("")
        }
        if (0 < qtyValue) {
            var itemPrice = parseFloat(ACC.quickorder.findElement(parentLi, ".js-product-price").data("productPrice"));
            ACC.quickorder.findElement(parentLi, ACC.quickorder.$productItemTotal).html(ACC.productorderform.formatTotalsCurrency(itemPrice * qtyValue))
        } else
            ACC.quickorder.findElement(parentLi, ACC.quickorder.$productItemTotal).text("")
    },
    clearQuickOrderRow: function() {
        var quickOrderMinRows = ACC.quickorder.$quickOrderMinRows
          , parentLi = ACC.quickorder.getCurrentParentLi(this);
        $(".js-ul-container li.js-li-container").length > quickOrderMinRows ? (parentLi.remove(),
        ACC.quickorder.bindClearQuickOrderRow()) : (ACC.quickorder.findElement(parentLi, ACC.quickorder.$productInfoContainer).remove(),
        ACC.quickorder.findElement(parentLi, ACC.quickorder.$skuValidationContainer).text(""),
        ACC.quickorder.findElement(parentLi, ACC.quickorder.$skuInputField).val(""),
        ACC.quickorder.findElement(parentLi, ACC.quickorder.$hiddenSkuInput).val("")),
        ACC.quickorder.enableDisableAddToCartBtn(),
        ACC.quickorder.handleBeforeUnloadEvent()
    },
    addInputRow: function(event) {
        if ($(".js-quick-order-container li.js-li-container:last-child").find(ACC.quickorder.$skuInputField).is($(event.target)) && $(ACC.quickorder.$jsLiContainer).length < ACC.quickorder.$quickOrderMaxRows) {
            var liClone = $(".js-quick-order-container li.js-li-container:first").clone();
            ACC.quickorder.findElement(liClone, ACC.quickorder.$productInfoContainer).remove(),
            ACC.quickorder.findElement(liClone, ACC.quickorder.$skuValidationContainer).text(""),
            ACC.quickorder.findElement(liClone, ACC.quickorder.$hiddenSkuInput).val("");
            var currentSkuInputField = ACC.quickorder.findElement(liClone, ACC.quickorder.$skuInputField);
            currentSkuInputField.val(""),
            currentSkuInputField.focusin(ACC.quickorder.addInputRow).focusout(ACC.quickorder.handleFocusOutOnSkuInput).keydown(ACC.quickorder.handleFocusOutOnSkuInput),
            ACC.quickorder.findElement(liClone, ACC.quickorder.$removeQuickOrderRowBtn).click(ACC.quickorder.clearQuickOrderRow),
            $(".js-ul-container").append(liClone)
        }
    },
    handleGetProduct: function(event) {
        var parentLi = ACC.quickorder.getCurrentParentLi(event.target)
          , productCode = $.trim(event.target.value);
        $(event.target).val(productCode),
        ACC.quickorder.isCurrentSkuSameAsPrevious(parentLi, productCode) || (0 < productCode.length ? (ACC.quickorder.findElement(parentLi, ACC.quickorder.$productInfoContainer).remove(),
        ACC.quickorder.isDuplicateSku(event.target, productCode) ? ACC.quickorder.findElement(parentLi, ACC.quickorder.$skuValidationContainer).text(ACC.quickorder.$productExistsInFormMsg) : ACC.quickorder.getAndDisplayProductInfo(event, parentLi, productCode),
        ACC.quickorder.findElement(parentLi, ACC.quickorder.$hiddenSkuInput).val(productCode)) : ($(event.target).removeClass(ACC.quickorder.$classHasError),
        ACC.quickorder.findElement(parentLi, ACC.quickorder.$skuValidationContainer).text(""),
        ACC.quickorder.findElement(parentLi, ACC.quickorder.$productInfoContainer).remove()))
    },
    isCurrentSkuSameAsPrevious: function(parentLi, productCode) {
        return ACC.quickorder.findElement(parentLi, ACC.quickorder.$hiddenSkuInput).val() == productCode
    },
    isDuplicateSku: function(currentInput, productCode) {
        var exists = !1;
        return $(ACC.quickorder.$skuInputField).each(function() {
            if ($(this).val() == productCode && !$(this).is($(currentInput)))
                return !(exists = !0)
        }),
        exists
    },
    getAndDisplayProductInfo: function(event, parentLi, productCode) {
        var url = ACC.config.encodedContextPath + "/quickOrder/productInfo?code=" + productCode;
        $.getJSON(url, function(result) {
            if (null != result.errorMsg && 0 < result.errorMsg.length)
                $(event.target).addClass(ACC.quickorder.$classHasError),
                ACC.quickorder.findElement(parentLi, ACC.quickorder.$skuValidationContainer).text(result.errorMsg);
            else {
                $(event.target).removeClass(ACC.quickorder.$classHasError),
                ACC.quickorder.findElement(parentLi, ACC.quickorder.$skuValidationContainer).text(""),
                $("#quickOrderRowTemplate").tmpl(result.productData).insertAfter(ACC.quickorder.findElement(parentLi, ".js-sku-container"));
                var qtyInputField = ACC.quickorder.findElement(parentLi, ACC.quickorder.$qtyInputField);
                qtyInputField.focusout(ACC.quickorder.handleFocusOutOnQtyInput).keydown(ACC.quickorder.handleFocusOutOnQtyInput),
                "outOfStock" == result.productData.stock.stockLevelStatus.code ? (qtyInputField.val(0),
                qtyInputField.prop("disabled", !0)) : qtyInputField.focus().select(),
                ACC.quickorder.enableDisableAddToCartBtn()
            }
        })
    },
    handleBeforeUnloadEvent: function() {
        ACC.quickorder.isAnySkuPresent() ? (ACC.quickorder.disableBeforeUnloadEvent(),
        ACC.quickorder.enableBeforeUnloadEvent()) : ACC.quickorder.disableBeforeUnloadEvent()
    },
    disableBeforeUnloadEvent: function() {
        $(window).off("beforeunload", ACC.quickorder.beforeUnloadHandler)
    },
    enableBeforeUnloadEvent: function() {
        $(window).on("beforeunload", ACC.quickorder.beforeUnloadHandler)
    },
    beforeUnloadHandler: function() {
        return ACC.quickorder.$quickOrderLeavePageMsg
    },
    enableDisableAddToCartBtn: function() {
        ACC.quickorder.shouldAddToCartBeEnabled() ? ACC.quickorder.$addToCartBtn.removeAttr("disabled") : ACC.quickorder.$addToCartBtn.attr("disabled", "disabled")
    },
    shouldAddToCartBeEnabled: function() {
        var sum = 0
          , enable = !1;
        return $(ACC.quickorder.$qtyInputField).each(function() {
            var str = this.value.trim();
            if (str && (sum += parseInt(str, 10)),
            1 <= sum)
                return !(enable = !0)
        }),
        enable
    },
    isAnySkuPresent: function() {
        var present = !1;
        return $(ACC.quickorder.$skuInputField).each(function() {
            if (jQuery.trim(this.value))
                return !(present = !0)
        }),
        present
    },
    getCurrentParentLi: function(currentElement) {
        return $(currentElement).closest(ACC.quickorder.$jsLiContainer)
    },
    findElement: function(currentElement, toFind) {
        return $(currentElement).find(toFind)
    },
    findElementInCurrentParentLi: function(currentElement, toFind) {
        return $(currentElement).closest(ACC.quickorder.$jsLiContainer).find(toFind)
    }
}),
ACC.quickview = {
    _autoload: ["bindToUiCarouselLink"],
    initQuickviewLightbox: function() {
        ACC.product.enableAddToCartButton(),
        ACC.product.bindToAddToCartForm(),
        ACC.product.enableStorePickupButton()
    },
    refreshScreenReaderBuffer: function() {
        $("#accesibility_refreshScreenReaderBufferField").attr("value", (new Date).getTime())
    },
    bindToUiCarouselLink: function() {
        var titleHeader = $("#quickViewTitle").html();
        $(".js-owl-carousel-reference .js-reference-item").colorbox({
            close: '<span class="close-icon"></span>',
            title: titleHeader,
            maxWidth: "100%",
            onComplete: function() {
                ACC.quickview.refreshScreenReaderBuffer(),
                ACC.quickview.initQuickviewLightbox(),
                ACC.ratingstars.bindRatingStars($(".quick-view-stars"))
            },
            onClosed: function() {
                ACC.quickview.refreshScreenReaderBuffer()
            }
        })
    }
},
ACC.quote = {
    _autoload: [["bindAddComment", 0 != $("#js-quote-comments").length], ["bindAddEntryComment", 0 != $(".js-quote-entry-comments").length], ["toggleMoreComments", 0 != $("#js-quote-comments").length], ["toggleLessComments", 0 != $("#js-quote-comments").length], ["displayLessComments", 0 != $("#js-quote-comments").length], ["quoteDetailsNavigation", 0 != $(".js-quote-actions").length], ["bindQuoteButtons", 0 != $(".js-btn-quote").length], ["bindEditQuoteButton", 0 != $(".js-quote-edit-btn").length], ["bindSubmitConfirmation", 0 != $(".js-quote-submit-btn").length], ["bindCancelConfirmation", 0 != $(".js-quote-cancel-btn").length], ["bindName", 0 != $("#js-quote-name").length], ["bindDescription", 0 != $("#js-quote-description").length], ["bindExpirationTime", 0 != $("#js-quote-expiration-time").length], ["bindCheckoutConfirmation", 0 != $(".js-quote-checkout-btn").length], ["bindEditConfirmation", 0 != $(".js-quote-warning-btn").length], ["bindQuoteDiscount", 0 != $(".js-quote-discount-link").length], ["bindNewCartClick", 0 != $(".new__cart--link").length]],
    bindEditQuoteButton: function() {
        $(".js-quote-edit-btn").on("click", function() {
            var sUrl = $(this).data("quoteEditUrl");
            window.location = sUrl
        })
    },
    bindNewCartClick: function() {
        $(".new__cart--link").bind("click", function(event) {
            $(this).unbind(event)
        })
    },
    bindAddComment: function() {
        $(document).on("keypress", "#js-quote-comments #comment", function(event) {
            return 13 != event.keyCode || ("" == $("#comment").val().trim() || (event.preventDefault(),
            ACC.quote.quoteCommentSubmit($("#comment").val()),
            $("#comment").val("")),
            !1)
        })
    },
    bindAddEntryComment: function() {
        $(document).on("keypress", ".js-quote-entry-comments", function(event) {
            return 13 != event.keyCode || (event.preventDefault(),
            ACC.quote.quoteEntryCommentSubmit($(this).val(), $(this).data("entry-number")),
            !1)
        })
    },
    bindQuoteButtons: function() {
        $(".js-save-quote-btn").click(function() {
            var url = $(this).data("saveQuoteUrl");
            $("#quoteForm").attr("action", url).submit()
        }),
        $(".js-submit-quote-btn").click(function() {
            var url = $(this).data("submitQuoteUrl");
            $("#quoteForm").attr("action", url).submit()
        }),
        $(".js-accept-quote-btn").click(function() {
            var url = $(this).data("acceptQuoteUrl");
            $("#quoteForm").attr("action", url).submit()
        })
    },
    quoteCommentSubmit: function(comment) {
        var quoteComments = $("#js-quote-comments")
          , addCommentUrl = quoteComments.data("quote-base-link") + "comment"
          , showAllComments = quoteComments.data("show-all-comments");
        $.ajax({
            url: addCommentUrl,
            data: {
                comment: comment
            },
            type: "post",
            success: function(response) {
                ACC.quote.onCommentSuccess(showAllComments)
            }
        })
    },
    quoteEntryCommentSubmit: function(comment, entryNumber) {
        if (comment && comment.length) {
            var addEntryCommentUrl = $("#js-quote-comments").data("quote-base-link") + "entry/comment";
            $.ajax({
                url: addEntryCommentUrl,
                data: {
                    comment: comment,
                    entryNumber: entryNumber
                },
                type: "post",
                success: function() {
                    ACC.quote.onEntryCommentSuccess(entryNumber)
                }
            })
        }
    },
    onCommentSuccess: function(showAllComments) {
        $("#commentListDiv").load(location.href + " #commentListDiv", function() {
            ACC.quote.displayComments("" + showAllComments)
        })
    },
    onEntryCommentSuccess: function(entryNumber) {
        $("#entryCommentListDiv_" + entryNumber).load(location.href + " #entryCommentListDiv_" + entryNumber, function() {
            ACC.quote.displayEntryComments(entryNumber)
        }),
        $("#entryComment_" + entryNumber).val("")
    },
    toggleMoreComments: function() {
        $(document).on("click", "#moreCommentsAnchor", ACC.quote.displayMoreComments),
        $(document).on("click", ".js-more-entry-comments-anchor", ACC.quote.displayMoreEntryComments)
    },
    toggleLessComments: function() {
        $(document).on("click", "#lessCommentsAnchor", ACC.quote.displayLessComments),
        $(document).on("click", ".js-less-entry-comments-anchor", ACC.quote.displayLessEntryComments)
    },
    displayMoreComments: function(e) {
        e.preventDefault(),
        ACC.quote.displayComments("true")
    },
    displayMoreEntryComments: function(e) {
        e.preventDefault(),
        ACC.quote.displayEntryComments($(this).data("entry-number"), "true")
    },
    displayLessComments: function(e) {
        null != e && e.preventDefault(),
        ACC.quote.displayComments("false")
    },
    displayLessEntryComments: function(e) {
        e.preventDefault(),
        ACC.quote.displayEntryComments($(this).data("entry-number"), "false")
    },
    displayComments: function(showAll) {
        for (var quoteComments = $("#js-quote-comments"), currentCommentsShown = quoteComments.data("current-comments-shown"), comments = $('[id^="comment_"]'), i = 0; i < comments.length; i++)
            "true" === showAll ? $(comments[i]).show() : i < currentCommentsShown ? $(comments[i]).show() : $(comments[i]).hide();
        return "false" === showAll ? ($("#moreCommentsAnchor").show(),
        $("#lessCommentsAnchor").hide(),
        quoteComments.data("show-all-comments", !1)) : ($("#moreCommentsAnchor").hide(),
        $("#lessCommentsAnchor").show(),
        quoteComments.data("show-all-comments", !0)),
        !1
    },
    displayEntryComments: function(entryNumber, showAll) {
        var quoteEntryComments = $("#entryCommentListDiv_" + entryNumber)
          , comments = quoteEntryComments.find('[id^="entryComment_' + entryNumber + '"]');
        showAll = showAll || "" + quoteEntryComments.data("show-all-entry-comments");
        for (var i = 0; i < comments.length; i++)
            "true" === showAll ? $(comments[i]).show() : i < 4 ? $(comments[i]).show() : $(comments[i]).hide();
        return "false" === showAll ? (quoteEntryComments.find(".js-more-entry-comments-anchor").show(),
        quoteEntryComments.find(".js-less-entry-comments-anchor").hide(),
        quoteEntryComments.data("show-all-entry-comments", !1)) : (quoteEntryComments.find(".js-more-entry-comments-anchor").hide(),
        quoteEntryComments.find(".js-less-entry-comments-anchor").show(),
        quoteEntryComments.data("show-all-entry-comments", !0)),
        !1
    },
    quoteDetailsNavigation: function() {
        $(".js-quote-actions").on("click", function(e) {
            $(this).parent().find("nav").toggleClass("display-none")
        })
    },
    bindSubmitConfirmation: function(e) {
        ACC.quote.handleConfirmationModal({
            actionButtonSelector: ".js-quote-submit-btn",
            modalWindowSelector: "#js-quote-submit-modal",
            modalTitleDataAttributeName: "submit-confirmation-modal-title",
            cancelButtonSelector: "#js-quote-submit-modal #submitNoButton"
        }),
        $("#quoteSubmitForm").submit(function(event) {
            var quoteForm = $("#quoteForm");
            if (quoteForm.is("form")) {
                event.preventDefault();
                var submitUrl = $(this).prop("action");
                quoteForm.prop("action", submitUrl),
                quoteForm.submit()
            }
        })
    },
    bindCheckoutConfirmation: function(e) {
        ACC.quote.handleConfirmationModal({
            actionButtonSelector: ".js-quote-checkout-btn",
            modalWindowSelector: "#js-quote-checkout-modal",
            modalTitleDataAttributeName: "submit-confirmation-modal-title",
            cancelButtonSelector: "#js-quote-checkout-modal #submitNoButton"
        })
    },
    bindCancelConfirmation: function(e) {
        ACC.quote.handleConfirmationModal({
            actionButtonSelector: ".js-quote-cancel-btn",
            modalWindowSelector: "#js-quote-cancel-modal",
            modalTitleDataAttributeName: "cancel-confirmation-modal-title",
            cancelButtonSelector: "#js-quote-cancel-modal #cancelNoButton"
        })
    },
    bindEditConfirmation: function(e) {
        ACC.quote.handleConfirmationModal({
            actionButtonSelector: ".js-quote-warning-btn",
            modalWindowSelector: "#js-quote-edit-modal",
            modalTitleDataAttributeName: "edit-confirmation-modal-title",
            cancelButtonSelector: "#js-quote-edit-modal #cancelEditNoButton",
            confirmButtonSelector: "#js-quote-edit-modal #cancelEditYesButton"
        })
    },
    handleConfirmationModal: function(options) {
        $(options.actionButtonSelector).click(function(e) {
            e.preventDefault();
            var modalWindow = $(options.modalWindowSelector)
              , title = modalWindow.data(options.modalTitleDataAttributeName);
            options.initializeCallback && options.initializeCallback(),
            ACC.colorbox.open(title, {
                inline: !0,
                href: modalWindow,
                width: "480px",
                escKey: !1,
                overlayClose: !1,
                onComplete: function() {
                    ACC.colorbox.resize()
                }
            })
        }),
        $(options.cancelButtonSelector).click(function(e) {
            e.preventDefault(),
            ACC.colorbox.close()
        }),
        $(options.confirmButtonSelector).click(function(e) {
            e.preventDefault(),
            ACC.colorbox.close();
            var sUrl = $(options.actionButtonSelector).data("quoteEditUrl");
            window.location = sUrl
        })
    },
    bindQuoteDiscount: function(e) {
        ACC.quote.handleDiscountModal({
            actionButtonSelector: ".js-quote-discount-link",
            modalWindowSelector: "#js-quote-discount-modal",
            modalTitleDataAttributeName: "quote-modal-title",
            modalTotalDataAttributeName: "quote-modal-total",
            modalQuoteDiscountDataAttributeName: "quote-modal-quote-discount",
            modalCurrencyDataAttributeName: "quote-modal-currency",
            cancelButtonSelector: "#js-quote-discount-modal #cancelButton"
        })
    },
    handleDiscountModal: function(options) {
        var modalWindow = $(options.modalWindowSelector)
          , total = parseFloat(modalWindow.data(options.modalTotalDataAttributeName))
          , quoteDiscount = parseFloat(modalWindow.data(options.modalQuoteDiscountDataAttributeName))
          , currency = modalWindow.data(options.modalCurrencyDataAttributeName);
        function enableSubmit() {
            $("#js-quote-discount-by-percentage").css("border-color", "#cccccc"),
            $("#js-quote-discount-by-amount").css("border-color", "#cccccc"),
            $("#js-quote-discount-adjust-total").css("border-color", "#cccccc"),
            $("#submitButton").prop("disabled", !1)
        }
        function resetIntial(val) {
            return isNaN(parseFloat(val)) && (val = (val = 0).toFixed(2)),
            val
        }
        function updateByPercentage() {
            var percent = parseFloat($("#js-quote-discount-by-percentage").val());
            100 < percent || percent < 0 ? ($("#js-quote-discount-by-percentage").css("border-color", "red"),
            $("#submitButton").prop("disabled", !0)) : enableSubmit();
            var discountAmount = (discountAmount = total * percent / 100).toFixed(2);
            $("#js-quote-discount-by-amount").val(resetIntial(discountAmount));
            var remainTotal = (remainTotal = total - discountAmount).toFixed(2);
            $("#js-quote-discount-adjust-total").val(resetIntial(remainTotal)),
            $("#js-quote-discount-rate").val(resetIntial(percent)),
            $("#js-quote-discount-type").val("PERCENT"),
            updateNewTotal(remainTotal)
        }
        function reset() {
            var per = $("#js-quote-discount-by-percentage").val()
              , amt = $("#js-quote-discount-by-amount").val()
              , tot = $("#js-quote-discount-adjust-total").val();
            "" == per && $("#js-quote-discount-by-percentage").val("0.00"),
            "" == amt && $("#js-quote-discount-by-amount").val("0.00"),
            "" != tot && 0 != tot || $("#js-quote-discount-adjust-total").val(total)
        }
        function holdPreviousValue(event) {
            var $this = $(this);
            46 == event.which && -1 == $this.val().indexOf(".") || !(event.which < 48 || 57 < event.which) || 0 == event.which || 8 == event.which || event.preventDefault();
            var text = $(this).val();
            46 == event.which && -1 == text.indexOf(".") && setTimeout(function() {
                3 < $this.val().substring($this.val().indexOf(".")).length && $this.val($this.val().substring(0, $this.val().indexOf(".") + 3))
            }, 1),
            -1 != text.indexOf(".") && 2 < text.substring(text.indexOf(".")).length && 0 != event.which && 8 != event.which && $(this)[0].selectionStart >= text.length - 2 && event.preventDefault()
        }
        function updateByAmount() {
            var discountAmount = parseFloat($("#js-quote-discount-by-amount").val());
            total < discountAmount || discountAmount < 0 ? ($("#js-quote-discount-by-amount").css("border-color", "red"),
            $("#submitButton").prop("disabled", !0)) : enableSubmit();
            var percent = (percent = discountAmount / total * 100).toFixed(2);
            $("#js-quote-discount-by-percentage").val(resetIntial(percent));
            var remainTotal = (remainTotal = total - discountAmount).toFixed(2);
            $("#js-quote-discount-adjust-total").val(resetIntial(remainTotal)),
            $("#js-quote-discount-rate").val(resetIntial(discountAmount)),
            $("#js-quote-discount-type").val("ABSOLUTE"),
            updateNewTotal(remainTotal)
        }
        function updateByAdjustTotal() {
            var adujstTotal = parseFloat($("#js-quote-discount-adjust-total").val());
            total < adujstTotal || adujstTotal < 0 ? ($("#js-quote-discount-adjust-total").css("border-color", "red"),
            $("#submitButton").prop("disabled", !0)) : enableSubmit();
            var discountAmount = (discountAmount = total - adujstTotal).toFixed(2);
            $("#js-quote-discount-by-amount").val(resetIntial(discountAmount));
            var percent = (percent = discountAmount / total * 100).toFixed(2);
            $("#js-quote-discount-by-percentage").val(resetIntial(percent)),
            $("#js-quote-discount-rate").val(resetIntial(adujstTotal)),
            $("#js-quote-discount-type").val("TARGET"),
            updateNewTotal(adujstTotal)
        }
        function updateNewTotal(newTotal) {
            isNaN(parseFloat(newTotal)) && (newTotal = total);
            newTotal = parseFloat(newTotal).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,");
            $("#js-quote-discount-new-total").text(currency.concat(newTotal))
        }
        $(options.actionButtonSelector).click(function(e) {
            e.preventDefault();
            var title = modalWindow.data(options.modalTitleDataAttributeName);
            options.initializeCallback && options.initializeCallback(),
            ACC.colorbox.open(title, {
                inline: !0,
                href: modalWindow,
                width: "480px",
                onComplete: function() {
                    ACC.colorbox.resize();
                    var percent = quoteDiscount / total * 100
                      , adjustTotal = (total - quoteDiscount).toFixed(2);
                    $("#js-quote-discount-by-percentage").val(percent.toFixed(2)),
                    $("#js-quote-discount-by-amount").val(quoteDiscount.toFixed(2)),
                    $("#js-quote-discount-adjust-total").val(adjustTotal)
                }
            })
        }),
        $(options.cancelButtonSelector).click(function(e) {
            e.preventDefault(),
            ACC.colorbox.close()
        }),
        $("#js-quote-discount-by-percentage").keyup(updateByPercentage),
        $("#js-quote-discount-by-percentage").change(updateByPercentage),
        $("#js-quote-discount-by-percentage").blur(reset),
        $("#js-quote-discount-by-percentage").keypress(holdPreviousValue),
        $("#js-quote-discount-by-amount").keyup(updateByAmount),
        $("#js-quote-discount-by-amount").change(updateByAmount),
        $("#js-quote-discount-by-amount").keypress(holdPreviousValue),
        $("#js-quote-discount-by-amount").blur(reset),
        $("#js-quote-discount-adjust-total").keyup(updateByAdjustTotal),
        $("#js-quote-discount-adjust-total").change(updateByAdjustTotal),
        $("#js-quote-discount-adjust-total").keypress(holdPreviousValue),
        $("#js-quote-discount-adjust-total").blur(reset)
    },
    bindName: function() {
        $("#js-quote-name").on("focusout", function() {
            ACC.quote.updateMetadata()
        })
    },
    bindDescription: function() {
        $("#js-quote-description").on("focusout", function() {
            ACC.quote.updateMetadata()
        })
    },
    updateMetadata: function() {
        var updateMetadataUrl = $("#quoteFormDiv").data("metadata-url")
          , name = $("#js-quote-name").val().trim()
          , description = $("#js-quote-description").val()
          , nameWrapperElement = $("#js-quote-name-wrapper");
        name && name.length ? (nameWrapperElement.removeClass("has-error"),
        $.ajax({
            url: updateMetadataUrl,
            data: {
                name: name,
                description: description
            },
            type: "POST",
            success: function() {
                $(".js-modal-quote-description").text(description),
                $(".js-modal-quote-name").text(name)
            }
        })) : nameWrapperElement.hasClass("has-error") || nameWrapperElement.addClass("has-error")
    },
    bindExpirationTime: function(e) {
        var expirationTimeWrapperElement = $("#js-quote-expiration-time")
          , dateFormatForDatePicker = expirationTimeWrapperElement.data("date-format-for-date-picker")
          , minOfferValidityPeriodDays = expirationTimeWrapperElement.data("min-offer-validity-period-days")
          , minDate = new Date;
        minDate.setDate(minDate.getDate() + minOfferValidityPeriodDays),
        $("#expirationTime").datepicker({
            dateFormat: dateFormatForDatePicker,
            constrainInput: !0,
            minDate: minDate,
            onSelect: function() {
                ACC.quote.handleExpirationTimeUpdate(expirationTimeWrapperElement, dateFormatForDatePicker, minOfferValidityPeriodDays)
            }
        }),
        $("#expirationTime").change(function() {
            ACC.quote.handleExpirationTimeUpdate(expirationTimeWrapperElement, dateFormatForDatePicker, minOfferValidityPeriodDays)
        }),
        $(document).on("click", ".js-open-datepicker-quote-expiration-time", function() {
            $("#expirationTime").datepicker("show")
        })
    },
    handleExpirationTimeUpdate: function(expirationTimeWrapperElement, dateFormat, minOfferValidityPeriodDays) {
        var expirationTime = $("#expirationTime").val();
        ACC.quote.validateExpirationTime(dateFormat, expirationTime, minOfferValidityPeriodDays) ? (ACC.quote.updateExpirationTime(expirationTime.trim()),
        expirationTimeWrapperElement.removeClass("has-error")) : expirationTimeWrapperElement.hasClass("has-error") || expirationTimeWrapperElement.addClass("has-error")
    },
    validateExpirationTime: function(dateFormat, value, minOfferValidityPeriodDays) {
        try {
            if (value) {
                var selectedDate = $.datepicker.parseDate(dateFormat, value)
                  , validDate = new Date;
                return validDate.setHours(0, 0, 0, 0),
                validDate.setDate(validDate.getDate() + minOfferValidityPeriodDays),
                validDate <= selectedDate
            }
            return !0
        } catch (error) {
            return !1
        }
    },
    updateExpirationTime: function(expirationTime) {
        var url = $("#js-quote-expiration-time").data("expiration-time-url");
        $.ajax({
            url: url,
            type: "POST",
            data: {
                expirationTime: expirationTime
            },
            error: function(jqXHR) {
                var expirationTimeWrapperElement = $("#js-quote-expiration-time");
                expirationTimeWrapperElement.hasClass("has-error") || expirationTimeWrapperElement.addClass("has-error")
            }
        })
    }
},
$(document).ready(function() {
    $(".js-quote-toggle-btn").click(function() {
        $(this).toggleClass("open"),
        $("#quote__form--collapse").slideToggle(400),
        $(this).hasClass("open") ? $(this).addClass("collapsed") : $(this).removeClass("collapsed")
    }),
    $(".js-quote-comments-btn").click(function() {
        $(this).toggleClass("open"),
        $("#comments__collapse").slideToggle(400),
        $(this).hasClass("open") ? $(this).addClass("collapsed") : $(this).removeClass("collapsed")
    })
}),
ACC.ratingstars = {
    _autoload: [["bindRatingStars", 0 < $(".js-ratingCalc").length], ["bindRatingStarsSet", 0 < $(".js-ratingCalcSet").length]],
    bindRatingStars: function() {
        $(".js-ratingCalc").each(function() {
            var rating = $(this).data("rating");
            $(this).find(".js-greenStars").width($(this).width() * (parseFloat(rating.rating, 10) / rating.total))
        })
    },
    bindRatingStarsSet: function() {
        $(".js-writeReviewStars").on({
            mouseleave: function() {
                clearReviewState();
                var sV = 2 * parseFloat($(".js-ratingSetInput").val(), 10);
                "number" != typeof sV || isNaN(sV) ? clearReviewState() : setReviewState(sV)
            }
        });
        var ratingIcons = $(".js-writeReviewStars .js-ratingIcon")
          , setReviewState = function(index) {
            ratingIcons.slice(0, parseFloat(index, 10)).addClass("active")
        }
          , clearReviewState = function() {
            ratingIcons.removeClass("active")
        };
        ratingIcons.on({
            mouseenter: function() {
                clearReviewState(),
                setReviewState($(this).index() + 1)
            },
            mouseleave: function() {
                $(this).removeClass("active")
            },
            click: function() {
                $(".js-ratingSetInput").val(($(this).index() + 1) / 2)
            }
        })
    }
},
ACC.readmore = {
    _autoload: ["initReadmore"],
    initReadmore: function() {
        var msgOpen = ""
          , msgClose = "";
        0 < $(".js-read-more").length && ACC.os.isMobile() && $(".js-read-more").each(function() {
            msgOpen = $(this).data("label-open"),
            msgClose = $(this).data("label-close"),
            290 < $(this).text().length && $(this).addClass("read-more__area").prepend('<div class="read-more__btn--open"><span>' + msgOpen + "</span></div>").append('<div class="read-more__btn--close"><span>' + msgClose + "</span></div>")
        }),
        $(".js-read-more").on("click", function() {
            $(this).toggleClass("_active")
        })
    }
},
ACC.refinements = {
    _autoload: [["bindMoreLessToggles", 0 != $(".js-facet-form").length], ["bindMoreStoresToggles", 0 != $(".js-facet-form").length], ["init", 0 != $(".js-facet-form").length], ["bindSearch", 0 != $(".js-facet-form").length]],
    coords: {},
    storeSearchData: {},
    init: function() {},
    bindSearch: function() {
        $(document).on("submit", "#user_location_form", function(e) {
            e.preventDefault();
            var q = $(".js-shop-stores-facet .js-shop-store-search-input").val();
            0 < q.length && ACC.refinements.getInitStoreData(q)
        }),
        $(document).on("click", "#findStoresNearMeAjax", function(e) {
            e.preventDefault(),
            ACC.refinements.getInitStoreData(null, ACC.refinements.coords.latitude, ACC.refinements.coords.longitude)
        })
    },
    getInitStoreData: function(q, latitude, longitude) {
        $(".alert").remove(),
        data = {
            q: "",
            page: "0"
        },
        null != q && (data.q = q),
        null != latitude && (data.latitude = latitude),
        null != longitude && (data.longitude = longitude),
        ACC.refinements.storeSearchData = data,
        ACC.refinements.getStoreData()
    },
    getStoreData: function() {
        url = $(".js-facet-form").data("url"),
        $.ajax({
            url: url,
            data: ACC.refinements.storeSearchData,
            type: "get",
            success: function(response) {
                window.location.reload()
            }
        })
    },
    bindMoreLessToggles: function() {
        $(document).on("click", ".js-shop-stores-facet .js-facet-change-link", function(e) {
            e.preventDefault(),
            $(".js-shop-stores-facet .js-facet-container").hide(),
            $(".js-shop-stores-facet .js-facet-form").show()
        }),
        $(document).on("change", ".js-product-facet .js-facet-checkbox", function() {
            $(this).parents("form").submit()
        }),
        $(document).on("click", ".js-product-facet .js-more-facet-values-link", function(e) {
            e.preventDefault(),
            $(this).parents(".js-facet").find(".js-facet-top-values").hide(),
            $(this).parents(".js-facet").find(".js-facet-list-hidden").show(),
            $(this).parents(".js-facet").find(".js-more-facet-values").hide(),
            $(this).parents(".js-facet").find(".js-less-facet-values").show()
        }),
        $(document).on("click", ".js-product-facet .js-less-facet-values-link", function(e) {
            e.preventDefault(),
            $(this).parents(".js-facet").find(".js-facet-top-values").show(),
            $(this).parents(".js-facet").find(".js-facet-list-hidden").hide(),
            $(this).parents(".js-facet").find(".js-more-facet-values").show(),
            $(this).parents(".js-facet").find(".js-less-facet-values").hide()
        })
    },
    bindMoreStoresToggles: function() {
        $(document).on("click", ".js-shop-stores-facet .js-more-stores-facet-values", function(e) {
            e.preventDefault(),
            $(".js-shop-stores-facet ul.js-facet-list li.hidden").slice(0, 5).removeClass("hidden").first().find(".js-facet-checkbox").focus(),
            0 == $(".js-shop-stores-facet ul.js-facet-list li.hidden").length && $(".js-shop-stores-facet .js-more-stores-facet-values").hide()
        })
    }
},
ACC.sanitizer = {
    matcher: /<\/?([a-zA-Z0-9]+)*(.*?)\/?>/gim,
    whitelist: ["pre", "address", "em", "hr"],
    sanitize: function(html, useWhitelist) {
        return html = String(html) || "",
        ACC.sanitizer.match(html).forEach(function(tag) {
            useWhitelist && -1 != ACC.sanitizer.whitelist.indexOf(tag.name) || (html = html.replace(tag.full, ""))
        }),
        html
    },
    match: function(html) {
        html = String(html) || "";
        for (var match, matches = []; null != (match = ACC.sanitizer.matcher.exec(html)); ) {
            var attrr = match[2].split(" ")
              , attrs = [];
            attrr.shift(),
            attrr.forEach(function(attr) {
                var attr_name = (attr = attr.split("="))[0]
                  , attr_val = 1 < attr.length ? attr.slice(1).join("=") : null;
                attr_val && attr_val.charAt(0).match(/'|"/) && (attr_val = attr_val.slice(1)),
                attr_val && attr_val.charAt(attr_val.length - 1).match(/'|"/) && (attr_val = attr_val.slice(0, -1)),
                (attr = {
                    name: attr_name,
                    value: attr_val
                }).value || delete attr.value,
                attr.name && attrs.push(attr)
            });
            var tag = {
                full: match[0],
                name: match[1],
                attr: attrs
            };
            matches.push(tag)
        }
        return matches
    }
},
ACC.savedcarts = {
    _autoload: [["bindRestoreSavedCartClick", 0 != $(".js-restore-saved-cart").length], ["bindDeleteSavedCartLink", 0 != $(".js-delete-saved-cart").length], ["bindDeleteConfirmLink", 0 != $(".js-savedcart_delete_confirm").length], ["bindSaveCartForm", 0 != $(".js-save-cart-link").length || 0 != $(".js-update-saved-cart").length], ["bindUpdateUploadingSavedCarts", 0 != $(".js-uploading-saved-carts-update").length]],
    $savedCartRestoreBtn: {},
    $currentCartName: {},
    bindRestoreSavedCartClick: function() {
        $(".js-restore-saved-cart").click(function(event) {
            event.preventDefault();
            var popupTitle = $(this).data("restore-popup-title")
              , cartId = $(this).data("savedcart-id")
              , url = ACC.config.encodedContextPath + "/my-account/saved-carts/" + cartId + "/restore";
            $.get(url).done(function(data) {
                ACC.colorbox.open(popupTitle, {
                    html: data,
                    width: 500,
                    onComplete: function() {
                        ACC.common.refreshScreenReaderBuffer(),
                        ACC.savedcarts.bindRestoreModalHandlers(),
                        ACC.savedcarts.bindPostRestoreSavedCartLink()
                    },
                    onClosed: function() {
                        ACC.common.refreshScreenReaderBuffer()
                    }
                })
            })
        })
    },
    bindRestoreModalHandlers: function() {
        ACC.savedcarts.$savedCartRestoreBtn = $(".js-save-cart-restore-btn"),
        ACC.savedcarts.$currentCartName = $(".js-current-cart-name"),
        $(".js-prevent-save-active-cart").on("change", function(event) {
            if (!0 === $(this).prop("checked"))
                ACC.savedcarts.$currentCartName.attr("disabled", "disabled"),
                ACC.savedcarts.$savedCartRestoreBtn.removeAttr("disabled");
            else {
                ACC.savedcarts.$currentCartName.removeAttr("disabled");
                var inputVal = ACC.savedcarts.$currentCartName.val();
                "" == inputVal && 0 === inputVal.length && ACC.savedcarts.$savedCartRestoreBtn.attr("disabled", "disabled")
            }
        }),
        ACC.savedcarts.$currentCartName.on("focus", function(event) {
            $(".js-restore-current-cart-form").removeClass("has-error"),
            $(".js-restore-error-container").html("")
        }),
        ACC.savedcarts.$currentCartName.on("blur", function(event) {
            "" == this.value && 0 === this.value.length ? ACC.savedcarts.$savedCartRestoreBtn.attr("disabled", "disabled") : ACC.savedcarts.$savedCartRestoreBtn.removeAttr("disabled")
        })
    },
    bindPostRestoreSavedCartLink: function() {
        var keepRestoredCart = !0
          , preventSaveActiveCart = !1;
        $(document).on("click", ".js-keep-restored-cart", function(event) {
            keepRestoredCart = $(this).prop("checked")
        }),
        $(document).on("click", ".js-prevent-save-active-cart", function(event) {
            preventSaveActiveCart = $(this).prop("checked")
        }),
        $(document).on("click", ".js-save-cart-restore-btn", function(event) {
            event.preventDefault();
            var cartName = $("#activeCartName").val()
              , url = $(this).data("restore-url")
              , postData = {
                preventSaveActiveCart: preventSaveActiveCart,
                keepRestoredCart: keepRestoredCart,
                cartName: cartName
            };
            $.post(url, postData).done(function(result, data, status) {
                if ("200" == result) {
                    var url = ACC.config.encodedContextPath + "/cart";
                    window.location.replace(url)
                } else {
                    var errorMsg = status.responseText.slice(1, -1);
                    $(".js-restore-current-cart-form").addClass("has-error"),
                    $(".js-restore-error-container").html(errorMsg),
                    $(".js-savedcart_restore_confirm_modal").colorbox.resize()
                }
            })
        }),
        $(document).on("click", ".js-cancel-restore-btn", function(event) {
            ACC.colorbox.close()
        })
    },
    bindDeleteSavedCartLink: function() {
        $(document).on("click", ".js-delete-saved-cart", function(event) {
            event.preventDefault();
            var cartId = $(this).data("savedcart-id")
              , popupTitle = $(this).data("delete-popup-title");
            ACC.colorbox.open(popupTitle, {
                inline: !0,
                className: "js-savedcart_delete_confirm_modal",
                href: "#popup_confirm_savedcart_delete_" + cartId,
                width: "500px",
                onComplete: function() {
                    $(this).colorbox.resize()
                }
            })
        })
    },
    bindDeleteConfirmLink: function() {
        $(document).on("click", ".js-savedcart_delete_confirm", function(event) {
            event.preventDefault();
            var cartId = $(this).data("savedcart-id")
              , url = ACC.config.encodedContextPath + "/my-account/saved-carts/" + cartId + "/delete";
            $.ajax({
                url: url,
                type: "DELETE",
                success: function(response) {
                    ACC.colorbox.close();
                    var url = ACC.config.encodedContextPath + "/my-account/saved-carts";
                    window.location.replace(url)
                }
            })
        }),
        $(document).on("click", ".js-savedcart_delete_confirm_cancel", function(event) {
            ACC.colorbox.close()
        })
    },
    bindSaveCartForm: function() {
        ACC.savedcarts.charactersLeftInit();
        var form = $("#saveCartForm")
          , saveCart = !1
          , showSaveCartFormCallback = function() {
            var title = $("#saveCart").data("saveCartTitle");
            ACC.colorbox.open(title, {
                href: "#saveCart",
                inline: !0,
                width: "620px",
                onOpen: function() {
                    $("#saveCartName").val() && ACC.savedcarts.disableSaveCartButton(!1)
                },
                onComplete: function() {
                    $(this).colorbox.resize(),
                    saveCart = !1
                },
                onClosed: function() {
                    saveCart && form.submit(),
                    document.getElementById("saveCartForm").reset(),
                    ACC.savedcarts.disableSaveCartButton(!0),
                    ACC.savedcarts.charactersLeftInit()
                }
            })
        };
        $(document).on("click", ".js-save-cart-link, .js-update-saved-cart", function(e) {
            e.preventDefault(),
            ACC.common.checkAuthenticationStatusBeforeAction(showSaveCartFormCallback)
        }),
        $(document).on("click", "#saveCart #cancelSaveCartButton", function(e) {
            e.preventDefault(),
            $.colorbox.close()
        }),
        $("#saveCartName").keyup(function() {
            $("#saveCart #saveCartButton").prop("disabled", "" == this.value.trim());
            var value = $("#localized_val").attr("value")
              , tlength = $(this).val().length;
            remain = 255 - parseInt(tlength),
            $("#remain").text(value + " : " + remain)
        }),
        $("#saveCartDescription").keyup(function() {
            var value = $("#localized_val").attr("value")
              , tlength = $(this).val().length;
            remain = 255 - parseInt(tlength),
            $("#remainTextArea").text(value + " : " + remain)
        }),
        $(document).on("click", "#saveCart #saveCartButton", function(e) {
            e.preventDefault(),
            saveCart = !0,
            $.colorbox.close()
        })
    },
    charactersLeftInit: function() {
        $("#remain").text($("#localized_val").attr("value") + " : 255"),
        $("#remainTextArea").text($("#localized_val").attr("value") + " : 255")
    },
    disableSaveCartButton: function(value) {
        $("#saveCart #saveCartButton").prop("disabled", value)
    },
    bindUpdateUploadingSavedCarts: function() {
        var cartIdRowMapping = $(".js-uploading-saved-carts-update").data("idRowMapping")
          , refresh = $(".js-uploading-saved-carts-update").data("refreshCart");
        if (cartIdRowMapping && refresh) {
            var interval = $(".js-uploading-saved-carts-update").data("refreshInterval")
              , arrCartIdAndRow = cartIdRowMapping.split(",")
              , mapCartRow = new Object
              , cartCodes = [];
            for (i = 0; i < arrCartIdAndRow.length; i++) {
                var arrValue = arrCartIdAndRow[i].split(":");
                "" != arrValue && (mapCartRow[arrValue[0]] = arrValue[1],
                cartCodes.push(arrValue[0]))
            }
            0 < cartCodes.length && setTimeout(function() {
                ACC.savedcarts.refreshWorker(cartCodes, mapCartRow, interval)
            }, interval)
        }
    },
    refreshWorker: function(cartCodes, mapCartRow, interval) {
        $.ajax({
            dataType: "json",
            url: ACC.config.encodedContextPath + "/my-account/saved-carts/uploadingCarts",
            data: {
                cartCodes: cartCodes
            },
            type: "GET",
            traditional: !0,
            success: function(data) {
                if (null != data) {
                    for (i = 0; i < data.length; i++) {
                        var cart = data[i]
                          , index = $.inArray(cart.code, cartCodes);
                        -1 < index && cartCodes.splice(index, 1);
                        var rowIdIndex = mapCartRow[cart.code];
                        if (null != rowIdIndex) {
                            var rowSelector = "#row-" + rowIdIndex;
                            $(rowSelector + " .js-saved-cart-name").removeClass("not-active"),
                            $(rowSelector + " .js-saved-cart-date").removeClass("hidden"),
                            $(rowSelector + " .js-file-importing").remove(),
                            $(rowSelector + " .js-saved-cart-description").text(cart.description);
                            var numberOfItems = cart.entries.length;
                            $(rowSelector + " .js-saved-cart-number-of-items").text(numberOfItems),
                            $(rowSelector + " .js-saved-cart-total").text(cart.totalPrice.formattedValue),
                            0 < numberOfItems && $(rowSelector + " .js-restore-saved-cart").removeClass("hidden"),
                            $(rowSelector + " .js-delete-saved-cart").removeClass("hidden")
                        }
                    }
                }
                0 < cartCodes.length && setTimeout(function() {
                    ACC.savedcarts.refreshWorker(cartCodes, mapCartRow, interval)
                }, interval)
            }
        })
    }
},
ACC.silentorderpost = {
    spinner: $("<img src='" + ACC.config.commonResourcePath + "/images/spinner.gif' />"),
    bindUseDeliveryAddress: function() {
        if ($("#useDeliveryAddress").on("change", function() {
            if ($("#useDeliveryAddress").is(":checked")) {
                var options = {
                    countryIsoCode: $("#useDeliveryAddressData").data("countryisocode"),
                    useDeliveryAddress: !0
                };
                ACC.silentorderpost.enableAddressForm(),
                ACC.silentorderpost.displayCreditCardAddressForm(options, ACC.silentorderpost.useDeliveryAddressSelected),
                ACC.silentorderpost.disableAddressForm()
            } else
                ACC.silentorderpost.clearAddressForm(),
                ACC.silentorderpost.enableAddressForm()
        }),
        $("#useDeliveryAddress").is(":checked")) {
            var options = {
                countryIsoCode: $("#useDeliveryAddressData").data("countryisocode"),
                useDeliveryAddress: !0
            };
            ACC.silentorderpost.enableAddressForm(),
            ACC.silentorderpost.displayCreditCardAddressForm(options, ACC.silentorderpost.useDeliveryAddressSelected),
            ACC.silentorderpost.disableAddressForm()
        }
    },
    bindSubmitSilentOrderPostForm: function() {
        $(".submit_silentOrderPostForm").click(function() {
            ACC.common.blockFormAndShowProcessingMessage($(this)),
            $(".billingAddressForm").filter(":hidden").remove(),
            ACC.silentorderpost.enableAddressForm(),
            $("#silentOrderPostForm").submit()
        })
    },
    bindCycleFocusEvent: function() {
        $("#lastInTheForm").blur(function() {
            $('#silentOrderPostForm [tabindex$="10"]').focus()
        })
    },
    isEmpty: function(obj) {
        return null == obj || "" === obj
    },
    disableAddressForm: function() {
        $('input[id^="address\\."]').prop("disabled", !0),
        $('select[id^="address\\."]').prop("disabled", !0)
    },
    enableAddressForm: function() {
        $('input[id^="address\\."]').prop("disabled", !1),
        $('select[id^="address\\."]').prop("disabled", !1)
    },
    clearAddressForm: function() {
        $('input[id^="address\\."]').val(""),
        $('select[id^="address\\."]').val("")
    },
    useDeliveryAddressSelected: function() {
        $("#useDeliveryAddress").is(":checked") ? ($("#address\\.country").val($("#useDeliveryAddressData").data("countryisocode")),
        ACC.silentorderpost.disableAddressForm()) : (ACC.silentorderpost.clearAddressForm(),
        ACC.silentorderpost.enableAddressForm())
    },
    bindCreditCardAddressForm: function() {
        $("#billingCountrySelector :input").on("change", function() {
            var options = {
                countryIsoCode: $(this).val(),
                useDeliveryAddress: !1
            };
            ACC.silentorderpost.displayCreditCardAddressForm(options)
        })
    },
    displayCreditCardAddressForm: function(options, callback) {
        $.ajax({
            url: ACC.config.encodedContextPath + "/checkout/multi/sop/billingaddressform",
            async: !0,
            data: options,
            dataType: "html",
            beforeSend: function() {
                $("#billingAddressForm").html(ACC.silentorderpost.spinner)
            }
        }).done(function(data) {
            $("#billingAddressForm").html(data),
            "function" == typeof callback && callback.call()
        })
    }
},
$(document).ready(function() {
    with (ACC.silentorderpost)
        bindUseDeliveryAddress(),
        bindSubmitSilentOrderPostForm(),
        bindCreditCardAddressForm();
    $("#useDeliveryAddress").click()
}),
ACC.storefinder = {
    _autoload: [["init", 0 != $(".js-store-finder").length], ["bindStoreChange", 0 != $(".js-store-finder").length], ["bindSearch", 0 != $(".js-store-finder").length], "bindPagination"],
    storeData: "",
    storeId: "",
    coords: {},
    storeSearchData: {},
    createListItemHtml: function(data, id) {
        var extraClass = "";
        "true" == data.ownStore && (extraClass = "own-store");
        var item = "";
        return item += '<li class="list__entry ' + extraClass + ' ">',
        item += '<input type="radio" name="storeNamePost" value="' + data.displayName + '" id="store-filder-entry-' + id + '" class="js-store-finder-input" data-id="' + id + '">',
        item += '<label for="store-filder-entry-' + id + '" class="js-select-store-label">',
        item += '<span class="entry__info">',
        item += '<span class="entry__name">' + data.displayName + "</span>",
        item += '<span class="entry__address">' + data.line1 + " " + data.line2 + "</span>",
        item += '<span class="entry__city">' + data.town + "</span>",
        item += "</span>",
        item += '<span class="entry__distance">',
        item += "<span>" + data.formattedDistance + "</span>",
        item += "</span>",
        item += "</label>",
        item += "</li>"
    },
    refreshNavigation: function() {
        var listitems = "";
        if (data = ACC.storefinder.storeData,
        data) {
            for (i = 0; i < data.data.length; i++)
                listitems += ACC.storefinder.createListItemHtml(data.data[i], i);
            $(".js-store-finder-navigation-list").html(listitems);
            var firstInput = $(".js-store-finder-input")[0];
            $(firstInput).click()
        }
        var page = ACC.storefinder.storeSearchData.page;
        $(".js-store-finder-pager-item-from").html(10 * page + 1);
        var to = 10 * page + 10 > ACC.storefinder.storeData.total ? ACC.storefinder.storeData.total : 10 * page + 10;
        $(".js-store-finder-pager-item-to").html(to),
        $(".js-store-finder-pager-item-all").html(ACC.storefinder.storeData.total),
        $(".js-store-finder").removeClass("show-store")
    },
    bindPagination: function() {
        function checkStatus(page) {
            0 == page ? $(".js-store-finder-pager-prev").attr("disabled", "disabled") : $(".js-store-finder-pager-prev").removeAttr("disabled"),
            page == Math.floor(ACC.storefinder.storeData.total / 10) ? $(".js-store-finder-pager-next").attr("disabled", "disabled") : $(".js-store-finder-pager-next").removeAttr("disabled")
        }
        $(document).on("click", ".js-store-finder-details-back", function(e) {
            e.preventDefault(),
            $(".js-store-finder").removeClass("show-store")
        }),
        $(document).on("click", ".js-store-finder-pager-prev", function(e) {
            e.preventDefault();
            var page = ACC.storefinder.storeSearchData.page;
            ACC.storefinder.getStoreData(page - 1),
            checkStatus(page - 1)
        }),
        $(document).on("click", ".js-store-finder-pager-next", function(e) {
            e.preventDefault();
            var page = ACC.storefinder.storeSearchData.page;
            ACC.storefinder.getStoreData(page + 1),
            checkStatus(page + 1)
        })
    },
    bindStoreChange: function() {
        $(document).on("change", ".js-store-finder-input", function(e) {
            e.preventDefault(),
            storeData = ACC.storefinder.storeData.data;
            var storeId = $(this).data("id")
              , $ele = $(".js-store-finder-details");
            $(".openings__title--features").addClass("hidden"),
            $ele.find(".js-store-features").html(""),
            $.each(storeData[storeId], function(key, value) {
                if ("image" == key)
                    "" != value ? $ele.find(".js-store-image").html('<img src="' + value + '" alt="" />') : $ele.find(".js-store-image").html("");
                else if ("productcode" == key)
                    $ele.find(".js-store-productcode").val(value);
                else if ("openings" == key)
                    if ("" != value) {
                        var $oele = $ele.find(".js-store-" + key)
                          , openings = "";
                        $.each(value, function(key2, value2) {
                            openings += "<dt>" + key2 + "</dt>",
                            openings += "<dd>" + value2 + "</dd>"
                        }),
                        $oele.html(openings)
                    } else
                        $ele.find(".js-store-" + key).html("");
                else if ("specialOpenings" == key)
                    ;
                else if ("features" == key) {
                    var features = "";
                    $.each(value, function(key2, value2) {
                        features += "<li>" + value2 + "</li>"
                    }),
                    features && $(".openings__title--features").removeClass("hidden"),
                    $ele.find(".js-store-" + key).html(features)
                } else
                    "" != value ? $ele.find(".js-store-" + key).html(value) : $ele.find(".js-store-" + key).html("")
            }),
            ACC.storefinder.storeId = storeData[storeId],
            ACC.storefinder.initGoogleMap()
        }),
        $(document).on("click", ".js-select-store-label", function(e) {
            $(".js-store-finder").addClass("show-store")
        }),
        $(document).on("click", ".js-back-to-storelist", function(e) {
            $(".js-store-finder").removeClass("show-store")
        })
    },
    initGoogleMap: function() {
        0 < $(".js-store-finder-map").length && ACC.global.addGoogleMapsApi("ACC.storefinder.loadGoogleMap")
    },
    loadGoogleMap: function() {
        if (storeInformation = ACC.storefinder.storeId,
        0 < $(".js-store-finder-map").length) {
            $(".js-store-finder-map").attr("id", "store-finder-map");
            var centerPoint = new google.maps.LatLng(storeInformation.latitude,storeInformation.longitude)
              , mapOptions = {
                zoom: 13,
                zoomControl: !0,
                panControl: !0,
                streetViewControl: !1,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                center: centerPoint
            }
              , map = new google.maps.Map(document.getElementById("store-finder-map"),mapOptions)
              , marker = new google.maps.Marker({
                position: new google.maps.LatLng(storeInformation.latitude,storeInformation.longitude),
                map: map,
                title: storeInformation.name,
                icon: "https://maps.google.com/mapfiles/markerA.png"
            })
              , infowindow = new google.maps.InfoWindow({
                content: storeInformation.name,
                disableAutoPan: !0
            });
            google.maps.event.addListener(marker, "click", function() {
                infowindow.open(map, marker)
            })
        }
    },
    bindSearch: function() {
        $(document).on("submit", "#storeFinderForm", function(e) {
            e.preventDefault();
            var q = $(".js-store-finder-search-input").val();
            if (0 < q.length)
                ACC.storefinder.getInitStoreData(q);
            else {
                var emptySearchMessage = $(".store__finder--search").data("msg-error");
                ACC.overlayDrm.toastError(emptySearchMessage)
            }
        }),
        $(".js-store-finder").hide(),
        $(document).on("click", "#findStoresNearMe", function(e) {
            e.preventDefault(),
            ACC.storefinder.getInitStoreData(null, ACC.storefinder.coords.latitude, ACC.storefinder.coords.longitude)
        })
    },
    getStoreData: function(page) {
        ACC.storefinder.storeSearchData.page = page,
        url = $(".js-store-finder").data("url"),
        $.ajax({
            url: url,
            data: ACC.storefinder.storeSearchData,
            type: "get",
            success: function(response) {
                ACC.storefinder.checkIfJson(response) ? (ACC.storefinder.storeData = $.parseJSON(response),
                ACC.storefinder.refreshNavigation(),
                ACC.storefinder.storeData.total < 10 && $(".js-store-finder-pager-next").attr("disabled", "disabled")) : ($(".js-store-finder-navigation-list li").remove(),
                $(".js-store-finder-navigation-list").append('<li><div class="loading"></div></li>'),
                $(".js-store-finder").css({
                    display: "none"
                }))
            }
        })
    },
    getInitStoreData: function(q, latitude, longitude) {
        $(".alert").remove(),
        data = {
            q: "",
            page: 0
        },
        null != q && (data.q = q),
        null != latitude && (data.latitude = latitude),
        null != longitude && (data.longitude = longitude),
        ACC.storefinder.storeSearchData = data,
        ACC.storefinder.getStoreData(data.page),
        $(".js-store-finder").show(),
        $(".js-store-finder-pager-prev").attr("disabled", "disabled"),
        $(".js-store-finder-pager-next").removeAttr("disabled")
    },
    checkIfJson: function(string) {
        return !!/^[\],:{}\s]*$/.test(string.replace(/\\["\\\/bfnrtu]/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))
    },
    init: function() {
        $("#findStoresNearMe").attr("disabled", "disabled"),
        navigator.geolocation && navigator.geolocation.getCurrentPosition(function(position) {
            ACC.storefinder.coords = position.coords,
            $("#findStoresNearMe").removeAttr("disabled")
        }, function(error) {
            console.log("An error occurred... The error code and message are: " + error.code + "/" + error.message)
        })
    }
},
ACC.tabs = {
    _autoload: [["bindTabs", 0 < $(".js-tabs").length], "hideReviewBtn", "determineToDisplayReviews"],
    bindTabs: function() {
        $e = $(".js-tabs");
        var tabs = $e.accessibleTabs({
            tabhead: ".tabhead",
            tabbody: ".tabbody",
            fx: "show",
            fxspeed: 0,
            currentClass: "active",
            autoAnchor: !0
        });
        setTimeout(function() {
            $("#tabShipping-mobile").parent().addClass("shipping-tab")
        }),
        $e.on("click", ".tabhead", function(e) {
            if (e.preventDefault(),
            $(this).hasClass("active"))
                $(this).removeClass("active"),
                $(this).next().hide();
            else {
                $(this).parents(".js-tabs").children(".tabs-list").find("a[href='#" + $(this).attr("id") + "']").click();
                var offset = $(this).offset().top;
                768 <= $(window).width() && (offset -= $(".js-mainHeader").height()),
                $("body,html").scrollTop(offset)
            }
        }),
        $e.on("click", "#tabreview", function(e) {
            e.preventDefault(),
            ACC.track.trackShowReviewClick(),
            ACC.tabs.showReviewsAction("reviews")
        }),
        $e.on("click", ".all-reviews-btn", function(e) {
            e.preventDefault(),
            ACC.tabs.showReviewsAction("allreviews"),
            ACC.tabs.hideReviewBtn(".all-reviews-btn"),
            ACC.tabs.showReviewBtn(".less-reviews-btn")
        }),
        $e.on("click", ".less-reviews-btn", function(e) {
            e.preventDefault(),
            ACC.tabs.showReviewsAction("reviews"),
            ACC.tabs.hideReviewBtn(".less-reviews-btn"),
            ACC.tabs.showReviewBtn(".all-reviews-btn")
        }),
        $(document).on("click", ".js-writeReviewTab", function(e) {
            e.preventDefault(),
            tabs.showAccessibleTabSelector($(this).attr("href")),
            $(".js-review-write").show(),
            $("#reviewForm input[name=headline]").focus()
        }),
        $(document).on("click", ".js-review-write-toggle", function(e) {
            e.preventDefault(),
            $(".js-review-write:visible").length < 1 ? $(".js-review-write").show() : $(".js-review-write").hide()
        }),
        $(document).on("click", ".js-openTab", function() {
            tabs.showAccessibleTabSelector($(this).attr("href"))
        })
    },
    showReviewsAction: function(s) {
        $.get($("#reviews").data(s), function(result) {
            $("#reviews").html(result),
            0 < $(".js-ratingCalc").length && (ACC.ratingstars.bindRatingStars(),
            ACC.tabs.showingAllReviews())
        })
    },
    hideReviewBtn: function(btnClass) {
        btnClass = null == btnClass ? ".less-reviews-btn" : btnClass,
        $(btnClass).hide()
    },
    showReviewBtn: function(btnClass) {
        $(btnClass).show()
    },
    showingAllReviews: function() {
        $("#showingAllReviews").data("showingallreviews") && ACC.tabs.hideReviewBtn(".all-reviews-btn")
    },
    determineToDisplayReviews: function() {
        "#tabreview" == location.hash && ACC.tabs.showReviewsAction("reviews")
    }
},
ACC.termsandconditions = {
    bindTermsAndConditionsLink: function() {
        $(document).on("click", ".termsAndConditionsLink", function(e) {
            e.preventDefault(),
            $.colorbox({
                maxWidth: "100%",
                maxHeight: "80%",
                width: "870px",
                scrolling: !0,
                href: $(this).attr("href"),
                close: '<span class="close-icon"></span>',
                title: '<div class="headline"><span class="headline-text">' + $(this).data("title") == void 0 ? "Terms and Conditions" : $(this).data("title") + "</span></div>",
                onComplete: function() {
                    ACC.common.refreshScreenReaderBuffer()
                },
                onClosed: function() {
                    ACC.common.refreshScreenReaderBuffer()
                }
            })
        })
    },
    handleRegisterChkTermsConditionsChange: function() {
        $("#registerChkTermsConditions").change(function(e) {
            e.preventDefault();
            var btnSubmit = $(this).parents("form:first").find(":submit");
            $(this).is(":checked") ? btnSubmit.prop("disabled", !1) : btnSubmit.prop("disabled", !0)
        })
    }
},
$(function() {
    with (ACC.termsandconditions)
        bindTermsAndConditionsLink(),
        handleRegisterChkTermsConditionsChange(),
        $("#registerChkTermsConditions").removeAttr("disabled"),
        $('[name="consentForm.consentGiven"]').removeAttr("disabled")
}),
ACC.track = {
    trackAddToCart: function(productCode, quantity, cartData) {
        window.mediator.publish("trackAddToCart", {
            productCode: productCode,
            quantity: quantity,
            cartData: cartData
        })
    },
    trackRemoveFromCart: function(productCode, initialCartQuantity) {
        window.mediator.publish("trackRemoveFromCart", {
            productCode: productCode,
            initialCartQuantity: initialCartQuantity
        })
    },
    trackUpdateCart: function(productCode, initialCartQuantity, newCartQuantity) {
        window.mediator.publish("trackUpdateCart", {
            productCode: productCode,
            initialCartQuantity: initialCartQuantity,
            newCartQuantity: newCartQuantity
        })
    },
    trackShowReviewClick: function(productCode) {
        window.mediator.publish("trackShowReviewClick", {})
    }
},
ACC.validation = {
    _autoload: [],
    checkEmail: function(email) {
        return !!new RegExp(/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i).test(email)
    },
    counterTextArea: function(component) {
        var maxLength, $textArea, charsLeft = 0;
        $textArea = $(component),
        charsLeft = maxLength = Number($textArea.attr("maxLength")),
        $(document).on("change keyup keydown paste", component, function(event) {
            var $target = $(event.currentTarget);
            charsLeft = maxLength - $target.val().length,
            $target.parent().find(component + "__counter").text(charsLeft)
        }).trigger("change")
    },
    emojiStrip: function(content) {
        if (null == content || "" == content)
            return content;
        return content.replace(new RegExp("(©|®|[ -㌀]|\ud83c[퀀-\udfff]|\ud83d[퀀-\udfff]|\ud83e[퀀-\udfff])","g"), "")
    }
};
